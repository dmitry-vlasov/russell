$[ uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_start_with_the_Axiom_of_Extensionality/Introduce_the_Axiom_of_Extensionality.smm $]
$( =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                   Class abstractions (a.k.a. class builders)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)
$( Declare new constants use in class definition. $)
$c { $.
$( Left brace $)
$c | $.
$( Vertical bar $)
$c } $.
$( Right brace $)
$( --- Start of old code before overloading prevention patch. $)
$( @c class @. @( Class variable type @)
  $)
$( --- End of old code before overloading prevention patch. $)
$( Declare symbols as variables $)
$( Declare variable symbols that will be used to represent classes.  Note
     that later on ` R ` , ` S ` , ` F ` and ` G ` denote relations and
     functions, but these letters serve as mnemonics only and in fact behave
     no differently from the variables ` A ` through ` D ` . $)
$( Introduce the class builder or class abstraction notation ("the class of
     sets ` x ` such that ` ph ` is true").  Our class variables ` A ` ,
     ` B ` , etc. range over class builders (implicitly in the case of defined
     class terms such as ~ df-nul ).  Note that a set variable can be expressed
     as a class builder per theorem ~ cvjust , justifying the assignment of set
     variables to class variables via the use of ~ cv . $)
${
	$v ph x $.
	f0 $f wff ph $.
	f1 $f set x $.
	acab $a class { x | ph } $.
$}
$( --- Start of old code before overloading prevention patch. $)
$( @( A set variable is a class expression.  The syntax " ` class x ` " can be
     viewed as an abbreviation for " ` class { y | y e. x } ` " (a special case
     of ~ cab ), where ` y ` is distinct from ` x ` .  See the discussion under
     the definition of class in [Jech] p. 4.  Note that ` { y | y e. x } = x `
     by ~ cvjust . @)
  cv @a class x @.
  $)
$( --- End of old code before overloading prevention patch. $)
$( $j primitive 'cv' 'wceq' 'wcel' 'cab'; $)
$( Let ` A ` be a class variable. $)
$( Let ` B ` be a class variable. $)
$( Let ` C ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` D ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` P ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` Q ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` R ` be a class variable. $)
$( Let ` S ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` T ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` U ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` e ` be an individual variable. $)
$( Let ` f ` be an individual variable. $)
$( Let ` g ` be an individual variable. $)
$( Let ` h ` be an individual variable. $)
$( Let ` i ` be an individual variable. $)
$( Let ` j ` be an individual variable. $)
$( Let ` k ` be an individual variable. $)
$( Let ` m ` be an individual variable. $)
$( Let ` n ` be an individual variable. $)
$( Let ` o ` be an individual variable. $)
$( Let ` E ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` F ` be a class variable. $)
$( Let ` G ` be a class variable. $)
$( Let ` H ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` I ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` J ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` K ` be a class variable. $)
$( Let ` L ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` M ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` N ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` O ` be a class variable. $)
$( Let ` V ` be a class variable. $)
$( Let ` W ` be a class variable. $)
$( Let ` X ` be a class variable. $)
$( Let ` Y ` be a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Define a connective symbol for use as a class variable. $)
$( Let ` Z ` be a class variable. $)
$( Let ` s ` be an individual variable. $)
$( Let ` r ` be an individual variable. $)
$( Let ` q ` be an individual variable. $)
$( Let ` p ` be an individual variable. $)
$( Let ` a ` be an individual variable. $)
$( Let ` b ` be an individual variable. $)
$( Let ` c ` be an individual variable. $)
$( Let ` d ` be an individual variable. $)
$( Let ` l ` be an individual variable. $)
$( --- Start of old code before overloading prevention patch. $)
$( @( Extend wff definition to include class equality. @)
  wceq @a wff A = B @.
  $)
$( --- End of old code before overloading prevention patch. $)
$( --- Start of old code before overloading prevention patch. $)
$( @( Extend wff definition to include the membership connective between
     classes. @)
  wcel @a wff A e. B @.
  $)
$( --- End of old code before overloading prevention patch. $)
$( Define class abstraction notation (so-called by Quine), also called a
     "class builder" in the literature. ` x ` and ` y ` need not be distinct.
     Definition 2.1 of [Quine] p. 16.  Typically, ` ph ` will have ` y ` as a
     free variable, and " ` { y | ph } ` " is read "the class of all sets ` y `
     such that ` ph ( y ) ` is true."  We do not define ` { y | ph } ` in
     isolation but only as part of an expression that extends or "overloads"
     the ` e. ` relationship.

     This is our first use of the ` e. ` symbol to connect classes instead of
     sets.  The syntax definition ~ wcel , which extends or "overloads" the
     ~ wel definition connecting set variables, requires that both sides of
     ` e. ` be a class.  In ~ df-cleq and ~ df-clel , we introduce a new kind
     of variable (class variable) that can substituted with expressions such as
     ` { y | ph } ` .  In the present definition, the ` x ` on the left-hand
     side is a set variable.  Syntax definition ~ cv allows us to substitute a
     set variable ` x ` for a class variable: all sets are classes by ~ cvjust
     (but not necessarily vice-versa).  For a full description of how classes
     are introduced and how to recover the primitive language, see the
     discussion in Quine (and under ~ abeq2 for a quick overview).

     Because class variables can be substituted with compound expressions and
     set variables cannot, it is often useful to convert a theorem containing a
     free set variable to a more general version with a class variable.  This
     is done with theorems such as ~ vtoclg which is used, for example, to
     convert ~ elirrv to ~ elirr .

     This is called the "axiom of class comprehension" by [Levy] p. 338, who
     treats the theory of classes as an extralogical extension to our logic and
     set theory axioms.  He calls the construction ` { y | ph } ` a "class
     term".

     For a general discussion of the theory of classes, see
     ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
     5-Aug-1993.) $)
${
	$v ph x y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	adf-clab $a |- ( x e. { y | ph } <-> [ x / y ] ph ) $.
$}
$( Simplification of class abstraction notation when the free and bound
     variables are identical.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph x $.
	f0 $f wff ph $.
	f1 $f set x $.
	pabid $p |- ( x e. { x | ph } <-> ph ) $=
	f0 f1 f1 adf-clab f0 f1 psbid f1 asup_set_class f0 f1 acab awcel f0 f1 f1 awsb f0 pbitri $.
$}
$( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by NM, 5-Aug-1993.) $)
${
	$v ph x y $.
	$d x y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	phbab1 $p |- ( y e. { x | ph } -> A. x y e. { x | ph } ) $=
	f0 f2 f1 adf-clab f0 f1 f2 phbs1 f2 asup_set_class f0 f1 acab awcel f0 f1 f2 awsb f1 phbxfrbi $.
$}
$( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
${
	$v ph x y $.
	$d x y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	pnfsab1 $p |- F/ x y e. { x | ph } $=
	f0 f1 f2 phbab1 f2 asup_set_class f0 f1 acab awcel f1 pnfi $.
$}
$( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by NM, 1-Mar-1995.) $)
${
	$v ph x y z $.
	$d x z $.
	e0 $e |- ( ph -> A. x ph ) $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	f3 $f set z $.
	phbab $p |- ( z e. { y | ph } -> A. x z e. { y | ph } ) $=
	f0 f3 f2 adf-clab e0 f0 f2 f3 f1 phbsb f3 asup_set_class f0 f2 acab awcel f0 f2 f3 awsb f1 phbxfrbi $.
$}
$( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
${
	$v ph x y z $.
	$d x z $.
	e0 $e |- F/ x ph $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	f3 $f set z $.
	pnfsab $p |- F/ x z e. { y | ph } $=
	e0 f0 f1 pnfri f0 f1 f2 f3 phbab f3 asup_set_class f0 f2 acab awcel f1 pnfi $.
$}
$( Define the equality connective between classes.  Definition 2.7 of
       [Quine] p. 18.  Also Definition 4.5 of [TakeutiZaring] p. 13; Chapter 4
       provides its justification and methods for eliminating it.  Note that
       its elimination will not necessarily result in a single wff in the
       original language but possibly a "scheme" of wffs.

       This is an example of a somewhat "risky" definition, meaning that it has
       a more complex than usual soundness justification (outside of Metamath),
       because it "overloads" or reuses the existing equality symbol rather
       than introducing a new symbol.  This allows us to make statements that
       may not hold for the original symbol.  For example, it permits us to
       deduce ` y = z <-> A. x ( x e. y <-> x e. z ) ` , which is not a theorem
       of logic but rather presupposes the Axiom of Extensionality (see theorem
       ~ axext4 ).  We therefore include this axiom as a hypothesis, so that
       the use of Extensionality is properly indicated.

       We could avoid this complication by introducing a new symbol, say =_2,
       in place of ` = ` .  This would also have the advantage of making
       elimination of the definition straightforward, so that we could
       eliminate Extensionality as a hypothesis.  We would then also have the
       advantage of being able to identify in various proofs exactly where
       Extensionality truly comes into play rather than just being an artifact
       of a definition.  One of our theorems would then be ` x ` =_2
       ` y <-> x = y ` by invoking Extensionality.

       However, to conform to literature usage, we retain this overloaded
       definition.  This also makes some proofs shorter and probably easier to
       read, without the constant switching between two kinds of equality.

       See also comments under ~ df-clab , ~ df-clel , and ~ abeq2 .

       In the form of ~ dfcleq , this is called the "axiom of extensionality"
       by [Levy] p. 338, who treats the theory of classes as an extralogical
       extension to our logic and set theory axioms.

       For a general discussion of the theory of classes, see
       ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
       15-Sep-1993.) $)
${
	$v x y z A B $.
	$d x A $.
	$d x B $.
	$d x y z $.
	e0 $e |- ( A. x ( x e. y <-> x e. z ) -> y = z ) $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	f3 $f class A $.
	f4 $f class B $.
	adf-cleq $a |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $.
$}
$( The same as ~ df-cleq with the hypothesis removed using the Axiom of
       Extensionality ~ ax-ext .  (Contributed by NM, 15-Sep-1993.) $)
${
	$v x y z A B $.
	$d x A $.
	$d x B $.
	$d x y z $.
	f0 $f set x $.
	f1 $f class A $.
	f2 $f class B $.
	i0 $f set y $.
	i1 $f set z $.
	pdfcleq $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
	i0 i1 f0 aax-ext f0 i0 i1 f1 f2 adf-cleq $.
$}
$( Every set is a class.  Proposition 4.9 of [TakeutiZaring] p. 13.  This
       theorem shows that a set variable can be expressed as a class
       abstraction.  This provides a motivation for the class syntax
       construction ~ cv , which allows us to substitute a set variable for a
       class variable.  See also ~ cab and ~ df-clab .  Note that this is not a
       rigorous justification, because ~ cv is used as part of the proof of
       this theorem, but a careful argument can be made outside of the
       formalism of Metamath, for example as is done in Chapter 4 of Takeuti
       and Zaring.  See also the discussion under the definition of class in
       [Jech] p. 4 showing that "Every set can be considered to be a class."
       (Contributed by NM, 7-Nov-2006.) $)
${
	$v x y z $.
	$d x y z $.
	f0 $f set x $.
	f1 $f set y $.
	i0 $f set z $.
	pcvjust $p |- x = { y | y e. x } $=
	i0 f0 asup_set_class f1 asup_set_class f0 asup_set_class awcel f1 acab pdfcleq f1 asup_set_class f0 asup_set_class awcel i0 f1 adf-clab i0 f1 f0 pelsb3 i0 asup_set_class f1 asup_set_class f0 asup_set_class awcel f1 acab awcel f1 asup_set_class f0 asup_set_class awcel f1 i0 awsb i0 asup_set_class f0 asup_set_class awcel pbitr2i f0 asup_set_class f1 asup_set_class f0 asup_set_class awcel f1 acab awceq i0 asup_set_class f0 asup_set_class awcel i0 asup_set_class f1 asup_set_class f0 asup_set_class awcel f1 acab awcel awb i0 pmpgbir $.
$}
$( Define the membership connective between classes.  Theorem 6.3 of
       [Quine] p. 41, or Proposition 4.6 of [TakeutiZaring] p. 13, which we
       adopt as a definition.  See these references for its metalogical
       justification.  Note that like ~ df-cleq it extends or "overloads" the
       use of the existing membership symbol, but unlike ~ df-cleq it does not
       strengthen the set of valid wffs of logic when the class variables are
       replaced with set variables (see ~ cleljust ), so we don't include any
       set theory axiom as a hypothesis.  See also comments about the syntax
       under ~ df-clab .  Alternate definitions of ` A e. B ` (but that require
       either ` A ` or ` B ` to be a set) are shown by ~ clel2 , ~ clel3 , and
       ~ clel4 .

       This is called the "axiom of membership" by [Levy] p. 338, who treats
       the theory of classes as an extralogical extension to our logic and set
       theory axioms.

       For a general discussion of the theory of classes, see
       ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
       5-Aug-1993.) $)
${
	$v x A B $.
	$d x A $.
	$d x B $.
	f0 $f set x $.
	f1 $f class A $.
	f2 $f class B $.
	adf-clel $a |- ( A e. B <-> E. x ( x = A /\ x e. B ) ) $.
$}
$( Infer equality of classes from equivalence of membership.  (Contributed
       by NM, 5-Aug-1993.) $)
${
	$v x A B $.
	$d x A $.
	$d x B $.
	e0 $e |- ( x e. A <-> x e. B ) $.
	f0 $f set x $.
	f1 $f class A $.
	f2 $f class B $.
	peqriv $p |- A = B $=
	f0 f1 f2 pdfcleq e0 f1 f2 awceq f0 asup_set_class f1 awcel f0 asup_set_class f2 awcel awb f0 pmpgbir $.
$}
$( Deduce equality of classes from equivalence of membership.  (Contributed
       by NM, 17-Mar-1996.) $)
${
	$v ph x A B $.
	$d x A $.
	$d x B $.
	$d x ph $.
	e0 $e |- ( ph -> ( x e. A <-> x e. B ) ) $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	f3 $f class B $.
	peqrdv $p |- ( ph -> A = B ) $=
	e0 f0 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f1 palrimiv f1 f2 f3 pdfcleq f0 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f1 awal f2 f3 awceq psylibr $.
$}
$( Deduce equality of classes from an equivalence of membership that
       depends on the membership variable.  (Contributed by NM, 7-Nov-2008.) $)
${
	$v ph x A B C $.
	$d x A $.
	$d x B $.
	$d x ph $.
	e0 $e |- ( ( ph /\ x e. A ) -> x e. C ) $.
	e1 $e |- ( ( ph /\ x e. B ) -> x e. C ) $.
	e2 $e |- ( ( ph /\ x e. C ) -> ( x e. A <-> x e. B ) ) $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	f3 $f class B $.
	f4 $f class C $.
	peqrdav $p |- ( ph -> A = B ) $=
	e0 e2 f0 f1 asup_set_class f4 awcel awa f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel pbiimpd f0 f1 asup_set_class f4 awcel f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel pimpancom f0 f1 asup_set_class f2 awcel awa f1 asup_set_class f4 awcel f1 asup_set_class f3 awcel pmpd e1 e2 f0 f1 asup_set_class f4 awcel f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel pexbiri f0 f1 asup_set_class f4 awcel f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel pcom23 f0 f1 asup_set_class f3 awcel f1 asup_set_class f4 awcel f1 asup_set_class f2 awcel awi pimp f0 f1 asup_set_class f3 awcel awa f1 asup_set_class f4 awcel f1 asup_set_class f2 awcel pmpd f0 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel pimpbida f0 f1 f2 f3 peqrdv $.
$}
$( Law of identity (reflexivity of class equality).  Theorem 6.4 of [Quine]
       p. 41.

       This law is thought to have originated with Aristotle (_Metaphysics_,
       Zeta, 17, 1041 a, 10-20:  "Therefore, inquiring why a thing is itself,
       it's inquiring nothing; ... saying that the thing is itself constitutes
       the sole reasoning and the sole cause, in every case, to the question of
       why the man is man or the musician musician.").  (Thanks to Stefan Allan
       and Beno&icirc;t Jubin for this information.)  (Contributed by NM,
       5-Aug-1993.)  (Revised by Beno&icirc;t Jubin, 14-Oct-2017.) $)
${
	$v x A $.
	$d x A $.
	f0 $f class A $.
	i0 $f set x $.
	peqid $p |- A = A $=
	i0 asup_set_class f0 awcel pbiid i0 f0 f0 peqriv $.
$}
$( Class identity law with antecedent.  (Contributed by NM, 21-Aug-2008.) $)
${
	$v ph A $.
	f0 $f wff ph $.
	f1 $f class A $.
	peqidd $p |- ( ph -> A = A ) $=
	f1 peqid f1 f1 awceq f0 pa1i $.
$}
$( Commutative law for class equality.  Theorem 6.5 of [Quine] p. 41.
       (Contributed by NM, 5-Aug-1993.) $)
${
	$v x A B $.
	$d x A $.
	$d x B $.
	f0 $f class A $.
	f1 $f class B $.
	i0 $f set x $.
	peqcom $p |- ( A = B <-> B = A ) $=
	i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel pbicom i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel awb i0 asup_set_class f1 awcel i0 asup_set_class f0 awcel awb i0 palbii i0 f0 f1 pdfcleq i0 f1 f0 pdfcleq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel awb i0 awal i0 asup_set_class f1 awcel i0 asup_set_class f0 awcel awb i0 awal f0 f1 awceq f1 f0 awceq p3bitr4i $.
$}
$( Inference applying commutative law for class equality to an antecedent.
       (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B $.
	e0 $e |- ( A = B -> ph ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	peqcoms $p |- ( B = A -> ph ) $=
	f2 f1 peqcom e0 f2 f1 awceq f1 f2 awceq f0 psylbi $.
$}
$( Inference from commutative law for class equality.  (Contributed by NM,
       5-Aug-1993.) $)
${
	$v A B $.
	e0 $e |- A = B $.
	f0 $f class A $.
	f1 $f class B $.
	peqcomi $p |- B = A $=
	e0 f0 f1 peqcom f0 f1 awceq f1 f0 awceq pmpbi $.
$}
$( Deduction from commutative law for class equality.  (Contributed by NM,
       15-Aug-1994.) $)
${
	$v ph A B $.
	e0 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	peqcomd $p |- ( ph -> B = A ) $=
	e0 f1 f2 peqcom f0 f1 f2 awceq f2 f1 awceq psylib $.
$}
$( Equality implies equivalence of equalities.  (Contributed by NM,
       5-Aug-1993.) $)
${
	$v x A B C $.
	$d x A $.
	$d x B $.
	$d x C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	i0 $f set x $.
	peqeq1 $p |- ( A = B -> ( A = C <-> B = C ) ) $=
	i0 f0 f1 pdfcleq f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel awb i0 awal pbiimpi f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel awb i0 p19.21bi f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel i0 asup_set_class f2 awcel pbibi1d f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f2 awcel awb i0 asup_set_class f1 awcel i0 asup_set_class f2 awcel awb i0 palbidv i0 f0 f2 pdfcleq i0 f1 f2 pdfcleq f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f2 awcel awb i0 awal i0 asup_set_class f1 awcel i0 asup_set_class f2 awcel awb i0 awal f0 f2 awceq f1 f2 awceq p3bitr4g $.
$}
$( Inference from equality to equivalence of equalities.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqeq1i $p |- ( A = C <-> B = C ) $=
	e0 f0 f1 f2 peqeq1 f0 f1 awceq f0 f2 awceq f1 f2 awceq awb aax-mp $.
$}
$( Deduction from equality to equivalence of equalities.  (Contributed by
       NM, 27-Dec-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqeq1d $p |- ( ph -> ( A = C <-> B = C ) ) $=
	e0 f1 f2 f3 peqeq1 f0 f1 f2 awceq f1 f3 awceq f2 f3 awceq awb psyl $.
$}
$( Equality implies equivalence of equalities.  (Contributed by NM,
     5-Aug-1993.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqeq2 $p |- ( A = B -> ( C = A <-> C = B ) ) $=
	f0 f1 f2 peqeq1 f2 f0 peqcom f2 f1 peqcom f0 f1 awceq f0 f2 awceq f1 f2 awceq f2 f0 awceq f2 f1 awceq p3bitr4g $.
$}
$( Inference from equality to equivalence of equalities.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqeq2i $p |- ( C = A <-> C = B ) $=
	e0 f0 f1 f2 peqeq2 f0 f1 awceq f2 f0 awceq f2 f1 awceq awb aax-mp $.
$}
$( Deduction from equality to equivalence of equalities.  (Contributed by
       NM, 27-Dec-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqeq2d $p |- ( ph -> ( C = A <-> C = B ) ) $=
	e0 f1 f2 f3 peqeq2 f0 f1 f2 awceq f3 f1 awceq f3 f2 awceq awb psyl $.
$}
$( Equality relationship among 4 classes.  (Contributed by NM,
     3-Aug-1994.) $)
${
	$v A B C D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	peqeq12 $p |- ( ( A = B /\ C = D ) -> ( A = C <-> B = D ) ) $=
	f0 f1 f2 peqeq1 f2 f3 f1 peqeq2 f0 f1 awceq f0 f2 awceq f1 f2 awceq f2 f3 awceq f1 f3 awceq psylan9bb $.
$}
$( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- C = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	peqeq12i $p |- ( A = C <-> B = D ) $=
	e0 e1 f0 f1 f2 f3 peqeq12 f0 f1 awceq f2 f3 awceq f0 f2 awceq f1 f3 awceq awb pmp2an $.
$}
$( Theorem eqeq12i is the congruence law for equality. $)
$( $j congruence 'eqeq12i'; $)
$( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	peqeq12d $p |- ( ph -> ( A = C <-> B = D ) ) $=
	e0 e1 f1 f2 f3 f4 peqeq12 f0 f1 f2 awceq f3 f4 awceq f1 f3 awceq f2 f4 awceq awb psyl2anc $.
$}
$( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 9-Aug-1994.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
${
	$v ph ps A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ps -> C = D ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f class A $.
	f3 $f class B $.
	f4 $f class C $.
	f5 $f class D $.
	peqeqan12d $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
	e0 e1 f2 f3 f4 f5 peqeq12 f0 f2 f3 awceq f4 f5 awceq f2 f4 awceq f3 f5 awceq awb f1 psyl2an $.
$}
$( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 9-Aug-1994.) $)
${
	$v ph ps A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ps -> C = D ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f class A $.
	f3 $f class B $.
	f4 $f class C $.
	f5 $f class D $.
	peqeqan12rd $p |- ( ( ps /\ ph ) -> ( A = C <-> B = D ) ) $=
	e0 e1 f0 f1 f2 f3 f4 f5 peqeqan12d f0 f1 f2 f4 awceq f3 f5 awceq awb pancoms $.
$}
$( Transitive law for class equality.  Proposition 4.7(3) of [TakeutiZaring]
     p. 13.  (Contributed by NM, 25-Jan-2004.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtr $p |- ( ( A = B /\ B = C ) -> A = C ) $=
	f0 f1 f2 peqeq1 f0 f1 awceq f0 f2 awceq f1 f2 awceq pbiimpar $.
$}
$( A transitive law for class equality.  (Contributed by NM, 20-May-2005.)
     (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtr2 $p |- ( ( A = B /\ A = C ) -> B = C ) $=
	f0 f1 peqcom f1 f0 f2 peqtr f0 f1 awceq f1 f0 awceq f0 f2 awceq f1 f2 awceq psylanb $.
$}
$( A transitive law for class equality.  (Contributed by NM, 20-May-2005.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtr3 $p |- ( ( A = C /\ B = C ) -> A = B ) $=
	f1 f2 peqcom f0 f2 f1 peqtr f1 f2 awceq f0 f2 awceq f2 f1 awceq f0 f1 awceq psylan2b $.
$}
$( An equality transitivity inference.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	e1 $e |- B = C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtri $p |- A = C $=
	e0 e1 f1 f2 f0 peqeq2i f0 f1 awceq f0 f2 awceq pmpbi $.
$}
$( An equality transitivity inference.  (Contributed by NM,
       21-Feb-1995.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	e1 $e |- B = C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtr2i $p |- C = A $=
	e0 e1 f0 f1 f2 peqtri f0 f2 peqcomi $.
$}
$( An equality transitivity inference.  (Contributed by NM, 6-May-1994.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	e1 $e |- A = C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtr3i $p |- B = C $=
	e0 f0 f1 peqcomi e1 f1 f0 f2 peqtri $.
$}
$( An equality transitivity inference.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	e1 $e |- C = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqtr4i $p |- A = C $=
	e0 e1 f2 f1 peqcomi f0 f1 f2 peqtri $.
$}
$( Register '=' as an equality for its type (class). $)
$( $j equality 'wceq' from 'eqid' 'eqcomi' 'eqtri'; $)
$( An inference from three chained equalities.  (Contributed by NM,
       29-Aug-1993.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- B = C $.
	e2 $e |- C = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtri $p |- A = D $=
	e0 e1 e2 f1 f2 f3 peqtri f0 f1 f3 peqtri $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- B = C $.
	e2 $e |- C = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtrri $p |- D = A $=
	e0 e1 f0 f1 f2 peqtri e2 f0 f2 f3 peqtr2i $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- C = B $.
	e2 $e |- C = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtr2i $p |- A = D $=
	e0 e1 f0 f1 f2 peqtr4i e2 f0 f2 f3 peqtri $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- C = B $.
	e2 $e |- C = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtr2ri $p |- D = A $=
	e0 e1 f0 f1 f2 peqtr4i e2 f0 f2 f3 peqtr2i $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       6-May-1994.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- A = C $.
	e2 $e |- B = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtr3i $p |- C = D $=
	e0 e1 f0 f1 f2 peqtr3i e2 f1 f2 f3 peqtr3i $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       15-Aug-2004.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- A = C $.
	e2 $e |- B = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtr3ri $p |- D = C $=
	e2 e0 e1 f0 f1 f2 peqtr3i f1 f3 f2 peqtr3i $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- C = A $.
	e2 $e |- D = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtr4i $p |- C = D $=
	e1 e2 e0 f3 f1 f0 peqtr4i f2 f0 f3 peqtr4i $.
$}
$( An inference from three chained equalities.  (Contributed by NM,
       2-Sep-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- C = A $.
	e2 $e |- D = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eqtr4ri $p |- D = C $=
	e2 e0 f3 f1 f0 peqtr4i e1 f3 f0 f2 peqtr4i $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqtrd $p |- ( ph -> A = C ) $=
	e0 e1 f0 f2 f3 f1 peqeq2d f0 f1 f2 awceq f1 f3 awceq pmpbid $.
$}
$( An equality transitivity deduction.  (Contributed by NM,
       18-Oct-1999.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqtr2d $p |- ( ph -> C = A ) $=
	e0 e1 f0 f1 f2 f3 peqtrd f0 f1 f3 peqcomd $.
$}
$( An equality transitivity equality deduction.  (Contributed by NM,
       18-Jul-1995.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> A = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqtr3d $p |- ( ph -> B = C ) $=
	e0 f0 f1 f2 peqcomd e1 f0 f2 f1 f3 peqtrd $.
$}
$( An equality transitivity equality deduction.  (Contributed by NM,
       18-Jul-1995.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqtr4d $p |- ( ph -> A = C ) $=
	e0 e1 f0 f3 f2 peqcomd f0 f1 f2 f3 peqtrd $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       29-Oct-1995.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> B = C ) $.
	e2 $e |- ( ph -> C = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtrd $p |- ( ph -> A = D ) $=
	e0 e1 e2 f0 f2 f3 f4 peqtrd f0 f1 f2 f4 peqtrd $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> B = C ) $.
	e2 $e |- ( ph -> C = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtrrd $p |- ( ph -> D = A ) $=
	e0 e1 f0 f1 f2 f3 peqtrd e2 f0 f1 f3 f4 peqtr2d $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = B ) $.
	e2 $e |- ( ph -> C = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr2d $p |- ( ph -> A = D ) $=
	e0 e1 f0 f1 f2 f3 peqtr4d e2 f0 f1 f3 f4 peqtrd $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = B ) $.
	e2 $e |- ( ph -> C = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr2rd $p |- ( ph -> D = A ) $=
	e0 e1 f0 f1 f2 f3 peqtr4d e2 f0 f1 f3 f4 peqtr2d $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> A = C ) $.
	e2 $e |- ( ph -> B = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr3d $p |- ( ph -> C = D ) $=
	e0 e1 f0 f1 f2 f3 peqtr3d e2 f0 f2 f3 f4 peqtr3d $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       14-Jan-2006.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> A = C ) $.
	e2 $e |- ( ph -> B = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr3rd $p |- ( ph -> D = C ) $=
	e2 e0 e1 f0 f1 f2 f3 peqtr3d f0 f2 f4 f3 peqtr3d $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = A ) $.
	e2 $e |- ( ph -> D = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr4d $p |- ( ph -> C = D ) $=
	e1 e2 e0 f0 f4 f2 f1 peqtr4d f0 f3 f1 f4 peqtr4d $.
$}
$( A deduction from three chained equalities.  (Contributed by NM,
       21-Sep-1995.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = A ) $.
	e2 $e |- ( ph -> D = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr4rd $p |- ( ph -> D = C ) $=
	e2 e0 f0 f4 f2 f1 peqtr4d e1 f0 f4 f1 f3 peqtr4d $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B C $.
	e0 $e |- A = B $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5eq $p |- ( ph -> A = C ) $=
	e0 f1 f2 awceq f0 pa1i e1 f0 f1 f2 f3 peqtrd $.
$}
$( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
${
	$v ph A B C $.
	e0 $e |- A = B $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5req $p |- ( ph -> C = A ) $=
	e0 e1 f0 f1 f2 f3 psyl5eq f0 f1 f3 peqcomd $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B C $.
	e0 $e |- B = A $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5eqr $p |- ( ph -> A = C ) $=
	e0 f2 f1 peqcomi e1 f0 f1 f2 f3 psyl5eq $.
$}
$( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
${
	$v ph A B C $.
	e0 $e |- B = A $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5reqr $p |- ( ph -> C = A ) $=
	e0 f2 f1 peqcomi e1 f0 f1 f2 f3 psyl5req $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- B = C $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6eq $p |- ( ph -> A = C ) $=
	e0 e1 f2 f3 awceq f0 pa1i f0 f1 f2 f3 peqtrd $.
$}
$( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- B = C $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6req $p |- ( ph -> C = A ) $=
	e0 e1 f0 f1 f2 f3 psyl6eq f0 f1 f3 peqcomd $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- C = B $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6eqr $p |- ( ph -> A = C ) $=
	e0 e1 f3 f2 peqcomi f0 f1 f2 f3 psyl6eq $.
$}
$( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- C = B $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6reqr $p |- ( ph -> C = A ) $=
	e0 e1 f3 f2 peqcomi f0 f1 f2 f3 psyl6req $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 8-May-1994.)
       (Proof shortened by Andrew Salmon, 25-May-2011.) $)
${
	$v ph ps A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ps -> B = C ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f class A $.
	f3 $f class B $.
	f4 $f class C $.
	psylan9eq $p |- ( ( ph /\ ps ) -> A = C ) $=
	e0 e1 f2 f3 f4 peqtr f0 f2 f3 awceq f3 f4 awceq f2 f4 awceq f1 psyl2an $.
$}
$( An equality transitivity deduction.  (Contributed by NM,
       23-Jun-2007.) $)
${
	$v ph ps A B C $.
	e0 $e |- ( ph -> B = A ) $.
	e1 $e |- ( ps -> B = C ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f class A $.
	f3 $f class B $.
	f4 $f class C $.
	psylan9req $p |- ( ( ph /\ ps ) -> A = C ) $=
	e0 f0 f3 f2 peqcomd e1 f0 f1 f2 f3 f4 psylan9eq $.
$}
$( An equality transitivity deduction.  (Contributed by NM, 8-May-1994.) $)
${
	$v ph ps A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ps -> B = C ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f class A $.
	f3 $f class B $.
	f4 $f class C $.
	psylan9eqr $p |- ( ( ps /\ ph ) -> A = C ) $=
	e0 e1 f0 f1 f2 f3 f4 psylan9eq f0 f1 f2 f4 awceq pancoms $.
$}
$( A chained equality inference, useful for converting from definitions.
       (Contributed by NM, 15-Nov-1994.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- A = C $.
	e2 $e |- B = D $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr3g $p |- ( ph -> C = D ) $=
	e1 e0 f0 f3 f1 f2 psyl5eqr e2 f0 f3 f2 f4 psyl6eq $.
$}
$( A chained equality inference, useful for converting from definitions.
       (Contributed by Mario Carneiro, 6-Nov-2015.) $)
${
	$v ph A B C D $.
	e0 $e |- A = B $.
	e1 $e |- ( ph -> A = C ) $.
	e2 $e |- ( ph -> B = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr3a $p |- ( ph -> C = D ) $=
	e1 e0 e2 f0 f1 f2 f4 psyl5eq f0 f1 f3 f4 peqtr3d $.
$}
$( A chained equality inference, useful for converting to definitions.
       (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- C = A $.
	e2 $e |- D = B $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr4g $p |- ( ph -> C = D ) $=
	e1 e0 f0 f3 f1 f2 psyl5eq e2 f0 f3 f2 f4 psyl6eqr $.
$}
$( A chained equality inference, useful for converting to definitions.
       (Contributed by NM, 2-Feb-2007.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
${
	$v ph A B C D $.
	e0 $e |- A = B $.
	e1 $e |- ( ph -> C = A ) $.
	e2 $e |- ( ph -> D = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eqtr4a $p |- ( ph -> C = D ) $=
	e1 e0 f0 f3 f1 f2 psyl6eq e2 f0 f3 f2 f4 peqtr4d $.
$}
$( A compound transitive inference for class equality.  (Contributed by NM,
       22-Jan-2004.) $)
${
	$v A B C D F G $.
	e0 $e |- ( A = C -> D = F ) $.
	e1 $e |- ( B = D -> C = G ) $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	f4 $f class F $.
	f5 $f class G $.
	peq2tri $p |- ( ( A = C /\ B = F ) <-> ( B = D /\ A = G ) ) $=
	f0 f2 awceq f1 f3 awceq pancom e0 f0 f2 awceq f3 f4 f1 peqeq2d f0 f2 awceq f1 f3 awceq f1 f4 awceq ppm5.32i e1 f1 f3 awceq f2 f5 f0 peqeq2d f1 f3 awceq f0 f2 awceq f0 f5 awceq ppm5.32i f0 f2 awceq f1 f3 awceq awa f1 f3 awceq f0 f2 awceq awa f0 f2 awceq f1 f4 awceq awa f1 f3 awceq f0 f5 awceq awa p3bitr3i $.
$}
$( Equality implies equivalence of membership.  (Contributed by NM,
       5-Aug-1993.) $)
${
	$v x A B C $.
	$d x A $.
	$d x B $.
	$d x C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	i0 $f set x $.
	peleq1 $p |- ( A = B -> ( A e. C <-> B e. C ) ) $=
	f0 f1 i0 asup_set_class peqeq2 f0 f1 awceq i0 asup_set_class f0 awceq i0 asup_set_class f1 awceq i0 asup_set_class f2 awcel panbi1d f0 f1 awceq i0 asup_set_class f0 awceq i0 asup_set_class f2 awcel awa i0 asup_set_class f1 awceq i0 asup_set_class f2 awcel awa i0 pexbidv i0 f0 f2 adf-clel i0 f1 f2 adf-clel f0 f1 awceq i0 asup_set_class f0 awceq i0 asup_set_class f2 awcel awa i0 awex i0 asup_set_class f1 awceq i0 asup_set_class f2 awcel awa i0 awex f0 f2 awcel f1 f2 awcel p3bitr4g $.
$}
$( Equality implies equivalence of membership.  (Contributed by NM,
       5-Aug-1993.) $)
${
	$v x A B C $.
	$d x A $.
	$d x B $.
	$d x C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	i0 $f set x $.
	peleq2 $p |- ( A = B -> ( C e. A <-> C e. B ) ) $=
	i0 f0 f1 pdfcleq f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel awb i0 awal pbiimpi f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel awb i0 p19.21bi f0 f1 awceq i0 asup_set_class f0 awcel i0 asup_set_class f1 awcel i0 asup_set_class f2 awceq panbi2d f0 f1 awceq i0 asup_set_class f2 awceq i0 asup_set_class f0 awcel awa i0 asup_set_class f2 awceq i0 asup_set_class f1 awcel awa i0 pexbidv i0 f2 f0 adf-clel i0 f2 f1 adf-clel f0 f1 awceq i0 asup_set_class f2 awceq i0 asup_set_class f0 awcel awa i0 awex i0 asup_set_class f2 awceq i0 asup_set_class f1 awcel awa i0 awex f2 f0 awcel f2 f1 awcel p3bitr4g $.
$}
$( Equality implies equivalence of membership.  (Contributed by NM,
     31-May-1999.) $)
${
	$v A B C D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	peleq12 $p |- ( ( A = B /\ C = D ) -> ( A e. C <-> B e. D ) ) $=
	f0 f1 f2 peleq1 f2 f3 f1 peleq2 f0 f1 awceq f0 f2 awcel f1 f2 awcel f2 f3 awceq f1 f3 awcel psylan9bb $.
$}
$( Inference from equality to equivalence of membership.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peleq1i $p |- ( A e. C <-> B e. C ) $=
	e0 f0 f1 f2 peleq1 f0 f1 awceq f0 f2 awcel f1 f2 awcel awb aax-mp $.
$}
$( Inference from equality to equivalence of membership.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peleq2i $p |- ( C e. A <-> C e. B ) $=
	e0 f0 f1 f2 peleq2 f0 f1 awceq f2 f0 awcel f2 f1 awcel awb aax-mp $.
$}
$( Inference from equality to equivalence of membership.  (Contributed by
         NM, 31-May-1994.) $)
${
	$v A B C D $.
	e0 $e |- A = B $.
	e1 $e |- C = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	peleq12i $p |- ( A e. C <-> B e. D ) $=
	e1 f2 f3 f0 peleq2i e0 f0 f1 f3 peleq1i f0 f2 awcel f0 f3 awcel f1 f3 awcel pbitri $.
$}
$( Theorem eleq12i is the congruence law for elementhood. $)
$( $j congruence 'eleq12i'; $)
$( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peleq1d $p |- ( ph -> ( A e. C <-> B e. C ) ) $=
	e0 f1 f2 f3 peleq1 f0 f1 f2 awceq f1 f3 awcel f2 f3 awcel awb psyl $.
$}
$( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 27-Dec-1993.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peleq2d $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
	e0 f1 f2 f3 peleq2 f0 f1 f2 awceq f3 f1 awcel f3 f2 awcel awb psyl $.
$}
$( Deduction from equality to equivalence of membership.  (Contributed by
         NM, 31-May-1994.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> C = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	peleq12d $p |- ( ph -> ( A e. C <-> B e. D ) ) $=
	e1 f0 f3 f4 f1 peleq2d e0 f0 f1 f2 f4 peleq1d f0 f1 f3 awcel f1 f4 awcel f2 f4 awcel pbitrd $.
$}
$( A transitive-type law relating membership and equality.  (Contributed by
     NM, 9-Apr-1994.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peleq1a $p |- ( A e. B -> ( C = A -> C e. B ) ) $=
	f2 f0 f1 peleq1 f2 f0 awceq f2 f1 awcel f0 f1 awcel pbiimprcd $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	e1 $e |- B e. C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqeltri $p |- A e. C $=
	e1 e0 f0 f1 f2 peleq1i f0 f2 awcel f1 f2 awcel pmpbir $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A = B $.
	e1 $e |- A e. C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peqeltrri $p |- B e. C $=
	e0 f0 f1 peqcomi e1 f1 f0 f2 peqeltri $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A e. B $.
	e1 $e |- B = C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peleqtri $p |- A e. C $=
	e0 e1 f1 f2 f0 peleq2i f0 f1 awcel f0 f2 awcel pmpbi $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v A B C $.
	e0 $e |- A e. B $.
	e1 $e |- C = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	peleqtrri $p |- A e. C $=
	e0 e1 f2 f1 peqcomi f0 f1 f2 peleqtri $.
$}
$( Substitution of equal classes into membership relation, deduction form.
       (Contributed by Raph Levien, 10-Dec-2002.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> B e. C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqeltrd $p |- ( ph -> A e. C ) $=
	e1 e0 f0 f1 f2 f3 peleq1d f0 f1 f3 awcel f2 f3 awcel pmpbird $.
$}
$( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> A e. C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqeltrrd $p |- ( ph -> B e. C ) $=
	e0 f0 f1 f2 peqcomd e1 f0 f2 f1 f3 peqeltrd $.
$}
$( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peleqtrd $p |- ( ph -> A e. C ) $=
	e0 e1 f0 f2 f3 f1 peleq2d f0 f1 f2 awcel f1 f3 awcel pmpbid $.
$}
$( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- ( ph -> C = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peleqtrrd $p |- ( ph -> A e. C ) $=
	e0 e1 f0 f3 f2 peqcomd f0 f1 f2 f3 peleqtrd $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
${
	$v A B C D $.
	e0 $e |- A e. B $.
	e1 $e |- A = C $.
	e2 $e |- B = D $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eltr3i $p |- C e. D $=
	e1 e0 e2 f0 f1 f3 peleqtri f0 f2 f3 peqeltrri $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
${
	$v A B C D $.
	e0 $e |- A e. B $.
	e1 $e |- C = A $.
	e2 $e |- D = B $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	f3 $f class D $.
	p3eltr4i $p |- C e. D $=
	e1 e0 e2 f0 f1 f3 peleqtrri f2 f0 f3 peqeltri $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- ( ph -> A = C ) $.
	e2 $e |- ( ph -> B = D ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eltr3d $p |- ( ph -> C e. D ) $=
	e1 e0 e2 f0 f1 f2 f4 peleqtrd f0 f1 f3 f4 peqeltrrd $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- ( ph -> C = A ) $.
	e2 $e |- ( ph -> D = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eltr4d $p |- ( ph -> C e. D ) $=
	e1 e0 e2 f0 f1 f2 f4 peleqtrrd f0 f3 f1 f4 peqeltrd $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- A = C $.
	e2 $e |- B = D $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eltr3g $p |- ( ph -> C e. D ) $=
	e0 e1 e2 f1 f3 f2 f4 peleq12i f0 f1 f2 awcel f3 f4 awcel psylib $.
$}
$( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
${
	$v ph A B C D $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- C = A $.
	e2 $e |- D = B $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	f4 $f class D $.
	p3eltr4g $p |- ( ph -> C e. D ) $=
	e0 e1 e2 f3 f1 f4 f2 peleq12i f0 f1 f2 awcel f3 f4 awcel psylibr $.
$}
$( B membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- A = B $.
	e1 $e |- ( ph -> B e. C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5eqel $p |- ( ph -> A e. C ) $=
	e0 f1 f2 awceq f0 pa1i e1 f0 f1 f2 f3 peqeltrd $.
$}
$( B membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- B = A $.
	e1 $e |- ( ph -> B e. C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5eqelr $p |- ( ph -> A e. C ) $=
	e0 f2 f1 peqcomi e1 f0 f1 f2 f3 psyl5eqel $.
$}
$( B membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- A e. B $.
	e1 $e |- ( ph -> B = C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5eleq $p |- ( ph -> A e. C ) $=
	e0 f1 f2 awcel f0 pa1i e1 f0 f1 f2 f3 peleqtrd $.
$}
$( B membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- A e. B $.
	e1 $e |- ( ph -> C = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl5eleqr $p |- ( ph -> A e. C ) $=
	e0 e1 f0 f3 f2 peqcomd f0 f1 f2 f3 psyl5eleq $.
$}
$( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- B e. C $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6eqel $p |- ( ph -> A e. C ) $=
	e0 e1 f2 f3 awcel f0 pa1i f0 f1 f2 f3 peqeltrd $.
$}
$( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> B = A ) $.
	e1 $e |- B e. C $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6eqelr $p |- ( ph -> A e. C ) $=
	e0 f0 f2 f1 peqcomd e1 f0 f1 f2 f3 psyl6eqel $.
$}
$( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- B = C $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6eleq $p |- ( ph -> A e. C ) $=
	e0 e1 f2 f3 awceq f0 pa1i f0 f1 f2 f3 peleqtrd $.
$}
$( A membership and equality inference.  (Contributed by NM,
       24-Apr-2005.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A e. B ) $.
	e1 $e |- C = B $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	psyl6eleqr $p |- ( ph -> A e. C ) $=
	e0 e1 f3 f2 peqcomi f0 f1 f2 f3 psyl6eleq $.
$}
$( Substitution of equal classes into a membership antecedent.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
${
	$v ph A B C $.
	e0 $e |- ( A e. B -> ph ) $.
	e1 $e |- C = B $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peleq2s $p |- ( A e. C -> ph ) $=
	e1 f3 f2 f1 peleq2i e0 f1 f3 awcel f1 f2 awcel f0 psylbi $.
$}
$( If a class is not an element of another class, an equal class is also
       not an element.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> -. B e. C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqneltrd $p |- ( ph -> -. A e. C ) $=
	e1 e0 f0 f1 f2 f3 peleq1d f0 f1 f3 awcel f2 f3 awcel pmtbird $.
$}
$( If a class is not an element of another class, an equal class is also
       not an element.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> A = B ) $.
	e1 $e |- ( ph -> -. A e. C ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	peqneltrrd $p |- ( ph -> -. B e. C ) $=
	e1 e0 f0 f1 f2 f3 peleq1d f0 f1 f3 awcel f2 f3 awcel pmtbid $.
$}
$( If a class is not an element of another class, it is also not an element
       of an equal class.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> -. C e. A ) $.
	e1 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	pneleqtrd $p |- ( ph -> -. C e. B ) $=
	e0 e1 f0 f1 f2 f3 peleq2d f0 f3 f1 awcel f3 f2 awcel pmtbid $.
$}
$( If a class is not an element of another class, it is also not an element
       of an equal class.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
${
	$v ph A B C $.
	e0 $e |- ( ph -> -. C e. B ) $.
	e1 $e |- ( ph -> A = B ) $.
	f0 $f wff ph $.
	f1 $f class A $.
	f2 $f class B $.
	f3 $f class C $.
	pneleqtrrd $p |- ( ph -> -. C e. A ) $=
	e0 e1 f0 f1 f2 f3 peleq2d f0 f3 f1 awcel f3 f2 awcel pmtbird $.
$}
$( Establish equality between classes, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       5-Aug-1993.) $)
${
	$v x y A B $.
	$d y A $.
	$d y B $.
	$d x y $.
	e0 $e |- ( y e. A -> A. x y e. A ) $.
	e1 $e |- ( y e. B -> A. x y e. B ) $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f class A $.
	f3 $f class B $.
	pcleqh $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
	f1 f2 f3 pdfcleq f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 aax-17 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel pdfbi2 e0 e1 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel f0 phbim e1 e0 f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel f0 phbim f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awi f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel awi f0 phban f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awi f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel awi awa f0 phbxfrbi f0 asup_set_class f1 asup_set_class f2 peleq1 f0 asup_set_class f1 asup_set_class f3 peleq1 f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f2 awcel f1 asup_set_class f2 awcel f0 asup_set_class f3 awcel f1 asup_set_class f3 awcel pbibi12d f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb pbiimpd f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f0 f1 pcbv3h f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel pdfbi2 e0 e1 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel f0 phbim e1 e0 f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel f0 phbim f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awi f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel awi f0 phban f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awi f1 asup_set_class f3 awcel f1 asup_set_class f2 awcel awi awa f0 phbxfrbi f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 aax-17 f0 asup_set_class f1 asup_set_class f2 peleq1 f0 asup_set_class f1 asup_set_class f3 peleq1 f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f2 awcel f1 asup_set_class f2 awcel f0 asup_set_class f3 awcel f1 asup_set_class f3 awcel pbibi12d f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb awb f0 f1 pequcoms f1 asup_set_class f0 asup_set_class awceq f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb pbiimprd f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f1 f0 pcbv3h f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f0 awal f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f1 awal pimpbii f2 f3 awceq f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel awb f1 awal f0 asup_set_class f2 awcel f0 asup_set_class f3 awcel awb f0 awal pbitr4i $.
$}
$( A way of showing two classes are not equal.  (Contributed by NM,
     1-Apr-1997.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	pnelneq $p |- ( ( A e. C /\ -. B e. C ) -> -. A = B ) $=
	f0 f1 f2 peleq1 f0 f1 awceq f0 f2 awcel f1 f2 awcel pbiimpcd f0 f2 awcel f0 f1 awceq f1 f2 awcel pcon3and $.
$}
$( A way of showing two classes are not equal.  (Contributed by NM,
     12-Jan-2002.) $)
${
	$v A B C $.
	f0 $f class A $.
	f1 $f class B $.
	f2 $f class C $.
	pnelneq2 $p |- ( ( A e. B /\ -. A e. C ) -> -. B = C ) $=
	f1 f2 f0 peleq2 f1 f2 awceq f0 f1 awcel f0 f2 awcel pbiimpcd f0 f1 awcel f1 f2 awceq f0 f2 awcel pcon3and $.
$}
$( Lemma for ~ eqsb3 .  (Contributed by Rodolfo Medina, 28-Apr-2010.)
       (Proof shortened by Andrew Salmon, 14-Jun-2011.) $)
${
	$v x y A $.
	$d x y $.
	$d y A $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f class A $.
	peqsb3lem $p |- ( [ x / y ] y = A <-> x = A ) $=
	f0 asup_set_class f2 awceq f1 pnfv f1 asup_set_class f0 asup_set_class f2 peqeq1 f1 asup_set_class f2 awceq f0 asup_set_class f2 awceq f1 f0 psbie $.
$}
$( Substitution applied to an atomic wff (class version of ~ equsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.) $)
${
	$v x y w A $.
	$d y A $.
	$d w y $.
	$d w A $.
	$d x w $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f class A $.
	i0 $f set w $.
	peqsb3 $p |- ( [ x / y ] y = A <-> x = A ) $=
	i0 f1 f2 peqsb3lem f1 asup_set_class f2 awceq f1 i0 awsb i0 asup_set_class f2 awceq i0 f0 psbbii f1 asup_set_class f2 awceq i0 pnfv f1 asup_set_class f2 awceq f1 f0 i0 psbco2 f0 i0 f2 peqsb3lem f1 asup_set_class f2 awceq f1 i0 awsb i0 f0 awsb i0 asup_set_class f2 awceq i0 f0 awsb f1 asup_set_class f2 awceq f1 f0 awsb f0 asup_set_class f2 awceq p3bitr3i $.
$}
$( Substitution applied to an atomic wff (class version of ~ elsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.)  (Proof shortened by
       Andrew Salmon, 14-Jun-2011.) $)
${
	$v x y w A $.
	$d y A $.
	$d w y $.
	$d w A $.
	$d w x $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f class A $.
	i0 $f set w $.
	pclelsb3 $p |- ( [ x / y ] y e. A <-> x e. A ) $=
	i0 asup_set_class f2 awcel f1 pnfv i0 asup_set_class f2 awcel i0 f0 f1 psbco2 f1 asup_set_class f2 awcel i0 pnfv i0 asup_set_class f1 asup_set_class f2 peleq1 i0 asup_set_class f2 awcel f1 asup_set_class f2 awcel i0 f1 psbie i0 asup_set_class f2 awcel i0 f1 awsb f1 asup_set_class f2 awcel f1 f0 psbbii f0 asup_set_class f2 awcel i0 pnfv i0 asup_set_class f0 asup_set_class f2 peleq1 i0 asup_set_class f2 awcel f0 asup_set_class f2 awcel i0 f0 psbie i0 asup_set_class f2 awcel i0 f1 awsb f1 f0 awsb i0 asup_set_class f2 awcel i0 f0 awsb f1 asup_set_class f2 awcel f1 f0 awsb f0 asup_set_class f2 awcel p3bitr3i $.
$}
$( A utility lemma to transfer a bound-variable hypothesis builder into a
       definition.  See ~ hbxfrbi for equivalence version.  (Contributed by NM,
       21-Aug-2007.) $)
${
	$v x y A B $.
	e0 $e |- A = B $.
	e1 $e |- ( y e. B -> A. x y e. B ) $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f class A $.
	f3 $f class B $.
	phbxfreq $p |- ( y e. A -> A. x y e. A ) $=
	e0 f2 f3 f1 asup_set_class peleq2i e1 f1 asup_set_class f2 awcel f1 asup_set_class f3 awcel f0 phbxfrbi $.
$}
$( Change the free variable of a hypothesis builder.  Lemma for ~ nfcrii .
       (Contributed by NM, 5-Aug-1993.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
${
	$v x y z A $.
	$d y A $.
	$d x z $.
	e0 $e |- ( y e. A -> A. x y e. A ) $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	f3 $f class A $.
	phblem $p |- ( z e. A -> A. x z e. A ) $=
	e0 f1 asup_set_class f3 awcel f1 f2 f0 phbsb f2 f1 f3 pclelsb3 f2 f1 f3 pclelsb3 f1 asup_set_class f3 awcel f1 f2 awsb f2 asup_set_class f3 awcel f0 palbii f1 asup_set_class f3 awcel f1 f2 awsb f1 asup_set_class f3 awcel f1 f2 awsb f0 awal f2 asup_set_class f3 awcel f2 asup_set_class f3 awcel f0 awal p3imtr3i $.
$}
$( Equality of a class variable and a class abstraction (also called a
       class builder).  Theorem 5.1 of [Quine] p. 34.  This theorem shows the
       relationship between expressions with class abstractions and expressions
       with class variables.  Note that ~ abbi and its relatives are among
       those useful for converting theorems with class variables to equivalent
       theorems with wff variables, by first substituting a class abstraction
       for each class variable.

       Class variables can always be eliminated from a theorem to result in an
       equivalent theorem with wff variables, and vice-versa.  The idea is
       roughly as follows.  To convert a theorem with a wff variable ` ph `
       (that has a free variable ` x ` ) to a theorem with a class variable
       ` A ` , we substitute ` x e. A ` for ` ph ` throughout and simplify,
       where ` A ` is a new class variable not already in the wff.  An example
       is the conversion of ~ zfauscl to ~ inex1 (look at the instance of
       ~ zfauscl that occurs in the proof of ~ inex1 ).  Conversely, to convert
       a theorem with a class variable ` A ` to one with ` ph ` , we substitute
       ` { x | ph } ` for ` A ` throughout and simplify, where ` x ` and ` ph `
       are new set and wff variables not already in the wff.  An example is
       ~ cp , which derives a formula containing wff variables from
       substitution instances of the class variables in its equivalent
       formulation ~ cplem2 .  For more information on class variables, see
       Quine pp. 15-21 and/or Takeuti and Zaring pp. 10-13.  (Contributed by
       NM, 5-Aug-1993.) $)
${
	$v ph x y A $.
	$d x A y $.
	$d ph y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	i0 $f set y $.
	pabeq2 $p |- ( A = { x | ph } <-> A. x ( x e. A <-> ph ) ) $=
	i0 asup_set_class f2 awcel f1 aax-17 f0 f1 i0 phbab1 f1 i0 f2 f0 f1 acab pcleqh f0 f1 pabid f1 asup_set_class f0 f1 acab awcel f0 f1 asup_set_class f2 awcel pbibi2i f1 asup_set_class f2 awcel f1 asup_set_class f0 f1 acab awcel awb f1 asup_set_class f2 awcel f0 awb f1 palbii f2 f0 f1 acab awceq f1 asup_set_class f2 awcel f1 asup_set_class f0 f1 acab awcel awb f1 awal f1 asup_set_class f2 awcel f0 awb f1 awal pbitri $.
$}
$( Equality of a class variable and a class abstraction.  (Contributed by
       NM, 20-Aug-1993.) $)
${
	$v ph x A $.
	$d x A $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	pabeq1 $p |- ( { x | ph } = A <-> A. x ( ph <-> x e. A ) ) $=
	f0 f1 f2 pabeq2 f0 f1 acab f2 peqcom f0 f1 asup_set_class f2 awcel pbicom f0 f1 asup_set_class f2 awcel awb f1 asup_set_class f2 awcel f0 awb f1 palbii f2 f0 f1 acab awceq f1 asup_set_class f2 awcel f0 awb f1 awal f0 f1 acab f2 awceq f0 f1 asup_set_class f2 awcel awb f1 awal p3bitr4i $.
$}
$( Equality of a class variable and a class abstraction (inference rule).
       (Contributed by NM, 3-Apr-1996.) $)
${
	$v ph x A $.
	e0 $e |- A = { x | ph } $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	pabeq2i $p |- ( x e. A <-> ph ) $=
	e0 f2 f0 f1 acab f1 asup_set_class peleq2i f0 f1 pabid f1 asup_set_class f2 awcel f1 asup_set_class f0 f1 acab awcel f0 pbitri $.
$}
$( Equality of a class variable and a class abstraction (inference rule).
       (Contributed by NM, 31-Jul-1994.) $)
${
	$v ph x A $.
	e0 $e |- { x | ph } = A $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	pabeq1i $p |- ( ph <-> x e. A ) $=
	f0 f1 pabid e0 f0 f1 acab f2 f1 asup_set_class peleq2i f0 f1 asup_set_class f0 f1 acab awcel f1 asup_set_class f2 awcel pbitr3i $.
$}
$( Equality of a class variable and a class abstraction (deduction).
       (Contributed by NM, 16-Nov-1995.) $)
${
	$v ph ps x A $.
	e0 $e |- ( ph -> A = { x | ps } ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f class A $.
	pabeq2d $p |- ( ph -> ( x e. A <-> ps ) ) $=
	e0 f0 f3 f1 f2 acab f2 asup_set_class peleq2d f1 f2 pabid f0 f2 asup_set_class f3 awcel f2 asup_set_class f1 f2 acab awcel f1 psyl6bb $.
$}
$( Equivalent wff's correspond to equal class abstractions.  (Contributed
       by NM, 25-Nov-2013.)  (Revised by Mario Carneiro, 11-Aug-2016.) $)
${
	$v ph ps x y $.
	$d ph y $.
	$d ps y $.
	$d x y $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	i0 $f set y $.
	pabbi $p |- ( A. x ( ph <-> ps ) <-> { x | ph } = { x | ps } ) $=
	i0 f0 f2 acab f1 f2 acab pdfcleq f0 f2 i0 pnfsab1 f1 f2 i0 pnfsab1 i0 asup_set_class f0 f2 acab awcel i0 asup_set_class f1 f2 acab awcel f2 pnfbi f0 f1 awb i0 pnfv f0 i0 f2 adf-clab f0 i0 f2 psbequ12r i0 asup_set_class f0 f2 acab awcel f0 f2 i0 awsb i0 asup_set_class f2 asup_set_class awceq f0 psyl5bb f1 i0 f2 adf-clab f1 i0 f2 psbequ12r i0 asup_set_class f1 f2 acab awcel f1 f2 i0 awsb i0 asup_set_class f2 asup_set_class awceq f1 psyl5bb i0 asup_set_class f2 asup_set_class awceq i0 asup_set_class f0 f2 acab awcel f0 i0 asup_set_class f1 f2 acab awcel f1 pbibi12d i0 asup_set_class f0 f2 acab awcel i0 asup_set_class f1 f2 acab awcel awb f0 f1 awb i0 f2 pcbval f0 f2 acab f1 f2 acab awceq i0 asup_set_class f0 f2 acab awcel i0 asup_set_class f1 f2 acab awcel awb i0 awal f0 f1 awb f2 awal pbitr2i $.
$}
$( Equality of a class variable and a class abstraction (inference rule).
       (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph x A $.
	$d x A $.
	e0 $e |- ( x e. A <-> ph ) $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	pabbi2i $p |- A = { x | ph } $=
	f0 f1 f2 pabeq2 e0 f2 f0 f1 acab awceq f1 asup_set_class f2 awcel f0 awb f1 pmpgbir $.
$}
$( Equivalent wff's yield equal class abstractions (inference rule).
       (Contributed by NM, 5-Aug-1993.) $)
${
	$v ph ps x $.
	e0 $e |- ( ph <-> ps ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	pabbii $p |- { x | ph } = { x | ps } $=
	f0 f1 f2 pabbi e0 f0 f1 awb f0 f2 acab f1 f2 acab awceq f2 pmpgbi $.
$}
$( Theorem abbii is the congruence law for class abstraction. $)
$( $j congruence 'abbii'; $)
$( ` y ` is a dummy var. $)
$( Equivalent wff's yield equal class abstractions (deduction rule).
       (Contributed by NM, 5-Aug-1993.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
${
	$v ph ps ch x $.
	e0 $e |- F/ x ph $.
	e1 $e |- ( ph -> ( ps <-> ch ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f wff ch $.
	f3 $f set x $.
	pabbid $p |- ( ph -> { x | ps } = { x | ch } ) $=
	e0 e1 f0 f1 f2 awb f3 palrimi f1 f2 f3 pabbi f0 f1 f2 awb f3 awal f1 f3 acab f2 f3 acab awceq psylib $.
$}
$( Equivalent wff's yield equal class abstractions (deduction rule).
       (Contributed by NM, 10-Aug-1993.) $)
${
	$v ph ps ch x $.
	$d x ph $.
	e0 $e |- ( ph -> ( ps <-> ch ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f wff ch $.
	f3 $f set x $.
	pabbidv $p |- ( ph -> { x | ps } = { x | ch } ) $=
	f0 f3 pnfv e0 f0 f1 f2 f3 pabbid $.
$}
$( ` y ` is a dummy var. $)
$( Deduction from a wff to a class abstraction.  (Contributed by NM,
       9-Jul-1994.) $)
${
	$v ph ps x A $.
	$d x A $.
	$d ph x $.
	e0 $e |- ( ph -> ( x e. A <-> ps ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f class A $.
	pabbi2dv $p |- ( ph -> A = { x | ps } ) $=
	e0 f0 f2 asup_set_class f3 awcel f1 awb f2 palrimiv f1 f2 f3 pabeq2 f0 f2 asup_set_class f3 awcel f1 awb f2 awal f3 f1 f2 acab awceq psylibr $.
$}
$( ` y ` is a dummy var. $)
$( Deduction from a wff to a class abstraction.  (Contributed by NM,
       9-Jul-1994.) $)
${
	$v ph ps x A $.
	$d x A $.
	$d ph x $.
	e0 $e |- ( ph -> ( ps <-> x e. A ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f class A $.
	pabbi1dv $p |- ( ph -> { x | ps } = A ) $=
	e0 f0 f1 f2 asup_set_class f3 awcel awb f2 palrimiv f1 f2 f3 pabeq1 f0 f1 f2 asup_set_class f3 awcel awb f2 awal f1 f2 acab f3 awceq psylibr $.
$}
$( A simplification of class abstraction.  Theorem 5.2 of [Quine] p. 35.
       (Contributed by NM, 26-Dec-1993.) $)
${
	$v x A $.
	$d x A $.
	f0 $f set x $.
	f1 $f class A $.
	pabid2 $p |- { x | x e. A } = A $=
	f0 asup_set_class f1 awcel pbiid f0 asup_set_class f1 awcel f0 f1 pabbi2i f1 f0 asup_set_class f1 awcel f0 acab peqcomi $.
$}
$( Rule used to change bound variables, using implicit substitution.
       (Contributed by Andrew Salmon, 11-Jul-2011.) $)
${
	$v ph ps x y z $.
	$d x z $.
	$d y z $.
	$d ph z $.
	$d ps z $.
	e0 $e |- F/ y ph $.
	e1 $e |- F/ x ps $.
	e2 $e |- ( x = y -> ( ph <-> ps ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f set y $.
	i0 $f set z $.
	pcbvab $p |- { x | ph } = { y | ps } $=
	e1 f1 f3 i0 f2 pnfsb e0 e2 f0 f1 awb f2 f3 pequcoms f3 asup_set_class f2 asup_set_class awceq f0 f1 pbicomd f1 f0 f3 f2 psbie f1 f2 i0 f3 psbequ f0 f1 f3 f2 awsb f2 asup_set_class i0 asup_set_class awceq f1 f3 i0 awsb psyl5bbr f0 f1 f3 i0 awsb f2 i0 psbie f0 i0 f2 adf-clab f1 i0 f3 adf-clab f0 f2 i0 awsb f1 f3 i0 awsb i0 asup_set_class f0 f2 acab awcel i0 asup_set_class f1 f3 acab awcel p3bitr4i i0 f0 f2 acab f1 f3 acab peqriv $.
$}
$( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 26-May-1999.) $)
${
	$v ph ps x y $.
	$d y ph $.
	$d x ps $.
	e0 $e |- ( x = y -> ( ph <-> ps ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f set y $.
	pcbvabv $p |- { x | ph } = { y | ps } $=
	f0 f3 pnfv f1 f2 pnfv e0 f0 f1 f2 f3 pcbvab $.
$}
$( Membership of a class variable in a class abstraction.  (Contributed by
       NM, 23-Dec-1993.) $)
${
	$v ph x y A $.
	$d x A y $.
	$d ph y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	i0 $f set y $.
	pclelab $p |- ( A e. { x | ph } <-> E. x ( x = A /\ ph ) ) $=
	f0 i0 f1 adf-clab i0 asup_set_class f0 f1 acab awcel f0 f1 i0 awsb i0 asup_set_class f2 awceq panbi2i i0 asup_set_class f2 awceq i0 asup_set_class f0 f1 acab awcel awa i0 asup_set_class f2 awceq f0 f1 i0 awsb awa i0 pexbii i0 f2 f0 f1 acab adf-clel f1 asup_set_class f2 awceq f0 awa i0 pnfv i0 asup_set_class f2 awceq f1 pnfv f0 f1 i0 pnfs1v i0 asup_set_class f2 awceq f0 f1 i0 awsb f1 pnfan f1 asup_set_class i0 asup_set_class f2 peqeq1 f0 f1 i0 psbequ12 f1 asup_set_class i0 asup_set_class awceq f1 asup_set_class f2 awceq i0 asup_set_class f2 awceq f0 f0 f1 i0 awsb panbi12d f1 asup_set_class f2 awceq f0 awa i0 asup_set_class f2 awceq f0 f1 i0 awsb awa f1 i0 pcbvex i0 asup_set_class f2 awceq i0 asup_set_class f0 f1 acab awcel awa i0 awex i0 asup_set_class f2 awceq f0 f1 i0 awsb awa i0 awex f2 f0 f1 acab awcel f1 asup_set_class f2 awceq f0 awa f1 awex p3bitr4i $.
$}
$( Membership of a class abstraction in another class.  (Contributed by NM,
       17-Jan-2006.) $)
${
	$v ph x y A $.
	$d y A $.
	$d y ph $.
	$d x y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	f3 $f class A $.
	pclabel $p |- ( { x | ph } e. A <-> E. y ( y e. A /\ A. x ( x e. y <-> ph ) ) ) $=
	f2 f0 f1 acab f3 adf-clel f0 f1 f2 asup_set_class pabeq2 f2 asup_set_class f0 f1 acab awceq f1 asup_set_class f2 asup_set_class awcel f0 awb f1 awal f2 asup_set_class f3 awcel panbi2ci f2 asup_set_class f0 f1 acab awceq f2 asup_set_class f3 awcel awa f2 asup_set_class f3 awcel f1 asup_set_class f2 asup_set_class awcel f0 awb f1 awal awa f2 pexbii f0 f1 acab f3 awcel f2 asup_set_class f0 f1 acab awceq f2 asup_set_class f3 awcel awa f2 awex f2 asup_set_class f3 awcel f1 asup_set_class f2 asup_set_class awcel f0 awb f1 awal awa f2 awex pbitri $.
$}
$( The right-hand side of the second equality is a way of representing
       proper substitution of ` y ` for ` x ` into a class variable.
       (Contributed by NM, 14-Sep-2003.) $)
${
	$v x y z A $.
	$d z A $.
	$d z x $.
	$d z y $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	f3 $f class A $.
	psbab $p |- ( x = y -> A = { z | [ y / x ] z e. A } ) $=
	f2 asup_set_class f3 awcel f0 f1 psbequ12 f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f3 awcel f0 f1 awsb f2 f3 pabbi2dv $.
$}

