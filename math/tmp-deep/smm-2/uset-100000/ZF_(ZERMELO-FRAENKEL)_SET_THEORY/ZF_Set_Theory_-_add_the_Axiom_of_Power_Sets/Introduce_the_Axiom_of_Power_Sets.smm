$[ uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Replacement.smm $]
$( =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            Introduce the Axiom of Power Sets

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)
$( Axiom of Power Sets.  An axiom of Zermelo-Fraenkel set theory.  It
       states that a set ` y ` exists that includes the power set of a given
       set ` x ` i.e. contains every subset of ` x ` .  The variant ~ axpow2
       uses explicit subset notation.  A version using class notation is
       ~ pwex .  (Contributed by NM, 5-Aug-1993.) $)
${
	$v x y z w $.
	$d x y z w $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	f3 $f set w $.
	aax-pow $a |- E. y A. z ( A. w ( w e. z -> w e. x ) -> z e. y ) $.
$}
$( Axiom of Power Sets expressed with the fewest number of different
       variables.  (Contributed by NM, 14-Aug-2003.) $)
${
	$v x y z w $.
	$d x y z w $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	i0 $f set w $.
	pzfpow $p |- E. x A. y ( A. x ( x e. y -> x e. z ) -> y e. x ) $=
	f2 f0 f1 i0 aax-pow i0 f0 f1 pelequ1 i0 f0 f2 pelequ1 i0 asup_set_class f0 asup_set_class awceq i0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f1 asup_set_class awcel i0 asup_set_class f2 asup_set_class awcel f0 asup_set_class f2 asup_set_class awcel pimbi12d i0 asup_set_class f1 asup_set_class awcel i0 asup_set_class f2 asup_set_class awcel awi f0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f2 asup_set_class awcel awi i0 f0 pcbvalv i0 asup_set_class f1 asup_set_class awcel i0 asup_set_class f2 asup_set_class awcel awi i0 awal f0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f2 asup_set_class awcel awi f0 awal f1 asup_set_class f0 asup_set_class awcel pimbi1i i0 asup_set_class f1 asup_set_class awcel i0 asup_set_class f2 asup_set_class awcel awi i0 awal f1 asup_set_class f0 asup_set_class awcel awi f0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f2 asup_set_class awcel awi f0 awal f1 asup_set_class f0 asup_set_class awcel awi f1 palbii i0 asup_set_class f1 asup_set_class awcel i0 asup_set_class f2 asup_set_class awcel awi i0 awal f1 asup_set_class f0 asup_set_class awcel awi f1 awal f0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f2 asup_set_class awcel awi f0 awal f1 asup_set_class f0 asup_set_class awcel awi f1 awal f0 pexbii i0 asup_set_class f1 asup_set_class awcel i0 asup_set_class f2 asup_set_class awcel awi i0 awal f1 asup_set_class f0 asup_set_class awcel awi f1 awal f0 awex f0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f2 asup_set_class awcel awi f0 awal f1 asup_set_class f0 asup_set_class awcel awi f1 awal f0 awex pmpbi $.
$}
$( A variant of the Axiom of Power Sets ~ ax-pow using subset notation.
       Problem in {BellMachover] p. 466.  (Contributed by NM, 4-Jun-2006.) $)
${
	$v x y z w $.
	$d x y z w $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	i0 $f set w $.
	paxpow2 $p |- E. y A. z ( z C_ x -> z e. y ) $=
	f0 f1 f2 i0 aax-pow i0 f2 asup_set_class f0 asup_set_class pdfss2 f2 asup_set_class f0 asup_set_class awss i0 asup_set_class f2 asup_set_class awcel i0 asup_set_class f0 asup_set_class awcel awi i0 awal f2 asup_set_class f1 asup_set_class awcel pimbi1i f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel awi i0 asup_set_class f2 asup_set_class awcel i0 asup_set_class f0 asup_set_class awcel awi i0 awal f2 asup_set_class f1 asup_set_class awcel awi f2 palbii f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel awi f2 awal i0 asup_set_class f2 asup_set_class awcel i0 asup_set_class f0 asup_set_class awcel awi i0 awal f2 asup_set_class f1 asup_set_class awcel awi f2 awal f1 pexbii f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel awi f2 awal f1 awex i0 asup_set_class f2 asup_set_class awcel i0 asup_set_class f0 asup_set_class awcel awi i0 awal f2 asup_set_class f1 asup_set_class awcel awi f2 awal f1 awex pmpbir $.
$}
$( A variant of the Axiom of Power Sets ~ ax-pow .  For any set ` x ` ,
       there exists a set ` y ` whose members are exactly the subsets of ` x `
       i.e. the power set of ` x ` .  Axiom Pow of [BellMachover] p. 466.
       (Contributed by NM, 4-Jun-2006.) $)
${
	$v x y z $.
	$d x y z $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	paxpow3 $p |- E. y A. z ( z C_ x <-> z e. y ) $=
	f0 f1 f2 paxpow2 f2 asup_set_class f0 asup_set_class awss f1 f2 pbm1.3ii f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel pbicom f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel awb f2 asup_set_class f1 asup_set_class awcel f2 asup_set_class f0 asup_set_class awss awb f2 palbii f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel awb f2 awal f2 asup_set_class f1 asup_set_class awcel f2 asup_set_class f0 asup_set_class awss awb f2 awal f1 pexbii f2 asup_set_class f0 asup_set_class awss f2 asup_set_class f1 asup_set_class awcel awb f2 awal f1 awex f2 asup_set_class f1 asup_set_class awcel f2 asup_set_class f0 asup_set_class awss awb f2 awal f1 awex pmpbir $.
$}
$( Every set is an element of some other set.  See ~ elALT for a shorter
       proof using more axioms.  (Contributed by NM, 4-Jan-2002.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.) $)
${
	$v x y z $.
	$d x y z $.
	f0 $f set x $.
	f1 $f set y $.
	i0 $f set z $.
	pel $p |- E. y x e. y $=
	f1 i0 f0 pzfpow i0 f0 f1 aax-14 i0 asup_set_class f0 asup_set_class awceq f1 asup_set_class i0 asup_set_class awcel f1 asup_set_class f0 asup_set_class awcel awi f1 palrimiv i0 f0 f1 aax-13 i0 asup_set_class f0 asup_set_class awceq f1 asup_set_class i0 asup_set_class awcel f1 asup_set_class f0 asup_set_class awcel awi f1 awal i0 asup_set_class f1 asup_set_class awcel f0 asup_set_class f1 asup_set_class awcel pembantd f1 asup_set_class i0 asup_set_class awcel f1 asup_set_class f0 asup_set_class awcel awi f1 awal i0 asup_set_class f1 asup_set_class awcel awi f0 asup_set_class f1 asup_set_class awcel i0 f0 pspimv f1 asup_set_class i0 asup_set_class awcel f1 asup_set_class f0 asup_set_class awcel awi f1 awal i0 asup_set_class f1 asup_set_class awcel awi i0 awal f0 asup_set_class f1 asup_set_class awcel f1 peximi f1 asup_set_class i0 asup_set_class awcel f1 asup_set_class f0 asup_set_class awcel awi f1 awal i0 asup_set_class f1 asup_set_class awcel awi i0 awal f1 awex f0 asup_set_class f1 asup_set_class awcel f1 awex aax-mp $.
$}
$( Power set axiom expressed in class notation.  Axiom 4 of [TakeutiZaring]
       p. 17.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
       Salmon, 25-Jul-2011.) $)
${
	$v x y z A $.
	$d A x y z $.
	e0 $e |- A e. _V $.
	f0 $f class A $.
	i0 $f set x $.
	i1 $f set y $.
	i2 $f set z $.
	ppwex $p |- ~P A e. _V $=
	e0 i2 asup_set_class f0 ppweq i2 asup_set_class f0 awceq i2 asup_set_class acpw f0 acpw acvv peleq1d i1 i2 asup_set_class adf-pw i2 i0 i1 paxpow2 i1 asup_set_class i2 asup_set_class awss i0 i1 pbm1.3ii i1 asup_set_class i2 asup_set_class awss i1 i0 asup_set_class pabeq2 i0 asup_set_class i1 asup_set_class i2 asup_set_class awss i1 acab awceq i1 asup_set_class i0 asup_set_class awcel i1 asup_set_class i2 asup_set_class awss awb i1 awal i0 pexbii i0 asup_set_class i1 asup_set_class i2 asup_set_class awss i1 acab awceq i0 awex i1 asup_set_class i0 asup_set_class awcel i1 asup_set_class i2 asup_set_class awss awb i1 awal i0 awex pmpbir i0 i1 asup_set_class i2 asup_set_class awss i1 acab pissetri i2 asup_set_class acpw i1 asup_set_class i2 asup_set_class awss i1 acab acvv peqeltri i2 asup_set_class acpw acvv awcel f0 acpw acvv awcel i2 f0 pvtocl $.
$}
$( Power set axiom expressed in class notation, with the sethood
       requirement as an antecedent.  Axiom 4 of [TakeutiZaring] p. 17.
       (Contributed by NM, 30-Oct-2003.) $)
${
	$v x A V $.
	$d x A $.
	f0 $f class A $.
	f1 $f class V $.
	i0 $f set x $.
	ppwexg $p |- ( A e. V -> ~P A e. _V ) $=
	i0 asup_set_class f0 ppweq i0 asup_set_class f0 awceq i0 asup_set_class acpw f0 acpw acvv peleq1d i0 pvex i0 asup_set_class ppwex i0 asup_set_class acpw acvv awcel f0 acpw acvv awcel i0 f0 f1 pvtoclg $.
$}
$( Existence of a class of subsets.  (Contributed by NM, 15-Jul-2006.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
${
	$v ph x A V $.
	$d x A $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f class A $.
	f3 $f class V $.
	pabssexg $p |- ( A e. V -> { x | ( x C_ A /\ ph ) } e. _V ) $=
	f2 f3 ppwexg f1 f2 adf-pw f2 acpw f1 asup_set_class f2 awss f1 acab acvv peleq1i f1 asup_set_class f2 awss f0 psimpl f1 asup_set_class f2 awss f0 awa f1 asup_set_class f2 awss f1 pss2abi f1 asup_set_class f2 awss f0 awa f1 acab f1 asup_set_class f2 awss f1 acab acvv pssexg f1 asup_set_class f2 awss f0 awa f1 acab f1 asup_set_class f2 awss f1 acab awss f1 asup_set_class f2 awss f1 acab acvv awcel f1 asup_set_class f2 awss f0 awa f1 acab acvv awcel pmpan f2 acpw acvv awcel f1 asup_set_class f2 awss f1 acab acvv awcel f1 asup_set_class f2 awss f0 awa f1 acab acvv awcel psylbi f2 f3 awcel f2 acpw acvv awcel f1 asup_set_class f2 awss f0 awa f1 acab acvv awcel psyl $.
$}
$( A singleton is a set.  Theorem 7.13 of [Quine] p. 51, but proved using
       only Extensionality, Power Set, and Separation.  Unlike the proof of
       ~ zfpair , Replacement is not needed.  (Contributed by NM, 7-Aug-1994.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.)  See also ~ snex .
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
${
	$v A $.
	f0 $f class A $.
	psnexALT $p |- { A } e. _V $=
	f0 psnsspw f0 acsn f0 acpw acvv pssexg f0 acsn f0 acpw awss f0 acpw acvv awcel f0 acsn acvv awcel pmpan f0 acvv ppwexg f0 acvv awcel f0 acpw acvv awcel pcon3i f0 psnprc f0 acvv awcel awn f0 acsn ac0 awceq pbiimpi p0ex f0 acvv awcel awn f0 acsn ac0 acvv psyl6eqel f0 acpw acvv awcel awn f0 acvv awcel awn f0 acsn acvv awcel psyl f0 acpw acvv awcel f0 acsn acvv awcel ppm2.61i $.
$}
$( The power set of the empty set (the ordinal 1) is a set.  See also
     ~ p0exALT .  (Contributed by NM, 23-Dec-1993.) $)
${
	pp0ex $p |- { (/) } e. _V $=
	ppw0 p0ex ac0 ppwex ac0 acpw ac0 acsn acvv peqeltrri $.
$}
$( The power set of the empty set (the ordinal 1) is a set.  Alternate proof
     which is longer and quite different from the proof of ~ p0ex if ~ snexALT
     is expanded.  (Contributed by NM, 23-Dec-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
${
	pp0exALT $p |- { (/) } e. _V $=
	ac0 psnexALT $.
$}
$( The power set of the power set of the empty set (the ordinal 2) is a set.
     (Contributed by NM, 5-Aug-1993.) $)
${
	ppp0ex $p |- { (/) , { (/) } } e. _V $=
	ppwpw0 pp0ex ac0 acsn ppwex ac0 acsn acpw ac0 ac0 acsn acpr acvv peqeltrri $.
$}
$( The ordinal number 3 is a set, proved without the Axiom of Union
     ~ ax-un .  (Contributed by NM, 2-May-2009.) $)
${
	pord3ex $p |- { (/) , { (/) } , { (/) , { (/) } } } e. _V $=
	ac0 ac0 acsn ac0 ac0 acsn acpr adf-tp ac0 ac0 acsn ppwpr ppp0ex ac0 ac0 acsn acpr ppwex ac0 ac0 acsn acpr acpw ac0 ac0 acsn acpr ac0 acsn acsn ac0 ac0 acsn acpr acpr acun acvv peqeltrri ac0 acsn acsn ac0 ac0 acsn acpr psnsspr2 ac0 ac0 acsn acpr acsn ac0 acsn acsn ac0 ac0 acsn acpr acpr ac0 ac0 acsn acpr punss2 ac0 ac0 acsn acpr acsn ac0 acsn acsn ac0 ac0 acsn acpr acpr awss ac0 ac0 acsn acpr ac0 ac0 acsn acpr acsn acun ac0 ac0 acsn acpr ac0 acsn acsn ac0 ac0 acsn acpr acpr acun awss aax-mp ac0 ac0 acsn acpr ac0 ac0 acsn acpr acsn acun ac0 ac0 acsn acpr ac0 acsn acsn ac0 ac0 acsn acpr acpr acun pssexi ac0 ac0 acsn ac0 ac0 acsn acpr actp ac0 ac0 acsn acpr ac0 ac0 acsn acpr acsn acun acvv peqeltri $.
$}
$( At least two sets exist (or in terms of first-order logic, the universe
       of discourse has two or more objects).  Note that we may not substitute
       the same variable for both ` x ` and ` y ` (as indicated by the distinct
       variable requirement), for otherwise we would contradict ~ stdpc6 .

       This theorem is proved directly from set theory axioms (no set theory
       definitions) and does not use ~ ax-ext or ~ ax-sep .  See ~ dtruALT for
       a shorter proof using these axioms.

       The proof makes use of dummy variables ` z ` and ` w ` which do not
       appear in the final theorem.  They must be distinct from each other and
       from ` x ` and ` y ` .  In other words, if we were to substitute ` x `
       for ` z ` throughout the proof, the proof would fail.  Although this
       requirement is made explicitly in the set.mm source file, it is implicit
       on the web page (i.e. doesn't appear in the "Distinct variable group").
       (Contributed by NM, 7-Nov-2006.) $)
${
	$v x y z w $.
	$d w x y z $.
	f0 $f set x $.
	f1 $f set y $.
	i0 $f set z $.
	i1 $f set w $.
	pdtru $p |- -. A. x x = y $=
	f0 i1 pel i0 f0 aax-nul f0 asup_set_class i0 asup_set_class awcel awn f0 psp f0 asup_set_class i0 asup_set_class awcel awn f0 awal f0 asup_set_class i0 asup_set_class awcel awn i0 peximi f0 asup_set_class i0 asup_set_class awcel awn f0 awal i0 awex f0 asup_set_class i0 asup_set_class awcel awn i0 awex aax-mp f0 asup_set_class i1 asup_set_class awcel f0 asup_set_class i0 asup_set_class awcel awn i1 i0 peeanv f0 asup_set_class i1 asup_set_class awcel f0 asup_set_class i0 asup_set_class awcel awn awa i0 awex i1 awex f0 asup_set_class i1 asup_set_class awcel i1 awex f0 asup_set_class i0 asup_set_class awcel awn i0 awex pmpbir2an i1 i0 f0 aax-14 i1 asup_set_class i0 asup_set_class awceq f0 asup_set_class i1 asup_set_class awcel f0 asup_set_class i0 asup_set_class awcel pcom12 f0 asup_set_class i1 asup_set_class awcel i1 asup_set_class i0 asup_set_class awceq f0 asup_set_class i0 asup_set_class awcel pcon3and f0 asup_set_class i1 asup_set_class awcel f0 asup_set_class i0 asup_set_class awcel awn awa i1 asup_set_class i0 asup_set_class awceq awn i1 i0 p2eximi f0 asup_set_class i1 asup_set_class awcel f0 asup_set_class i0 asup_set_class awcel awn awa i0 awex i1 awex i1 asup_set_class i0 asup_set_class awceq awn i0 awex i1 awex aax-mp i0 f1 i1 pequequ2 i0 asup_set_class f1 asup_set_class awceq i1 asup_set_class i0 asup_set_class awceq i1 asup_set_class f1 asup_set_class awceq pnotbid f0 i1 f1 aax-8 f0 asup_set_class i1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq i1 asup_set_class f1 asup_set_class awceq pcon3d i1 asup_set_class f1 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq awn f0 i1 pspimev i0 asup_set_class f1 asup_set_class awceq i1 asup_set_class i0 asup_set_class awceq awn i1 asup_set_class f1 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq awn f0 awex psyl6bi f0 i0 f1 aax-8 f0 asup_set_class i0 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq i0 asup_set_class f1 asup_set_class awceq pcon3d i0 asup_set_class f1 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq awn f0 i0 pspimev i0 asup_set_class f1 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq awn f0 awex i1 asup_set_class i0 asup_set_class awceq awn pa1d i0 asup_set_class f1 asup_set_class awceq i1 asup_set_class i0 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq awn f0 awex awi ppm2.61i i1 asup_set_class i0 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq awn f0 awex i1 i0 pexlimivv i1 asup_set_class i0 asup_set_class awceq awn i0 awex i1 awex f0 asup_set_class f1 asup_set_class awceq awn f0 awex aax-mp f0 asup_set_class f1 asup_set_class awceq f0 pexnal f0 asup_set_class f1 asup_set_class awceq awn f0 awex f0 asup_set_class f1 asup_set_class awceq f0 awal awn pmpbi $.
$}
$( This theorem shows that axiom ~ ax-16 is redundant in the presence of
       theorem ~ dtru , which states simply that at least two things exist.
       This justifies the remark at
       ~ http://us.metamath.org/mpeuni/mmzfcnd.html#twoness (which links to
       this theorem).  (Contributed by NM, 7-Nov-2006.) $)
${
	$v ph x y $.
	$d x y $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	pax16b $p |- ( A. x x = y -> ( ph -> A. x ph ) ) $=
	f1 f2 pdtru f1 asup_set_class f2 asup_set_class awceq f1 awal f0 f0 f1 awal awi ppm2.21i $.
$}
$( Existential uniqueness implies there is a value for which the wff
       argument is false.  (Contributed by NM, 24-Oct-2010.) $)
${
	$v ph x y $.
	$d x y $.
	$d y ph $.
	f0 $f wff ph $.
	f1 $f set x $.
	i0 $f set y $.
	peunex $p |- ( E! x ph -> E. x -. ph ) $=
	f1 i0 pdtru f0 f1 asup_set_class i0 asup_set_class awceq f1 palim f0 f1 asup_set_class i0 asup_set_class awceq awi f1 awal f0 f1 awal f1 asup_set_class i0 asup_set_class awceq f1 awal pmtoi f0 f1 asup_set_class i0 asup_set_class awceq awi f1 awal f0 f1 awal awn i0 pexlimiv f0 f1 asup_set_class i0 asup_set_class awceq awi f1 awal i0 awex f0 f1 awal awn f0 f1 awex padantl f0 i0 pnfv f0 f1 i0 peu3 f0 f1 pexnal f0 f1 awex f0 f1 asup_set_class i0 asup_set_class awceq awi f1 awal i0 awex awa f0 f1 awal awn f0 f1 aweu f0 awn f1 awex p3imtr4i $.
$}
$( A set variable is not free from itself.  The proof relies on ~ dtru ,
       that is, it is not true in a one-element domain.  (Contributed by Mario
       Carneiro, 8-Oct-2016.) $)
${
	$v x y z w $.
	$d w x y z $.
	f0 $f set x $.
	i0 $f set y $.
	i1 $f set z $.
	i2 $f set w $.
	pnfnid $p |- -. F/_ x x $=
	i1 i2 pdtru i1 i2 i0 aax-ext i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i0 awal i1 asup_set_class i2 asup_set_class awceq i2 psps i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i0 awal i2 awal i1 asup_set_class i2 asup_set_class awceq i1 palimi i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i0 awal i2 awal i1 awal i1 asup_set_class i2 asup_set_class awceq i1 awal pmto f0 i0 f0 asup_set_class adf-nfc i0 asup_set_class f0 asup_set_class awcel f0 i1 i2 psbnf2 i1 f0 i0 pelsb4 i2 f0 i0 pelsb4 i0 asup_set_class f0 asup_set_class awcel f0 i1 awsb i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class f0 asup_set_class awcel f0 i2 awsb i0 asup_set_class i2 asup_set_class awcel pbibi12i i0 asup_set_class f0 asup_set_class awcel f0 i1 awsb i0 asup_set_class f0 asup_set_class awcel f0 i2 awsb awb i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i1 i2 p2albii i0 asup_set_class f0 asup_set_class awcel f0 awnf i0 asup_set_class f0 asup_set_class awcel f0 i1 awsb i0 asup_set_class f0 asup_set_class awcel f0 i2 awsb awb i2 awal i1 awal i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i2 awal i1 awal pbitri i0 asup_set_class f0 asup_set_class awcel f0 awnf i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i2 awal i1 awal i0 palbii i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i0 i1 i2 palrot3 f0 f0 asup_set_class awnfc i0 asup_set_class f0 asup_set_class awcel f0 awnf i0 awal i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i2 awal i1 awal i0 awal i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i0 awal i2 awal i1 awal p3bitri f0 f0 asup_set_class awnfc i0 asup_set_class i1 asup_set_class awcel i0 asup_set_class i2 asup_set_class awcel awb i0 awal i2 awal i1 awal pmtbir $.
$}
$( The "distinctor" expression ` -. A. x x = y ` , stating that ` x ` and
       ` y ` are not the same variable, can be written in terms of ` F/ ` in
       the obvious way.  This theorem is not true in a one-element domain,
       because then ` F/_ x y ` and ` A. x x = y ` will both be true.
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
${
	$v x y $.
	$d x y $.
	f0 $f set x $.
	f1 $f set y $.
	pnfcvb $p |- ( F/_ x y <-> -. A. x x = y ) $=
	f1 pnfnid f0 asup_set_class f1 asup_set_class awceq f0 awal f1 asup_set_class peqidd f0 f1 f1 asup_set_class f1 asup_set_class pdrnfc1 f0 asup_set_class f1 asup_set_class awceq f0 awal f0 f1 asup_set_class awnfc f1 f1 asup_set_class awnfc pmtbiri f0 asup_set_class f1 asup_set_class awceq f0 awal f0 f1 asup_set_class awnfc pcon2i f0 f1 pnfcvf f0 f1 asup_set_class awnfc f0 asup_set_class f1 asup_set_class awceq f0 awal awn pimpbii $.
$}
$( A class is a subclass of the power class of its union.  Exercise 6(b) of
       [Enderton] p. 38.  (Contributed by NM, 14-Oct-1996.) $)
${
	$v x A $.
	$d A x $.
	f0 $f class A $.
	i0 $f set x $.
	ppwuni $p |- A C_ ~P U. A $=
	i0 asup_set_class f0 pelssuni i0 pvex i0 asup_set_class f0 acuni pelpw i0 asup_set_class f0 awcel i0 asup_set_class f0 acuni awss i0 asup_set_class f0 acuni acpw awcel psylibr i0 f0 f0 acuni acpw pssriv $.
$}
$( A version of ~ dtru ("two things exist") with a shorter proof that uses
       more axioms but may be easier to understand.

       Assuming that ZF set theory is consistent, we cannot prove this theorem
       unless we specify that ` x ` and ` y ` be distinct.  Specifically,
       theorem ~ spcev requires that ` x ` must not occur in the subexpression
       ` -. y = { (/) } ` in step 4 nor in the subexpression ` -. y = (/) ` in
       step 9.  The proof verifier will require that ` x ` and ` y ` be in a
       distinct variable group to ensure this.  You can check this by deleting
       the $d statement in set.mm and rerunning the verifier, which will print
       a detailed explanation of the distinct variable violation.  (Contributed
       by NM, 15-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
${
	$v x y $.
	$d x y $.
	f0 $f set x $.
	f1 $f set y $.
	pdtruALT $p |- -. A. x x = y $=
	f1 asup_set_class p0inp0 pp0ex f0 asup_set_class ac0 acsn f1 asup_set_class peqeq2 f0 asup_set_class ac0 acsn awceq f1 asup_set_class f0 asup_set_class awceq f1 asup_set_class ac0 acsn awceq pnotbid f1 asup_set_class f0 asup_set_class awceq awn f1 asup_set_class ac0 acsn awceq awn f0 ac0 acsn pspcev f1 asup_set_class ac0 awceq f1 asup_set_class ac0 acsn awceq awn f1 asup_set_class f0 asup_set_class awceq awn f0 awex psyl p0ex f0 asup_set_class ac0 f1 asup_set_class peqeq2 f0 asup_set_class ac0 awceq f1 asup_set_class f0 asup_set_class awceq f1 asup_set_class ac0 awceq pnotbid f1 asup_set_class f0 asup_set_class awceq awn f1 asup_set_class ac0 awceq awn f0 ac0 pspcev f1 asup_set_class ac0 awceq f1 asup_set_class f0 asup_set_class awceq awn f0 awex ppm2.61i f1 asup_set_class f0 asup_set_class awceq f0 pexnal f1 asup_set_class f0 asup_set_class peqcom f1 asup_set_class f0 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq f0 palbii f1 asup_set_class f0 asup_set_class awceq awn f0 awex f1 asup_set_class f0 asup_set_class awceq f0 awal f0 asup_set_class f1 asup_set_class awceq f0 awal pxchbinx f1 asup_set_class f0 asup_set_class awceq awn f0 awex f0 asup_set_class f1 asup_set_class awceq f0 awal awn pmpbi $.
$}
$( Corollary of ~ dtru .  This example illustrates the danger of blindly
       trusting the standard Deduction Theorem without accounting for free
       variables: the theorem form of this deduction is not valid, as shown by
       ~ dtrucor2 .  (Contributed by NM, 27-Jun-2002.) $)
${
	$v x y $.
	$d x y $.
	e0 $e |- x = y $.
	f0 $f set x $.
	f1 $f set y $.
	pdtrucor $p |- x =/= y $=
	f0 f1 pdtru f0 asup_set_class f1 asup_set_class awceq f0 awal f0 asup_set_class f1 asup_set_class awne ppm2.21i e0 f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awne f0 pmpg $.
$}
$( The theorem form of the deduction ~ dtrucor leads to a contradiction, as
       mentioned in the "Wrong!" example at
       ~ http://us.metamath.org/mpeuni/mmdeduction.html#bad .  (Contributed by
       NM, 20-Oct-2007.) $)
${
	$v ph x y $.
	e0 $e |- ( x = y -> x =/= y ) $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	pdtrucor2 $p |- ( ph /\ -. ph ) $=
	f1 f2 pa9e e0 f1 asup_set_class f2 asup_set_class awceq f1 asup_set_class f2 asup_set_class pnecon2bi f1 asup_set_class f2 asup_set_class awceq ppm2.01 f1 asup_set_class f2 asup_set_class awceq f1 asup_set_class f2 asup_set_class awceq awn awi f1 asup_set_class f2 asup_set_class awceq awn aax-mp f1 asup_set_class f2 asup_set_class awceq f1 pnex f1 asup_set_class f2 asup_set_class awceq f1 awex f0 f0 awn awa ppm2.24ii $.
$}
$( Demonstration of a theorem (scheme) that requires (meta)variables ` x `
       and ` y ` to be distinct, but no others.  It bundles the theorem schemes
       ` E. x ( x = y -> x e. x ) ` and ` E. x ( x = y -> y e. x ) ` .  Compare
       ~ dvdemo2 .  ("Bundles" is a term introduced by Raph Levien.)
       (Contributed by NM, 1-Dec-2006.) $)
${
	$v x y z $.
	$d x y $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	pdvdemo1 $p |- E. x ( x = y -> z e. x ) $=
	f0 f1 pdtru f0 asup_set_class f1 asup_set_class awceq f0 pexnal f0 asup_set_class f1 asup_set_class awceq awn f0 awex f0 asup_set_class f1 asup_set_class awceq f0 awal awn pmpbir f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel ppm2.21 f0 asup_set_class f1 asup_set_class awceq awn f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel awi f0 peximi f0 asup_set_class f1 asup_set_class awceq awn f0 awex f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel awi f0 awex aax-mp $.
$}
$( Demonstration of a theorem (scheme) that requires (meta)variables ` x `
       and ` z ` to be distinct, but no others.  It bundles the theorem schemes
       ` E. x ( x = x -> z e. x ) ` and ` E. x ( x = y -> y e. x ) ` .  Compare
       ~ dvdemo1 .  (Contributed by NM, 1-Dec-2006.) $)
${
	$v x y z $.
	$d x z $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	pdvdemo2 $p |- E. x ( x = y -> z e. x ) $=
	f2 f0 pel f2 asup_set_class f0 asup_set_class awcel f0 asup_set_class f1 asup_set_class awceq aax-1 f2 asup_set_class f0 asup_set_class awcel f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel awi f0 peximi f2 asup_set_class f0 asup_set_class awcel f0 awex f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel awi f0 awex aax-mp $.
$}

