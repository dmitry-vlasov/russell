$[ uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY.smm $]
$( /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Introduce the Axiom of Extensionality

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

$)
$( /* Axiom of Extensionality.  An axiom of Zermelo-Fraenkel set theory.  It
       states that two sets are identical if they contain the same elements.
       Axiom Ext of [BellMachover] p. 461.

       Set theory can also be formulated with a _single_ primitive predicate
       ` e. ` on top of traditional predicate calculus _without_ equality.  In
       that case the Axiom of Extensionality becomes
       ` ( A. w ( w e. x <-> w e. y ) -> ( x e. z -> y e. z ) ) ` , and
       equality ` x = y ` is _defined_ as ` A. w ( w e. x <-> w e. y ) ` .  All
       of the usual axioms of equality then become theorems of set theory.
       See, for example, Axiom 1 of [TakeutiZaring] p. 8.

       To use the above "equality-free" version of Extensionality with
       Metamath's logical axioms, we would rewrite ~ ax-8 through ~ ax-16 with
       equality expanded according to the above definition.  Some of those
       axioms could be proved from set theory and would be redundant.  Not all
       of them are redundant, since our axioms of predicate calculus make
       essential use of equality for the proper substitution that is a
       primitive notion in traditional predicate calculus.  A study of such an
       axiomatization would be an interesting project for someone exploring the
       foundations of logic.

       _General remarks_:  Our set theory axioms are presented using defined
       connectives ( ` <-> ` , ` E. ` , etc.) for convenience.  However, it is
       implicitly understood that the actual axioms use only the primitive
       connectives ` -> ` , ` -. ` , ` A. ` , ` = ` , and ` e. ` .  It is
       straightforward to establish the equivalence between the actual axioms
       and the ones we display, and we will not do so.

       It is important to understand that strictly speaking, all of our set
       theory axioms are really schemes that represent an infinite number of
       actual axioms.  This is inherent in the design of Metamath
       ("metavariable math"), which manipulates only metavariables.  For
       example, the metavariable ` x ` in ~ ax-ext can represent any actual
       variable _v1_, _v2_, _v3_,... .  Distinct variable restrictions ($d)
       prevent us from substituting say _v1_ for both ` x ` and ` z ` .  This
       is in contrast to typical textbook presentations that present actual
       axioms (except for Replacement ~ ax-rep , which involves a wff
       metavariable).  In practice, though, the theorems and proofs are
       essentially the same.  The $d restrictions make each of the infinite
       axioms generated by the ~ ax-ext scheme exactly logically equivalent to
       each other and in particular to the actual axiom of the textbook
       version.  (Contributed by NM, 5-Aug-1993.) */

$)
${
	$v x y z $.
	$d x y z $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	aax-ext $a |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $.
$}
$( /* The Axiom of Extensionality ( ~ ax-ext ) restated so that it postulates
       the existence of a set ` z ` given two arbitrary sets ` x ` and ` y ` .
       This way to express it follows the general idea of the other ZFC axioms,
       which is to postulate the existence of sets given other sets.
       (Contributed by NM, 28-Sep-2003.) */

$)
${
	$v x y z $.
	$d x y z $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	paxext2 $p |- E. z ( ( z e. x <-> z e. y ) -> x = y ) $=
	f0 f1 f2 aax-ext f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f0 asup_set_class f1 asup_set_class awceq f2 p19.36v f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f0 asup_set_class f1 asup_set_class awceq awi f2 awex f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 awal f0 asup_set_class f1 asup_set_class awceq awi pmpbir $.
$}
$( /* A generalization of the Axiom of Extensionality in which ` x ` and ` y `
       need not be distinct.  (Contributed by NM, 15-Sep-1993.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.) */

$)
${
	$v x y z $.
	$v w $.
	$d z x w $.
	$d z y w $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	i0 $f set w $.
	paxext3 $p |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $=
	i0 f0 f2 pelequ2 i0 asup_set_class f0 asup_set_class awceq f2 asup_set_class i0 asup_set_class awcel f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel pbibi1d i0 asup_set_class f0 asup_set_class awceq f2 asup_set_class i0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 palbidv i0 f0 f1 pequequ1 i0 asup_set_class f0 asup_set_class awceq f2 asup_set_class i0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 awal f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 awal i0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq pimbi12d i0 f1 f2 aax-ext f2 asup_set_class i0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 awal i0 asup_set_class f1 asup_set_class awceq awi f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 awal f0 asup_set_class f1 asup_set_class awceq awi i0 f0 pchvarv $.
$}
$( /* A bidirectional version of Extensionality.  Although this theorem
       "looks" like it is just a definition of equality, it requires the Axiom
       of Extensionality for its proof under our axiomatization.  See the
       comments for ~ ax-ext and ~ df-cleq .  (Contributed by NM,
       14-Nov-2008.) */

$)
${
	$v x y z $.
	$d z x $.
	$d z y $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	paxext4 $p |- ( x = y <-> A. z ( z e. x <-> z e. y ) ) $=
	f0 f1 f2 pelequ2 f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 palrimiv f0 f1 f2 paxext3 f0 asup_set_class f1 asup_set_class awceq f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class f1 asup_set_class awcel awb f2 awal pimpbii $.
$}
$( /* Any set defined by a property is the only set defined by that property.
       Theorem 1.1 of [BellMachover] p. 462.  (Contributed by NM,
       30-Jun-1994.) */

$)
${
	$v ph x y $.
	$v z $.
	$d x y z $.
	$d ph z $.
	e0 $e |- F/ x ph $.
	f0 $f wff ph $.
	f1 $f set x $.
	f2 $f set y $.
	i0 $f set z $.
	pbm1.1 $p |- ( E. x A. y ( y e. x <-> ph ) -> E! x A. y ( y e. x <-> ph ) ) $=
	f2 asup_set_class i0 asup_set_class awcel f1 pnfv e0 f2 asup_set_class i0 asup_set_class awcel f0 f1 pnfbi f2 asup_set_class i0 asup_set_class awcel f0 awb f1 f2 pnfal f1 i0 f2 pelequ2 f1 asup_set_class i0 asup_set_class awceq f2 asup_set_class f1 asup_set_class awcel f2 asup_set_class i0 asup_set_class awcel f0 pbibi1d f1 asup_set_class i0 asup_set_class awceq f2 asup_set_class f1 asup_set_class awcel f0 awb f2 asup_set_class i0 asup_set_class awcel f0 awb f2 palbidv f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f2 asup_set_class i0 asup_set_class awcel f0 awb f2 awal f1 i0 psbie f2 asup_set_class f1 asup_set_class awcel f0 awb f2 asup_set_class i0 asup_set_class awcel f0 awb f2 p19.26 f2 asup_set_class f1 asup_set_class awcel f0 f2 asup_set_class i0 asup_set_class awcel pbiantr f2 asup_set_class f1 asup_set_class awcel f0 awb f2 asup_set_class i0 asup_set_class awcel f0 awb awa f2 asup_set_class f1 asup_set_class awcel f2 asup_set_class i0 asup_set_class awcel awb f2 palimi f1 i0 f2 aax-ext f2 asup_set_class f1 asup_set_class awcel f0 awb f2 asup_set_class i0 asup_set_class awcel f0 awb awa f2 awal f2 asup_set_class f1 asup_set_class awcel f2 asup_set_class i0 asup_set_class awcel awb f2 awal f1 asup_set_class i0 asup_set_class awceq psyl f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f2 asup_set_class i0 asup_set_class awcel f0 awb f2 awal awa f2 asup_set_class f1 asup_set_class awcel f0 awb f2 asup_set_class i0 asup_set_class awcel f0 awb awa f2 awal f1 asup_set_class i0 asup_set_class awceq psylbir f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 i0 awsb f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f2 asup_set_class i0 asup_set_class awcel f0 awb f2 awal f1 asup_set_class i0 asup_set_class awceq psylan2b f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 i0 awsb awa f1 asup_set_class i0 asup_set_class awceq awi f1 i0 pgen2 f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 awex f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 i0 awsb awa f1 asup_set_class i0 asup_set_class awceq awi i0 awal f1 awal pjctr f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal i0 pnfv f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 i0 peu2 f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 awex f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 awex f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 i0 awsb awa f1 asup_set_class i0 asup_set_class awceq awi i0 awal f1 awal awa f2 asup_set_class f1 asup_set_class awcel f0 awb f2 awal f1 aweu psylibr $.
$}

