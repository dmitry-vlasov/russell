$[ turnstile_special_source.smm $]
$[ uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Predicate_calculus_with_equality___Tarski_s_system_S2_(1_rule,_6_schemes)/Axiom_schemes_ax-14_(Right_Membership_Equality).smm $]
$( =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      Logical redundancy of ax-6 , ax-7 , ax-11 , ax-12

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The orginal axiom schemes of Tarski's predicate calculus are ~ ax-5 ,
  ~ ax-17 , ~ ax9v , ~ ax-8 , ~ ax-13 , and ~ ax-14 , together with rule
  ~ ax-gen .  See ~ http://us.metamath.org/mpeuni/mmset.html#compare .  They
  are given as axiom schemes B4 through B8 in [KalishMontague] p. 81.  These
  are shown to be logically complete by Theorem 1 of [KalishMontague] p. 85.

  The axiom system of set.mm includes the auxiliary axiom schemes ~ ax-6 ,
  ~ ax-7 , ~ ax-12 , and ~ ax-11 , which are not part of Tarski's axiom
  schemes.  They are used (and we conjecture are required) to make our system
  "metalogically complete" i.e. able to prove directly all possible schemes
  with wff and set metavariables, bundled or not, whose object-language
  instances are valid.  ( ~ ax-11 has been proved to be required; see
  ~ http://us.metamath.org/award2003.html#9a .  Metalogical independence of the
  other three are open problems.)

  (There are additional predicate calculus axiom schemes included in set.mm
  such as ~ ax-4 , but they can all be proved as theorems from the above.)

  Terminology:  Two set (individual) metavariables are "bundled" in an axiom or
  theorem scheme when there is no distinct variable constraint ($d) imposed on
  them.  (The term "bundled" is due to Raph Levien.)  For example, the ` x `
  and ` y ` in ~ ax9 are bundled, but they are not in ~ ax9v . We also say that
  a scheme is bundled when it has at least one pair of bundled set
  metavariables.  If distinct variable conditions are added to all set
  metavariable pairs in a bundled scheme, we call that the "principal" instance
  of the bundled scheme.  For example, ~ ax9v is the principal instance of
  ~ ax9 . Whenever a common variable is substituted for two or more bundled
  variables in an axiom or theorem scheme, we call the substitution instance
  "degenerate".  For example, the instance ` -. A. x -. x = x ` of ~ ax9 is
  degenerate.  An advantage of bundling is ease of use since there are fewer
  distinct variable restrictions ($d) to be concerned with.  There is also a
  small economy in being able to state principal and degenerate instances
  simultaneously.  A disadvantage is that bundling may present difficulties in
  translations to other proof languages, which typically lack the concept (in
  part because their variables often represent the variables of the object
  language rather than metavariables ranging over them).

  Because Tarski's axiom schemes are logically complete, they can be used to
  prove any object-language instance of ~ ax-6 , ~ ax-7 , ~ ax-11 , and ~ ax-12
  . "Translating" this to Metamath, it means that Tarski's axioms can prove any
  substitution instance of ~ ax-6 , ~ ax-7 , ~ ax-11 , or ~ ax-12 in which (1)
  there are no wff metavariables and (2) all set metavariables are mutually
  distinct i.e. are not bundled.  In effect this is mimicking the object
  language by pretending that each set metavariable is an object-language
  variable.  (There may also be specific instances with wff metavariables
  and/or bundling that are directly provable from Tarski's axiom schemes, but
  it isn't guaranteed.  Whether all of them are possible is part of the still
  open metalogical independence problem for our additional axiom schemes.)

  It can be useful to see how this can be done, both to show that our
  additional schemes are valid metatheorems of Tarski's system and to be able
  to translate object language instances of our proofs into proofs that would
  work with a system using only Tarski's original schemes.  In addition, it may
  (or may not) provide insight into the conjectured metalogical independence of
  our additional schemes.

  The new theorem schemes ~ ax6w , ~ ax7w , ~ ax11w , and ~ ax12w are
  derived using only Tarski's axiom schemes, showing that Tarski's schemes can
  be used to derive all substitution instances of ~ ax-6 , ~ ax-7 , ~ ax-11 ,
  and ~ ax-12 meeting conditions (1) and (2).  (The "w" suffix stands for "weak
  version".)  Each hypothesis of ~ ax6w , ~ ax7w , and ~ ax11w is of the
  form ` ( x = y -> ( ph <-> ps ) ) ` where ` ps ` is an auxiliary or "dummy"
  wff metavariable in which ` x ` doesn't occur.  We can show by induction on
  formula length that the hypotheses can be eliminated in all cases meeting
  conditions (1) and (2).  The example ~ ax11wdemo illustrates the techniques
  (equality theorems and bound variable renaming) used to achieve this.

  We also show the degenerate instances for axioms with bundled variables in
  ~ ax7dgen , ~ ax11dgen , ~ ax12dgen1 , ~ ax12dgen2 , ~ ax12dgen3 , and
  ~ ax12dgen4 . (Their proofs are trivial, but we include them to be thorough.)
  Combining the principal and degenerate cases _outside_ of Metamath, we show
  that the bundled schemes ~ ax-6 , ~ ax-7 , ~ ax-11 , and ~ ax-12 are schemes
  of Tarski's system, meaning that all object language instances they generate
  are theorems of Tarski's system.

  It is interesting that Tarski used the bundled scheme ~ ax-9 in an older
  system, so it seems the main purpose of his later ~ ax9v was just to show
  that the weaker unbundled form is sufficient rather than an aesthetic
  objection to bundled free and bound variables.  Since we adopt the
  bundled ~ ax-9 as our official axiom, we  show that the degenerate
  instance holds in ~ ax9dgen .

  The case of ~ sp is curious:  originally an axiom of Tarski's system, it
  was proved redundant by Lemma 9 of [KalishMontague] p. 86.  However, the
  proof is by induction on formula length, and the compact scheme form
  ` A. x ph -> ph ` apparently cannot be proved directly from Tarski's other
  axioms.  The best we can do seems to be ~ spw , again requiring
  substitution instances of ` ph ` that meet conditions (1) and (2) above.
  Note that our direct proof ~ sp requires ~ ax-11 , which is not part of
  Tarski's system.

$)
$( Tarski's system uses the weaker ~ ax9v instead of the bundled ~ ax-9 ,
       so here we show that the degenerate case of ~ ax-9 can be derived.
       (Contributed by NM, 23-Apr-2017.) $)
${
	$v x $.
	f0 $f set x $.
	pax9dgen $p |- -. A. x -. x = x $=
	f0 pequid f0 pequid f0 asup_set_class f0 asup_set_class awceq pnotnoti f0 asup_set_class f0 asup_set_class awceq awn f0 pspfalw f0 asup_set_class f0 asup_set_class awceq awn f0 awal f0 asup_set_class f0 asup_set_class awceq pmt2 $.
$}
$( Weak version of ~ ax-6 from which we can prove any ~ ax-6 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  (Contributed by NM, 9-Apr-2017.) $)
${
	$v ph ps x y $.
	$d y ph $.
	$d x ps $.
	$d x y $.
	e0 $e |- ( x = y -> ( ph <-> ps ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f set y $.
	pax6w $p |- ( -. A. x ph -> A. x -. A. x ph ) $=
	e0 f0 f1 f2 f3 phbn1w $.
$}
$( Weak version of ~ ax-7 from which we can prove any ~ ax-7 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  Unlike ~ ax-7 , this theorem requires that ` x ` and ` y ` be
       distinct i.e. are not bundled.  (Contributed by NM, 10-Apr-2017.) $)
${
	$v ph ps x y z $.
	$d y z $.
	$d x y $.
	$d z ph $.
	$d y ps $.
	e0 $e |- ( y = z -> ( ph <-> ps ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f set y $.
	f4 $f set z $.
	pax7w $p |- ( A. x A. y ph -> A. y A. x ph ) $=
	e0 f0 f1 f2 f3 f4 palcomiw $.
$}
$( Degenerate instance of ~ ax-7 where bundled variables ` x ` and ` y ` have
     a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
${
	$v ph x $.
	f0 $f wff ph $.
	f1 $f set x $.
	pax7dgen $p |- ( A. x A. x ph -> A. x A. x ph ) $=
	f0 f1 awal f1 awal pid $.
$}
$( Lemma for weak version of ~ ax-11 .  Uses only Tarski's FOL axiom
       schemes.  In some cases, this lemma may lead to shorter proofs than
       ~ ax11w .  (Contributed by NM, 10-Apr-2017.) $)
${
	$v ph ps x y $.
	$d x ps $.
	e0 $e |- ( x = y -> ( ph <-> ps ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f set x $.
	f3 $f set y $.
	pax11wlem $p |- ( x = y -> ( ph -> A. x ( x = y -> ph ) ) ) $=
	e0 f1 f2 aax-17 f0 f1 f2 f3 pax11i $.
$}
$( Weak version of ~ ax-11 from which we can prove any ~ ax-11 instance not
       involving wff variables or bundling.  Uses only Tarski's FOL axiom
       schemes.  An instance of the first hypothesis will normally require that
       ` x ` and ` y ` be distinct (unless ` x ` does not occur in ` ph ` ).
       (Contributed by NM, 10-Apr-2017.) $)
${
	$v ph ps ch x y z $.
	$d y z $.
	$d x ps $.
	$d z ph $.
	$d y ch $.
	e0 $e |- ( x = y -> ( ph <-> ps ) ) $.
	e1 $e |- ( y = z -> ( ph <-> ch ) ) $.
	f0 $f wff ph $.
	f1 $f wff ps $.
	f2 $f wff ch $.
	f3 $f set x $.
	f4 $f set y $.
	f5 $f set z $.
	pax11w $p |- ( x = y -> ( A. y ph -> A. x ( x = y -> ph ) ) ) $=
	e1 f0 f2 f4 f5 pspw e0 f0 f1 f3 f4 pax11wlem f0 f4 awal f0 f3 asup_set_class f4 asup_set_class awceq f3 asup_set_class f4 asup_set_class awceq f0 awi f3 awal psyl5 $.
$}
$( Degenerate instance of ~ ax-11 where bundled variables ` x ` and ` y `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
${
	$v ph x $.
	f0 $f wff ph $.
	f1 $f set x $.
	pax11dgen $p |- ( x = x -> ( A. x ph -> A. x ( x = x -> ph ) ) ) $=
	f0 f1 asup_set_class f1 asup_set_class awceq aax-1 f0 f1 asup_set_class f1 asup_set_class awceq f0 awi f1 palimi f0 f1 awal f1 asup_set_class f1 asup_set_class awceq f0 awi f1 awal awi f1 asup_set_class f1 asup_set_class awceq pa1i $.
$}
$( Example of an application of ~ ax11w that results in an instance of
       ~ ax-11 for a contrived formula with mixed free and bound variables,
       ` ( x e. y /\ A. x z e. x /\ A. y A. z y e. x ) ` , in place of
       ` ph ` .  The proof illustrates bound variable renaming with ~ cbvalvw
       to obtain fresh variables to avoid distinct variable clashes.  Uses only
       Tarski's FOL axiom schemes.  (Contributed by NM, 14-Apr-2017.) $)
${
	$v x y z $.
	$v w v $.
	$d x y z w v $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	i0 $f set w $.
	i1 $f set v $.
	pax11wdemo $p |- ( x = y -> ( A. y ( x e. y /\ A. x z e. x /\ A. y A. z y e. x ) -> A. x ( x = y -> ( x e. y /\ A. x z e. x /\ A. y A. z y e. x ) ) ) ) $=
	f0 f1 f1 pelequ1 f0 i0 f2 pelequ2 f2 asup_set_class f0 asup_set_class awcel f2 asup_set_class i0 asup_set_class awcel f0 i0 pcbvalvw f2 asup_set_class f0 asup_set_class awcel f0 awal f2 asup_set_class i0 asup_set_class awcel i0 awal awb f0 asup_set_class f1 asup_set_class awceq pa1i f1 i1 f0 pelequ1 f1 asup_set_class i1 asup_set_class awceq f1 asup_set_class f0 asup_set_class awcel i1 asup_set_class f0 asup_set_class awcel f2 palbidv f1 asup_set_class f0 asup_set_class awcel f2 awal i1 asup_set_class f0 asup_set_class awcel f2 awal f1 i1 pcbvalvw f0 f1 i1 pelequ2 f0 asup_set_class f1 asup_set_class awceq i1 asup_set_class f0 asup_set_class awcel i1 asup_set_class f1 asup_set_class awcel f2 palbidv f0 asup_set_class f1 asup_set_class awceq i1 asup_set_class f0 asup_set_class awcel f2 awal i1 asup_set_class f1 asup_set_class awcel f2 awal i1 palbidv f1 asup_set_class f0 asup_set_class awcel f2 awal f1 awal i1 asup_set_class f0 asup_set_class awcel f2 awal i1 awal f0 asup_set_class f1 asup_set_class awceq i1 asup_set_class f1 asup_set_class awcel f2 awal i1 awal psyl5bb f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awcel f1 asup_set_class f1 asup_set_class awcel f2 asup_set_class f0 asup_set_class awcel f0 awal f2 asup_set_class i0 asup_set_class awcel i0 awal f1 asup_set_class f0 asup_set_class awcel f2 awal f1 awal i1 asup_set_class f1 asup_set_class awcel f2 awal i1 awal p3anbi123d f1 i1 f0 pelequ2 f1 i1 f0 pelequ1 f1 asup_set_class i1 asup_set_class awceq f1 asup_set_class f0 asup_set_class awcel i1 asup_set_class f0 asup_set_class awcel f2 palbidv f1 asup_set_class f0 asup_set_class awcel f2 awal i1 asup_set_class f0 asup_set_class awcel f2 awal f1 i1 pcbvalvw f1 asup_set_class f0 asup_set_class awcel f2 awal f1 awal i1 asup_set_class f0 asup_set_class awcel f2 awal i1 awal awb f1 asup_set_class i1 asup_set_class awceq pa1i f1 asup_set_class i1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awcel f0 asup_set_class i1 asup_set_class awcel f1 asup_set_class f0 asup_set_class awcel f2 awal f1 awal i1 asup_set_class f0 asup_set_class awcel f2 awal i1 awal f2 asup_set_class f0 asup_set_class awcel f0 awal p3anbi13d f0 asup_set_class f1 asup_set_class awcel f2 asup_set_class f0 asup_set_class awcel f0 awal f1 asup_set_class f0 asup_set_class awcel f2 awal f1 awal aw3a f1 asup_set_class f1 asup_set_class awcel f2 asup_set_class i0 asup_set_class awcel i0 awal i1 asup_set_class f1 asup_set_class awcel f2 awal i1 awal aw3a f0 asup_set_class i1 asup_set_class awcel f2 asup_set_class f0 asup_set_class awcel f0 awal i1 asup_set_class f0 asup_set_class awcel f2 awal i1 awal aw3a f0 f1 i1 pax11w $.
$}
$( Weak version (principal instance) of ~ ax-12 not involving bundling.
       Uses only Tarski's FOL axiom schemes.  The proof is trivial but is
       included to complete the set ~ ax6w , ~ ax7w , and ~ ax11w .
       (Contributed by NM, 10-Apr-2017.) $)
${
	$v x y z $.
	$d x y z $.
	f0 $f set x $.
	f1 $f set y $.
	f2 $f set z $.
	pax12w $p |- ( -. x = y -> ( y = z -> A. x y = z ) ) $=
	f0 asup_set_class f1 asup_set_class awceq awn f1 asup_set_class f2 asup_set_class awceq f0 pa17d $.
$}
$( Degenerate instance of ~ ax-12 where bundled variables ` x ` and ` y `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
${
	$v x z $.
	f0 $f set x $.
	f1 $f set z $.
	pax12dgen1 $p |- ( -. x = x -> ( x = z -> A. x x = z ) ) $=
	f0 pequid f0 asup_set_class f0 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq f0 awal awi ppm2.24i $.
$}
$( Degenerate instance of ~ ax-12 where bundled variables ` x ` and ` z `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
${
	$v x y $.
	f0 $f set x $.
	f1 $f set y $.
	pax12dgen2 $p |- ( -. x = y -> ( y = x -> A. x y = x ) ) $=
	f1 f0 pequcomi f0 asup_set_class f1 asup_set_class awceq f1 asup_set_class f0 asup_set_class awceq f0 awal ppm2.21 f1 asup_set_class f0 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq f0 asup_set_class f1 asup_set_class awceq awn f1 asup_set_class f0 asup_set_class awceq f0 awal psyl5 $.
$}
$( Degenerate instance of ~ ax-12 where bundled variables ` y ` and ` z `
     have a common substitution.  Uses only Tarski's FOL axiom schemes.
     (Contributed by NM, 13-Apr-2017.) $)
${
	$v x y $.
	f0 $f set x $.
	f1 $f set y $.
	pax12dgen3 $p |- ( -. x = y -> ( y = y -> A. x y = y ) ) $=
	f1 pequid f1 asup_set_class f1 asup_set_class awceq f0 aax-gen f0 asup_set_class f1 asup_set_class awceq awn f1 asup_set_class f1 asup_set_class awceq f1 asup_set_class f1 asup_set_class awceq f0 awal pa1ii $.
$}
$( Degenerate instance of ~ ax-12 where bundled variables ` x ` , ` y ` , and
     ` z ` have a common substitution.  Uses only Tarski's FOL axiom schemes .
     (Contributed by NM, 13-Apr-2017.) $)
${
	$v x $.
	f0 $f set x $.
	pax12dgen4 $p |- ( -. x = x -> ( x = x -> A. x x = x ) ) $=
	f0 f0 pax12dgen1 $.
$}

