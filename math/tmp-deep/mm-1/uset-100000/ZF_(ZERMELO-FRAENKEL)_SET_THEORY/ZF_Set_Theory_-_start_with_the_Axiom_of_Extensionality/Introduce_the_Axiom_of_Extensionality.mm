$[ turnstile_special_source.mm $]

$[ uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY.mm $]

$(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Introduce the Axiom of Extensionality

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

$(Axiom of Extensionality.  An axiom of Zermelo-Fraenkel set theory.  It
       states that two sets are identical if they contain the same elements.
       Axiom Ext of [BellMachover] p. 461.

       Set theory can also be formulated with a _single_ primitive predicate
       ` e. ` on top of traditional predicate calculus _without_ equality.  In
       that case the Axiom of Extensionality becomes
       ` ( A. w ( w e. x <-> w e. y ) -> ( x e. z -> y e. z ) ) ` , and
       equality ` x = y ` is _defined_ as ` A. w ( w e. x <-> w e. y ) ` .  All
       of the usual axioms of equality then become theorems of set theory.
       See, for example, Axiom 1 of [TakeutiZaring] p. 8.

       To use the above "equality-free" version of Extensionality with
       Metamath's logical axioms, we would rewrite ~ ax-8 through ~ ax-16 with
       equality expanded according to the above definition.  Some of those
       axioms could be proved from set theory and would be redundant.  Not all
       of them are redundant, since our axioms of predicate calculus make
       essential use of equality for the proper substitution that is a
       primitive notion in traditional predicate calculus.  A study of such an
       axiomatization would be an interesting project for someone exploring the
       foundations of logic.

       _General remarks_:  Our set theory axioms are presented using defined
       connectives ( ` <-> ` , ` E. ` , etc.) for convenience.  However, it is
       implicitly understood that the actual axioms use only the primitive
       connectives ` -> ` , ` -. ` , ` A. ` , ` = ` , and ` e. ` .  It is
       straightforward to establish the equivalence between the actual axioms
       and the ones we display, and we will not do so.

       It is important to understand that strictly speaking, all of our set
       theory axioms are really schemes that represent an infinite number of
       actual axioms.  This is inherent in the design of Metamath
       ("metavariable math"), which manipulates only metavariables.  For
       example, the metavariable ` x ` in ~ ax-ext can represent any actual
       variable _v1_, _v2_, _v3_,... .  Distinct variable restrictions ($d)
       prevent us from substituting say _v1_ for both ` x ` and ` z ` .  This
       is in contrast to typical textbook presentations that present actual
       axioms (except for Replacement ~ ax-rep , which involves a wff
       metavariable).  In practice, though, the theorems and proofs are
       essentially the same.  The $d restrictions make each of the infinite
       axioms generated by the ~ ax-ext scheme exactly logically equivalent to
       each other and in particular to the actual axiom of the textbook
       version.  (Contributed by NM, 5-Aug-1993.) $)

${
	$v x y z  $.
	$d x y z  $.
	f0_ax-ext $f set x $.
	f1_ax-ext $f set y $.
	f2_ax-ext $f set z $.
	a_ax-ext $a |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $.
$}

$(The Axiom of Extensionality ( ~ ax-ext ) restated so that it postulates
       the existence of a set ` z ` given two arbitrary sets ` x ` and ` y ` .
       This way to express it follows the general idea of the other ZFC axioms,
       which is to postulate the existence of sets given other sets.
       (Contributed by NM, 28-Sep-2003.) $)

${
	$v x y z  $.
	$d x y z  $.
	f0_axext2 $f set x $.
	f1_axext2 $f set y $.
	f2_axext2 $f set z $.
	p_axext2 $p |- E. z ( ( z e. x <-> z e. y ) -> x = y ) $= f0_axext2 f1_axext2 f2_axext2 a_ax-ext f2_axext2 a_sup_set_class f0_axext2 a_sup_set_class a_wcel f2_axext2 a_sup_set_class f1_axext2 a_sup_set_class a_wcel a_wb f0_axext2 a_sup_set_class f1_axext2 a_sup_set_class a_wceq f2_axext2 p_19.36v f2_axext2 a_sup_set_class f0_axext2 a_sup_set_class a_wcel f2_axext2 a_sup_set_class f1_axext2 a_sup_set_class a_wcel a_wb f0_axext2 a_sup_set_class f1_axext2 a_sup_set_class a_wceq a_wi f2_axext2 a_wex f2_axext2 a_sup_set_class f0_axext2 a_sup_set_class a_wcel f2_axext2 a_sup_set_class f1_axext2 a_sup_set_class a_wcel a_wb f2_axext2 a_wal f0_axext2 a_sup_set_class f1_axext2 a_sup_set_class a_wceq a_wi p_mpbir $.
$}

$(A generalization of the Axiom of Extensionality in which ` x ` and ` y `
       need not be distinct.  (Contributed by NM, 15-Sep-1993.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.) $)

${
	$v x y z  $.
	$d z x w  $.
	$d z y w  $.
	f0_axext3 $f set x $.
	f1_axext3 $f set y $.
	f2_axext3 $f set z $.
	i0_axext3 $f set w $.
	p_axext3 $p |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $= i0_axext3 f0_axext3 f2_axext3 p_elequ2 i0_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wceq f2_axext3 a_sup_set_class i0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel p_bibi1d i0_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wceq f2_axext3 a_sup_set_class i0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel a_wb f2_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel a_wb f2_axext3 p_albidv i0_axext3 f0_axext3 f1_axext3 p_equequ1 i0_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wceq f2_axext3 a_sup_set_class i0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel a_wb f2_axext3 a_wal f2_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel a_wb f2_axext3 a_wal i0_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wceq f0_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wceq p_imbi12d i0_axext3 f1_axext3 f2_axext3 a_ax-ext f2_axext3 a_sup_set_class i0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel a_wb f2_axext3 a_wal i0_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wceq a_wi f2_axext3 a_sup_set_class f0_axext3 a_sup_set_class a_wcel f2_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wcel a_wb f2_axext3 a_wal f0_axext3 a_sup_set_class f1_axext3 a_sup_set_class a_wceq a_wi i0_axext3 f0_axext3 p_chvarv $.
$}

$(A bidirectional version of Extensionality.  Although this theorem
       "looks" like it is just a definition of equality, it requires the Axiom
       of Extensionality for its proof under our axiomatization.  See the
       comments for ~ ax-ext and ~ df-cleq .  (Contributed by NM,
       14-Nov-2008.) $)

${
	$v x y z  $.
	$d z x  $.
	$d z y  $.
	f0_axext4 $f set x $.
	f1_axext4 $f set y $.
	f2_axext4 $f set z $.
	p_axext4 $p |- ( x = y <-> A. z ( z e. x <-> z e. y ) ) $= f0_axext4 f1_axext4 f2_axext4 p_elequ2 f0_axext4 a_sup_set_class f1_axext4 a_sup_set_class a_wceq f2_axext4 a_sup_set_class f0_axext4 a_sup_set_class a_wcel f2_axext4 a_sup_set_class f1_axext4 a_sup_set_class a_wcel a_wb f2_axext4 p_alrimiv f0_axext4 f1_axext4 f2_axext4 p_axext3 f0_axext4 a_sup_set_class f1_axext4 a_sup_set_class a_wceq f2_axext4 a_sup_set_class f0_axext4 a_sup_set_class a_wcel f2_axext4 a_sup_set_class f1_axext4 a_sup_set_class a_wcel a_wb f2_axext4 a_wal p_impbii $.
$}

$(Any set defined by a property is the only set defined by that property.
       Theorem 1.1 of [BellMachover] p. 462.  (Contributed by NM,
       30-Jun-1994.) $)

${
	$v ph x y  $.
	$d x y z  $.
	$d ph z  $.
	f0_bm1.1 $f wff ph $.
	f1_bm1.1 $f set x $.
	f2_bm1.1 $f set y $.
	i0_bm1.1 $f set z $.
	e0_bm1.1 $e |- F/ x ph $.
	p_bm1.1 $p |- ( E. x A. y ( y e. x <-> ph ) -> E! x A. y ( y e. x <-> ph ) ) $= f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f1_bm1.1 p_nfv e0_bm1.1 f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 f1_bm1.1 p_nfbi f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f1_bm1.1 f2_bm1.1 p_nfal f1_bm1.1 i0_bm1.1 f2_bm1.1 p_elequ2 f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 p_bibi1d f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 p_albidv f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 i0_bm1.1 p_sbie f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 p_19.26 f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel p_biantr f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb a_wa f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel a_wb f2_bm1.1 p_alimi f1_bm1.1 i0_bm1.1 f2_bm1.1 a_ax-ext f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb a_wa f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel a_wb f2_bm1.1 a_wal f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq p_syl f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal a_wa f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb a_wa f2_bm1.1 a_wal f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq p_sylbir f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 i0_bm1.1 a_wsb f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq p_sylan2b f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 i0_bm1.1 a_wsb a_wa f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq a_wi f1_bm1.1 i0_bm1.1 p_gen2 f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 a_wex f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 i0_bm1.1 a_wsb a_wa f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq a_wi i0_bm1.1 a_wal f1_bm1.1 a_wal p_jctr f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal i0_bm1.1 p_nfv f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 i0_bm1.1 p_eu2 f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 a_wex f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 a_wex f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 i0_bm1.1 a_wsb a_wa f1_bm1.1 a_sup_set_class i0_bm1.1 a_sup_set_class a_wceq a_wi i0_bm1.1 a_wal f1_bm1.1 a_wal a_wa f2_bm1.1 a_sup_set_class f1_bm1.1 a_sup_set_class a_wcel f0_bm1.1 a_wb f2_bm1.1 a_wal f1_bm1.1 a_weu p_sylibr $.
$}


