import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Union/Undefined_values_and_restricted_iota_(description_binder).rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  Functions on ordinals; strictly monotone ordinal functions

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/*The indexed union of a set of ordinal numbers ` B ( x ) ` is an ordinal
       number.  (Contributed by NM, 13-Oct-2003.)  (Revised by Mario Carneiro,
       5-Dec-2016.) */

theorem iunon (x : set, A : class, B : class, V : class) disjointed(x A) {
	prop 1 : wff = |- ( ( A ∈ V ∧ ∀ x ∈ A B ∈ On ) → ⋃_ x ∈ A B ∈ On ) ;;
}

proof of iunon {
	step 1 : wff = dfiun3g () |- ( ∀ x ∈ A B ∈ On → ⋃_ x ∈ A B = ⋃ ran ( x ∈ A ↦ B ) ) ;;
	step 2 : wff = adantl (step 1) |- ( ( A ∈ V ∧ ∀ x ∈ A B ∈ On ) → ⋃_ x ∈ A B = ⋃ ran ( x ∈ A ↦ B ) ) ;;
	step 3 : wff = mptexg () |- ( A ∈ V → ( x ∈ A ↦ B ) ∈ _V ) ;;
	step 4 : wff = rnexg () |- ( ( x ∈ A ↦ B ) ∈ _V → ran ( x ∈ A ↦ B ) ∈ _V ) ;;
	step 5 : wff = syl (step 3, step 4) |- ( A ∈ V → ran ( x ∈ A ↦ B ) ∈ _V ) ;;
	step 6 : wff = eqid () |- ( x ∈ A ↦ B ) = ( x ∈ A ↦ B ) ;;
	step 7 : wff = fmpt (step 6) |- ( ∀ x ∈ A B ∈ On ↔ ( x ∈ A ↦ B ) : A ⟶ On ) ;;
	step 8 : wff = frn () |- ( ( x ∈ A ↦ B ) : A ⟶ On → ran ( x ∈ A ↦ B ) ⊆ On ) ;;
	step 9 : wff = sylbi (step 7, step 8) |- ( ∀ x ∈ A B ∈ On → ran ( x ∈ A ↦ B ) ⊆ On ) ;;
	step 10 : wff = ssonuni () |- ( ran ( x ∈ A ↦ B ) ∈ _V → ( ran ( x ∈ A ↦ B ) ⊆ On → ⋃ ran ( x ∈ A ↦ B ) ∈ On ) ) ;;
	step 11 : wff = imp (step 10) |- ( ( ran ( x ∈ A ↦ B ) ∈ _V ∧ ran ( x ∈ A ↦ B ) ⊆ On ) → ⋃ ran ( x ∈ A ↦ B ) ∈ On ) ;;
	step 12 : wff = syl2an (step 5, step 9, step 11) |- ( ( A ∈ V ∧ ∀ x ∈ A B ∈ On ) → ⋃ ran ( x ∈ A ↦ B ) ∈ On ) ;;
	step 13 : wff = eqeltrd (step 2, step 12) |- ( ( A ∈ V ∧ ∀ x ∈ A B ∈ On ) → ⋃_ x ∈ A B ∈ On ) ;;
	qed prop 1 = step 13 ;;
}

/*The indexed union of a set of ordinal numbers ` B ( x ) ` is an ordinal
       number.  (Contributed by NM, 13-Oct-2003.)  (Revised by Mario Carneiro,
       5-Dec-2016.) */

theorem iunonOLD (x : set, A : class, B : class) disjointed(x A) {
	hyp 1 : wff = |- A ∈ _V ;;
	hyp 2 : wff = |- B ∈ _V ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ∈ A B ∈ On → ⋃_ x ∈ A B ∈ On ) ;;
}

proof of iunonOLD {
	step 1 : wff = iunon () |- ( ( A ∈ _V ∧ ∀ x ∈ A B ∈ On ) → ⋃_ x ∈ A B ∈ On ) ;;
	step 2 : wff = mpan (hyp 1, step 1) |- ( ∀ x ∈ A B ∈ On → ⋃_ x ∈ A B ∈ On ) ;;
	qed prop 1 = step 2 ;;
}

/*The nonempty indexed intersection of a class of ordinal numbers
       ` B ( x ) ` is an ordinal number.  (Contributed by NM, 13-Oct-2003.)
       (Proof shortened by Mario Carneiro, 5-Dec-2016.) */

theorem iinon (x : set, A : class, B : class) disjointed(x A, B) {
	prop 1 : wff = |- ( ( ∀ x ∈ A B ∈ On ∧ A ≠ ∅ ) → ⋂_ x ∈ A B ∈ On ) ;;
}

proof of iinon {
	step 1 : wff = dfiin3g () |- ( ∀ x ∈ A B ∈ On → ⋂_ x ∈ A B = ⋂ ran ( x ∈ A ↦ B ) ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ∀ x ∈ A B ∈ On ∧ A ≠ ∅ ) → ⋂_ x ∈ A B = ⋂ ran ( x ∈ A ↦ B ) ) ;;
	step 3 : wff = eqid () |- ( x ∈ A ↦ B ) = ( x ∈ A ↦ B ) ;;
	step 4 : wff = fmpt (step 3) |- ( ∀ x ∈ A B ∈ On ↔ ( x ∈ A ↦ B ) : A ⟶ On ) ;;
	step 5 : wff = frn () |- ( ( x ∈ A ↦ B ) : A ⟶ On → ran ( x ∈ A ↦ B ) ⊆ On ) ;;
	step 6 : wff = sylbi (step 4, step 5) |- ( ∀ x ∈ A B ∈ On → ran ( x ∈ A ↦ B ) ⊆ On ) ;;
	step 7 : wff = adantr (step 6) |- ( ( ∀ x ∈ A B ∈ On ∧ A ≠ ∅ ) → ran ( x ∈ A ↦ B ) ⊆ On ) ;;
	step 8 : wff = dm0rn0 () |- ( dom ( x ∈ A ↦ B ) = ∅ ↔ ran ( x ∈ A ↦ B ) = ∅ ) ;;
	step 9 : wff = dmmptg () |- ( ∀ x ∈ A B ∈ On → dom ( x ∈ A ↦ B ) = A ) ;;
	step 10 : wff = eqeq1d (step 9) |- ( ∀ x ∈ A B ∈ On → ( dom ( x ∈ A ↦ B ) = ∅ ↔ A = ∅ ) ) ;;
	step 11 : wff = syl5bbr (step 8, step 10) |- ( ∀ x ∈ A B ∈ On → ( ran ( x ∈ A ↦ B ) = ∅ ↔ A = ∅ ) ) ;;
	step 12 : wff = necon3bid (step 11) |- ( ∀ x ∈ A B ∈ On → ( ran ( x ∈ A ↦ B ) ≠ ∅ ↔ A ≠ ∅ ) ) ;;
	step 13 : wff = biimpar (step 12) |- ( ( ∀ x ∈ A B ∈ On ∧ A ≠ ∅ ) → ran ( x ∈ A ↦ B ) ≠ ∅ ) ;;
	step 14 : wff = oninton () |- ( ( ran ( x ∈ A ↦ B ) ⊆ On ∧ ran ( x ∈ A ↦ B ) ≠ ∅ ) → ⋂ ran ( x ∈ A ↦ B ) ∈ On ) ;;
	step 15 : wff = syl2anc (step 7, step 13, step 14) |- ( ( ∀ x ∈ A B ∈ On ∧ A ≠ ∅ ) → ⋂ ran ( x ∈ A ↦ B ) ∈ On ) ;;
	step 16 : wff = eqeltrd (step 2, step 15) |- ( ( ∀ x ∈ A B ∈ On ∧ A ≠ ∅ ) → ⋂_ x ∈ A B ∈ On ) ;;
	qed prop 1 = step 16 ;;
}

/*A property of functions on ordinal numbers.  Generalization of Theorem
       Schema 8E of [Enderton] p. 218.  (Contributed by Eric Schmidt,
       26-May-2009.) */

theorem onfununi (x : set, y : set, S : class, T : class, F : class) disjointed(x y S, x y F, x T) {
	hyp 1 : wff = |- ( Lim y → ( F ` y ) = ⋃_ x ∈ y ( F ` x ) ) ;;
	hyp 2 : wff = |- ( ( x ∈ On ∧ y ∈ On ∧ x ⊆ y ) → ( F ` x ) ⊆ ( F ` y ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( F ` ⋃ S ) = ⋃_ x ∈ S ( F ` x ) ) ;;
}

proof of onfununi {
	step 1 : wff = ssorduni () |- ( S ⊆ On → Ord ⋃ S ) ;;
	step 2 : wff = ad2antrr (step 1) |- ( ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) ∧ S ≠ ∅ ) → Ord ⋃ S ) ;;
	step 3 : wff = nelneq () |- ( ( x ∈ S ∧ ¬ ⋃ S ∈ S ) → ¬ x = ⋃ S ) ;;
	step 4 : wff = elssuni () |- ( x ∈ S → x ⊆ ⋃ S ) ;;
	step 5 : wff = adantl (step 4) |- ( ( S ⊆ On ∧ x ∈ S ) → x ⊆ ⋃ S ) ;;
	step 6 : wff = ssel () |- ( S ⊆ On → ( x ∈ S → x ∈ On ) ) ;;
	step 7 : wff = eloni () |- ( x ∈ On → Ord x ) ;;
	step 8 : wff = syl6 (step 6, step 7) |- ( S ⊆ On → ( x ∈ S → Ord x ) ) ;;
	step 9 : wff = imp (step 8) |- ( ( S ⊆ On ∧ x ∈ S ) → Ord x ) ;;
	step 10 : wff = ssorduni () |- ( S ⊆ On → Ord ⋃ S ) ;;
	step 11 : wff = ordsseleq () |- ( ( Ord x ∧ Ord ⋃ S ) → ( x ⊆ ⋃ S ↔ ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ) ;;
	step 12 : wff = syl2an (step 9, step 10, step 11) |- ( ( ( S ⊆ On ∧ x ∈ S ) ∧ S ⊆ On ) → ( x ⊆ ⋃ S ↔ ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ) ;;
	step 13 : wff = anabss1 (step 12) |- ( ( S ⊆ On ∧ x ∈ S ) → ( x ⊆ ⋃ S ↔ ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ) ;;
	step 14 : wff = mpbid (step 5, step 13) |- ( ( S ⊆ On ∧ x ∈ S ) → ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ;;
	step 15 : wff = ord (step 14) |- ( ( S ⊆ On ∧ x ∈ S ) → ( ¬ x ∈ ⋃ S → x = ⋃ S ) ) ;;
	step 16 : wff = con1d (step 15) |- ( ( S ⊆ On ∧ x ∈ S ) → ( ¬ x = ⋃ S → x ∈ ⋃ S ) ) ;;
	step 17 : wff = syl5 (step 3, step 16) |- ( ( S ⊆ On ∧ x ∈ S ) → ( ( x ∈ S ∧ ¬ ⋃ S ∈ S ) → x ∈ ⋃ S ) ) ;;
	step 18 : wff = exp4b (step 17) |- ( S ⊆ On → ( x ∈ S → ( x ∈ S → ( ¬ ⋃ S ∈ S → x ∈ ⋃ S ) ) ) ) ;;
	step 19 : wff = pm2.43d (step 18) |- ( S ⊆ On → ( x ∈ S → ( ¬ ⋃ S ∈ S → x ∈ ⋃ S ) ) ) ;;
	step 20 : wff = com23 (step 19) |- ( S ⊆ On → ( ¬ ⋃ S ∈ S → ( x ∈ S → x ∈ ⋃ S ) ) ) ;;
	step 21 : wff = imp (step 20) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → ( x ∈ S → x ∈ ⋃ S ) ) ;;
	step 22 : wff = ssrdv (step 21) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → S ⊆ ⋃ S ) ;;
	step 23 : wff = ssn0 () |- ( ( S ⊆ ⋃ S ∧ S ≠ ∅ ) → ⋃ S ≠ ∅ ) ;;
	step 24 : wff = sylan (step 22, step 23) |- ( ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) ∧ S ≠ ∅ ) → ⋃ S ≠ ∅ ) ;;
	step 25 : wff = nelneq () |- ( ( x ∈ S ∧ ¬ ⋃ S ∈ S ) → ¬ x = ⋃ S ) ;;
	step 26 : wff = elssuni () |- ( x ∈ S → x ⊆ ⋃ S ) ;;
	step 27 : wff = adantl (step 26) |- ( ( S ⊆ On ∧ x ∈ S ) → x ⊆ ⋃ S ) ;;
	step 28 : wff = ssel () |- ( S ⊆ On → ( x ∈ S → x ∈ On ) ) ;;
	step 29 : wff = eloni () |- ( x ∈ On → Ord x ) ;;
	step 30 : wff = syl6 (step 28, step 29) |- ( S ⊆ On → ( x ∈ S → Ord x ) ) ;;
	step 31 : wff = imp (step 30) |- ( ( S ⊆ On ∧ x ∈ S ) → Ord x ) ;;
	step 32 : wff = ssorduni () |- ( S ⊆ On → Ord ⋃ S ) ;;
	step 33 : wff = ordsseleq () |- ( ( Ord x ∧ Ord ⋃ S ) → ( x ⊆ ⋃ S ↔ ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ) ;;
	step 34 : wff = syl2an (step 31, step 32, step 33) |- ( ( ( S ⊆ On ∧ x ∈ S ) ∧ S ⊆ On ) → ( x ⊆ ⋃ S ↔ ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ) ;;
	step 35 : wff = anabss1 (step 34) |- ( ( S ⊆ On ∧ x ∈ S ) → ( x ⊆ ⋃ S ↔ ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ) ;;
	step 36 : wff = mpbid (step 27, step 35) |- ( ( S ⊆ On ∧ x ∈ S ) → ( x ∈ ⋃ S ∨ x = ⋃ S ) ) ;;
	step 37 : wff = ord (step 36) |- ( ( S ⊆ On ∧ x ∈ S ) → ( ¬ x ∈ ⋃ S → x = ⋃ S ) ) ;;
	step 38 : wff = con1d (step 37) |- ( ( S ⊆ On ∧ x ∈ S ) → ( ¬ x = ⋃ S → x ∈ ⋃ S ) ) ;;
	step 39 : wff = syl5 (step 25, step 38) |- ( ( S ⊆ On ∧ x ∈ S ) → ( ( x ∈ S ∧ ¬ ⋃ S ∈ S ) → x ∈ ⋃ S ) ) ;;
	step 40 : wff = exp4b (step 39) |- ( S ⊆ On → ( x ∈ S → ( x ∈ S → ( ¬ ⋃ S ∈ S → x ∈ ⋃ S ) ) ) ) ;;
	step 41 : wff = pm2.43d (step 40) |- ( S ⊆ On → ( x ∈ S → ( ¬ ⋃ S ∈ S → x ∈ ⋃ S ) ) ) ;;
	step 42 : wff = com23 (step 41) |- ( S ⊆ On → ( ¬ ⋃ S ∈ S → ( x ∈ S → x ∈ ⋃ S ) ) ) ;;
	step 43 : wff = imp (step 42) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → ( x ∈ S → x ∈ ⋃ S ) ) ;;
	step 44 : wff = ssrdv (step 43) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → S ⊆ ⋃ S ) ;;
	step 45 : wff = uniss () |- ( S ⊆ ⋃ S → ⋃ S ⊆ ⋃ ⋃ S ) ;;
	step 46 : wff = syl (step 44, step 45) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → ⋃ S ⊆ ⋃ ⋃ S ) ;;
	step 47 : wff = ssorduni () |- ( S ⊆ On → Ord ⋃ S ) ;;
	step 48 : wff = orduniss () |- ( Ord ⋃ S → ⋃ ⋃ S ⊆ ⋃ S ) ;;
	step 49 : wff = syl (step 47, step 48) |- ( S ⊆ On → ⋃ ⋃ S ⊆ ⋃ S ) ;;
	step 50 : wff = adantr (step 49) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → ⋃ ⋃ S ⊆ ⋃ S ) ;;
	step 51 : wff = eqssd (step 46, step 50) |- ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) → ⋃ S = ⋃ ⋃ S ) ;;
	step 52 : wff = adantr (step 51) |- ( ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) ∧ S ≠ ∅ ) → ⋃ S = ⋃ ⋃ S ) ;;
	step 53 : wff = df-lim () |- ( Lim ⋃ S ↔ ( Ord ⋃ S ∧ ⋃ S ≠ ∅ ∧ ⋃ S = ⋃ ⋃ S ) ) ;;
	step 54 : wff = syl3anbrc (step 2, step 24, step 52, step 53) |- ( ( ( S ⊆ On ∧ ¬ ⋃ S ∈ S ) ∧ S ≠ ∅ ) → Lim ⋃ S ) ;;
	step 55 : wff = an32s (step 54) |- ( ( ( S ⊆ On ∧ S ≠ ∅ ) ∧ ¬ ⋃ S ∈ S ) → Lim ⋃ S ) ;;
	step 56 : wff = 3adantl1 (step 55) |- ( ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) ∧ ¬ ⋃ S ∈ S ) → Lim ⋃ S ) ;;
	step 57 : wff = ssonuni () |- ( S ∈ T → ( S ⊆ On → ⋃ S ∈ On ) ) ;;
	step 58 : wff = limeq () |- ( y = ⋃ S → ( Lim y ↔ Lim ⋃ S ) ) ;;
	step 59 : wff = fveq2 () |- ( y = ⋃ S → ( F ` y ) = ( F ` ⋃ S ) ) ;;
	step 60 : wff = iuneq1 () |- ( y = ⋃ S → ⋃_ x ∈ y ( F ` x ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ;;
	step 61 : wff = eqeq12d (step 59, step 60) |- ( y = ⋃ S → ( ( F ` y ) = ⋃_ x ∈ y ( F ` x ) ↔ ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ;;
	step 62 : wff = imbi12d (step 58, step 61) |- ( y = ⋃ S → ( ( Lim y → ( F ` y ) = ⋃_ x ∈ y ( F ` x ) ) ↔ ( Lim ⋃ S → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ) ;;
	step 63 : wff = vtoclg (step 62, hyp 1) |- ( ⋃ S ∈ On → ( Lim ⋃ S → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ;;
	step 64 : wff = syl6 (step 57, step 63) |- ( S ∈ T → ( S ⊆ On → ( Lim ⋃ S → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ) ;;
	step 65 : wff = imp (step 64) |- ( ( S ∈ T ∧ S ⊆ On ) → ( Lim ⋃ S → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ;;
	step 66 : wff = 3adant3 (step 65) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( Lim ⋃ S → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ;;
	step 67 : wff = adantr (step 66) |- ( ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) ∧ ¬ ⋃ S ∈ S ) → ( Lim ⋃ S → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ) ;;
	step 68 : wff = mpd (step 56, step 67) |- ( ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) ∧ ¬ ⋃ S ∈ S ) → ( F ` ⋃ S ) = ⋃_ x ∈ ⋃ S ( F ` x ) ) ;;
	step 69 : wff = eluni2 () |- ( x ∈ ⋃ S ↔ ∃ y ∈ S x ∈ y ) ;;
	step 70 : wff = ssel () |- ( S ⊆ On → ( y ∈ S → y ∈ On ) ) ;;
	step 71 : wff = anim1d (step 70) |- ( S ⊆ On → ( ( y ∈ S ∧ x ∈ y ) → ( y ∈ On ∧ x ∈ y ) ) ) ;;
	step 72 : wff = onelon () |- ( ( y ∈ On ∧ x ∈ y ) → x ∈ On ) ;;
	step 73 : wff = syl6 (step 71, step 72) |- ( S ⊆ On → ( ( y ∈ S ∧ x ∈ y ) → x ∈ On ) ) ;;
	step 74 : wff = ssel () |- ( S ⊆ On → ( y ∈ S → y ∈ On ) ) ;;
	step 75 : wff = adantrd (step 74) |- ( S ⊆ On → ( ( y ∈ S ∧ x ∈ y ) → y ∈ On ) ) ;;
	step 76 : wff = ssel () |- ( S ⊆ On → ( y ∈ S → y ∈ On ) ) ;;
	step 77 : wff = eloni () |- ( y ∈ On → Ord y ) ;;
	step 78 : wff = syl6 (step 76, step 77) |- ( S ⊆ On → ( y ∈ S → Ord y ) ) ;;
	step 79 : wff = ordelss () |- ( ( Ord y ∧ x ∈ y ) → x ⊆ y ) ;;
	step 80 : wff = a1i (step 79) |- ( S ⊆ On → ( ( Ord y ∧ x ∈ y ) → x ⊆ y ) ) ;;
	step 81 : wff = syland (step 78, step 80) |- ( S ⊆ On → ( ( y ∈ S ∧ x ∈ y ) → x ⊆ y ) ) ;;
	step 82 : wff = 3jcad (step 73, step 75, step 81) |- ( S ⊆ On → ( ( y ∈ S ∧ x ∈ y ) → ( x ∈ On ∧ y ∈ On ∧ x ⊆ y ) ) ) ;;
	step 83 : wff = syl6 (step 82, hyp 2) |- ( S ⊆ On → ( ( y ∈ S ∧ x ∈ y ) → ( F ` x ) ⊆ ( F ` y ) ) ) ;;
	step 84 : wff = exp3a (step 83) |- ( S ⊆ On → ( y ∈ S → ( x ∈ y → ( F ` x ) ⊆ ( F ` y ) ) ) ) ;;
	step 85 : wff = reximdvai (step 84) |- ( S ⊆ On → ( ∃ y ∈ S x ∈ y → ∃ y ∈ S ( F ` x ) ⊆ ( F ` y ) ) ) ;;
	step 86 : wff = syl5bi (step 69, step 85) |- ( S ⊆ On → ( x ∈ ⋃ S → ∃ y ∈ S ( F ` x ) ⊆ ( F ` y ) ) ) ;;
	step 87 : wff = ssiun () |- ( ∃ y ∈ S ( F ` x ) ⊆ ( F ` y ) → ( F ` x ) ⊆ ⋃_ y ∈ S ( F ` y ) ) ;;
	step 88 : wff = syl6 (step 86, step 87) |- ( S ⊆ On → ( x ∈ ⋃ S → ( F ` x ) ⊆ ⋃_ y ∈ S ( F ` y ) ) ) ;;
	step 89 : wff = ralrimiv (step 88) |- ( S ⊆ On → ∀ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ y ∈ S ( F ` y ) ) ;;
	step 90 : wff = iunss () |- ( ⋃_ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ y ∈ S ( F ` y ) ↔ ∀ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ y ∈ S ( F ` y ) ) ;;
	step 91 : wff = sylibr (step 89, step 90) |- ( S ⊆ On → ⋃_ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ y ∈ S ( F ` y ) ) ;;
	step 92 : wff = fveq2 () |- ( y = x → ( F ` y ) = ( F ` x ) ) ;;
	step 93 : wff = cbviunv (step 92) |- ⋃_ y ∈ S ( F ` y ) = ⋃_ x ∈ S ( F ` x ) ;;
	step 94 : wff = syl6sseq (step 91, step 93) |- ( S ⊆ On → ⋃_ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ;;
	step 95 : wff = 3ad2ant2 (step 94) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ⋃_ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ;;
	step 96 : wff = adantr (step 95) |- ( ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) ∧ ¬ ⋃ S ∈ S ) → ⋃_ x ∈ ⋃ S ( F ` x ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ;;
	step 97 : wff = eqsstrd (step 68, step 96) |- ( ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) ∧ ¬ ⋃ S ∈ S ) → ( F ` ⋃ S ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ;;
	step 98 : wff = ex (step 97) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( ¬ ⋃ S ∈ S → ( F ` ⋃ S ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ) ;;
	step 99 : wff = fveq2 () |- ( x = ⋃ S → ( F ` x ) = ( F ` ⋃ S ) ) ;;
	step 100 : wff = ssiun2s (step 99) |- ( ⋃ S ∈ S → ( F ` ⋃ S ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ;;
	step 101 : wff = pm2.61d2 (step 98, step 100) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( F ` ⋃ S ) ⊆ ⋃_ x ∈ S ( F ` x ) ) ;;
	step 102 : wff = ssonuni () |- ( S ∈ T → ( S ⊆ On → ⋃ S ∈ On ) ) ;;
	step 103 : wff = imp (step 102) |- ( ( S ∈ T ∧ S ⊆ On ) → ⋃ S ∈ On ) ;;
	step 104 : wff = 3adant3 (step 103) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ⋃ S ∈ On ) ;;
	step 105 : wff = ssel () |- ( S ⊆ On → ( x ∈ S → x ∈ On ) ) ;;
	step 106 : wff = 3ad2ant2 (step 105) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( x ∈ S → x ∈ On ) ) ;;
	step 107 : wff = elssuni () |- ( x ∈ S → x ⊆ ⋃ S ) ;;
	step 108 : wff = a1i (step 107) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( x ∈ S → x ⊆ ⋃ S ) ) ;;
	step 109 : wff = jcad (step 106, step 108) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( x ∈ S → ( x ∈ On ∧ x ⊆ ⋃ S ) ) ) ;;
	step 110 : wff = sseq2 () |- ( y = ⋃ S → ( x ⊆ y ↔ x ⊆ ⋃ S ) ) ;;
	step 111 : wff = anbi2d (step 110) |- ( y = ⋃ S → ( ( x ∈ On ∧ x ⊆ y ) ↔ ( x ∈ On ∧ x ⊆ ⋃ S ) ) ) ;;
	step 112 : wff = fveq2 () |- ( y = ⋃ S → ( F ` y ) = ( F ` ⋃ S ) ) ;;
	step 113 : wff = sseq2d (step 112) |- ( y = ⋃ S → ( ( F ` x ) ⊆ ( F ` y ) ↔ ( F ` x ) ⊆ ( F ` ⋃ S ) ) ) ;;
	step 114 : wff = imbi12d (step 111, step 113) |- ( y = ⋃ S → ( ( ( x ∈ On ∧ x ⊆ y ) → ( F ` x ) ⊆ ( F ` y ) ) ↔ ( ( x ∈ On ∧ x ⊆ ⋃ S ) → ( F ` x ) ⊆ ( F ` ⋃ S ) ) ) ) ;;
	step 115 : wff = 3com12 (hyp 2) |- ( ( y ∈ On ∧ x ∈ On ∧ x ⊆ y ) → ( F ` x ) ⊆ ( F ` y ) ) ;;
	step 116 : wff = 3expib (step 115) |- ( y ∈ On → ( ( x ∈ On ∧ x ⊆ y ) → ( F ` x ) ⊆ ( F ` y ) ) ) ;;
	step 117 : wff = vtoclga (step 114, step 116) |- ( ⋃ S ∈ On → ( ( x ∈ On ∧ x ⊆ ⋃ S ) → ( F ` x ) ⊆ ( F ` ⋃ S ) ) ) ;;
	step 118 : wff = sylsyld (step 104, step 109, step 117) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( x ∈ S → ( F ` x ) ⊆ ( F ` ⋃ S ) ) ) ;;
	step 119 : wff = ralrimiv (step 118) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ∀ x ∈ S ( F ` x ) ⊆ ( F ` ⋃ S ) ) ;;
	step 120 : wff = iunss () |- ( ⋃_ x ∈ S ( F ` x ) ⊆ ( F ` ⋃ S ) ↔ ∀ x ∈ S ( F ` x ) ⊆ ( F ` ⋃ S ) ) ;;
	step 121 : wff = sylibr (step 119, step 120) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ⋃_ x ∈ S ( F ` x ) ⊆ ( F ` ⋃ S ) ) ;;
	step 122 : wff = eqssd (step 101, step 121) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( F ` ⋃ S ) = ⋃_ x ∈ S ( F ` x ) ) ;;
	qed prop 1 = step 122 ;;
}

/*A variant of ~ onfununi for operations.  (Contributed by Eric Schmidt,
         26-May-2009.)  (Revised by Mario Carneiro, 11-Sep-2015.) */

theorem onovuni (x : set, y : set, A : class, S : class, T : class, F : class) disjointed(x y z A, x y z F, x y z, x y, x y z S, T, x T) {
	hyp 1 : wff = |- ( Lim y → ( A F y ) = ⋃_ x ∈ y ( A F x ) ) ;;
	hyp 2 : wff = |- ( ( x ∈ On ∧ y ∈ On ∧ x ⊆ y ) → ( A F x ) ⊆ ( A F y ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( A F ⋃ S ) = ⋃_ x ∈ S ( A F x ) ) ;;
}

proof of onovuni {
	var z : set;;
	step 1 : wff = vex () |- y ∈ _V ;;
	step 2 : wff = oveq2 () |- ( z = y → ( A F z ) = ( A F y ) ) ;;
	step 3 : wff = eqid () |- ( z ∈ _V ↦ ( A F z ) ) = ( z ∈ _V ↦ ( A F z ) ) ;;
	step 4 : wff = ovex () |- ( A F y ) ∈ _V ;;
	step 5 : wff = fvmpt (step 2, step 3, step 4) |- ( y ∈ _V → ( ( z ∈ _V ↦ ( A F z ) ) ` y ) = ( A F y ) ) ;;
	step 6 : wff = ax-mp (step 1, step 5) |- ( ( z ∈ _V ↦ ( A F z ) ) ` y ) = ( A F y ) ;;
	step 7 : wff = vex () |- x ∈ _V ;;
	step 8 : wff = oveq2 () |- ( z = x → ( A F z ) = ( A F x ) ) ;;
	step 9 : wff = eqid () |- ( z ∈ _V ↦ ( A F z ) ) = ( z ∈ _V ↦ ( A F z ) ) ;;
	step 10 : wff = ovex () |- ( A F x ) ∈ _V ;;
	step 11 : wff = fvmpt (step 8, step 9, step 10) |- ( x ∈ _V → ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ) ;;
	step 12 : wff = ax-mp (step 7, step 11) |- ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ;;
	step 13 : wff = a1i (step 12) |- ( x ∈ y → ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ) ;;
	step 14 : wff = iuneq2i (step 13) |- ⋃_ x ∈ y ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ⋃_ x ∈ y ( A F x ) ;;
	step 15 : wff = 3eqtr4g (hyp 1, step 6, step 14) |- ( Lim y → ( ( z ∈ _V ↦ ( A F z ) ) ` y ) = ⋃_ x ∈ y ( ( z ∈ _V ↦ ( A F z ) ) ` x ) ) ;;
	step 16 : wff = vex () |- x ∈ _V ;;
	step 17 : wff = oveq2 () |- ( z = x → ( A F z ) = ( A F x ) ) ;;
	step 18 : wff = eqid () |- ( z ∈ _V ↦ ( A F z ) ) = ( z ∈ _V ↦ ( A F z ) ) ;;
	step 19 : wff = ovex () |- ( A F x ) ∈ _V ;;
	step 20 : wff = fvmpt (step 17, step 18, step 19) |- ( x ∈ _V → ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ) ;;
	step 21 : wff = ax-mp (step 16, step 20) |- ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ;;
	step 22 : wff = vex () |- y ∈ _V ;;
	step 23 : wff = oveq2 () |- ( z = y → ( A F z ) = ( A F y ) ) ;;
	step 24 : wff = eqid () |- ( z ∈ _V ↦ ( A F z ) ) = ( z ∈ _V ↦ ( A F z ) ) ;;
	step 25 : wff = ovex () |- ( A F y ) ∈ _V ;;
	step 26 : wff = fvmpt (step 23, step 24, step 25) |- ( y ∈ _V → ( ( z ∈ _V ↦ ( A F z ) ) ` y ) = ( A F y ) ) ;;
	step 27 : wff = ax-mp (step 22, step 26) |- ( ( z ∈ _V ↦ ( A F z ) ) ` y ) = ( A F y ) ;;
	step 28 : wff = 3sstr4g (hyp 2, step 21, step 27) |- ( ( x ∈ On ∧ y ∈ On ∧ x ⊆ y ) → ( ( z ∈ _V ↦ ( A F z ) ) ` x ) ⊆ ( ( z ∈ _V ↦ ( A F z ) ) ` y ) ) ;;
	step 29 : wff = onfununi (step 15, step 28) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( ( z ∈ _V ↦ ( A F z ) ) ` ⋃ S ) = ⋃_ x ∈ S ( ( z ∈ _V ↦ ( A F z ) ) ` x ) ) ;;
	step 30 : wff = uniexg () |- ( S ∈ T → ⋃ S ∈ _V ) ;;
	step 31 : wff = oveq2 () |- ( z = ⋃ S → ( A F z ) = ( A F ⋃ S ) ) ;;
	step 32 : wff = eqid () |- ( z ∈ _V ↦ ( A F z ) ) = ( z ∈ _V ↦ ( A F z ) ) ;;
	step 33 : wff = ovex () |- ( A F ⋃ S ) ∈ _V ;;
	step 34 : wff = fvmpt (step 31, step 32, step 33) |- ( ⋃ S ∈ _V → ( ( z ∈ _V ↦ ( A F z ) ) ` ⋃ S ) = ( A F ⋃ S ) ) ;;
	step 35 : wff = syl (step 30, step 34) |- ( S ∈ T → ( ( z ∈ _V ↦ ( A F z ) ) ` ⋃ S ) = ( A F ⋃ S ) ) ;;
	step 36 : wff = 3ad2ant1 (step 35) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( ( z ∈ _V ↦ ( A F z ) ) ` ⋃ S ) = ( A F ⋃ S ) ) ;;
	step 37 : wff = vex () |- x ∈ _V ;;
	step 38 : wff = oveq2 () |- ( z = x → ( A F z ) = ( A F x ) ) ;;
	step 39 : wff = eqid () |- ( z ∈ _V ↦ ( A F z ) ) = ( z ∈ _V ↦ ( A F z ) ) ;;
	step 40 : wff = ovex () |- ( A F x ) ∈ _V ;;
	step 41 : wff = fvmpt (step 38, step 39, step 40) |- ( x ∈ _V → ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ) ;;
	step 42 : wff = ax-mp (step 37, step 41) |- ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ;;
	step 43 : wff = a1i (step 42) |- ( x ∈ S → ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ( A F x ) ) ;;
	step 44 : wff = iuneq2i (step 43) |- ⋃_ x ∈ S ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ⋃_ x ∈ S ( A F x ) ;;
	step 45 : wff = a1i (step 44) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ⋃_ x ∈ S ( ( z ∈ _V ↦ ( A F z ) ) ` x ) = ⋃_ x ∈ S ( A F x ) ) ;;
	step 46 : wff = 3eqtr3d (step 29, step 36, step 45) |- ( ( S ∈ T ∧ S ⊆ On ∧ S ≠ ∅ ) → ( A F ⋃ S ) = ⋃_ x ∈ S ( A F x ) ) ;;
	qed prop 1 = step 46 ;;
}

/*A variant of ~ onovuni with indexed unions.  (Contributed by Eric
       Schmidt, 26-May-2009.)  (Proof shortened by Mario Carneiro,
       5-Dec-2016.) */

theorem onoviun (x : set, y : set, z : set, A : class, T : class, F : class, K : class, L : class) disjointed(w x y z A, w x y z F, w x y z K, w x y L, w x y z, w T) {
	hyp 1 : wff = |- ( Lim y → ( A F y ) = ⋃_ x ∈ y ( A F x ) ) ;;
	hyp 2 : wff = |- ( ( x ∈ On ∧ y ∈ On ∧ x ⊆ y ) → ( A F x ) ⊆ ( A F y ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( A F ⋃_ z ∈ K L ) = ⋃_ z ∈ K ( A F L ) ) ;;
}

proof of onoviun {
	var w : set;;
	step 1 : wff = dfiun3g () |- ( ∀ z ∈ K L ∈ On → ⋃_ z ∈ K L = ⋃ ran ( z ∈ K ↦ L ) ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ⋃_ z ∈ K L = ⋃ ran ( z ∈ K ↦ L ) ) ;;
	step 3 : wff = oveq2d (step 2) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( A F ⋃_ z ∈ K L ) = ( A F ⋃ ran ( z ∈ K ↦ L ) ) ) ;;
	step 4 : wff = simp1 () |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → K ∈ T ) ;;
	step 5 : wff = mptexg () |- ( K ∈ T → ( z ∈ K ↦ L ) ∈ _V ) ;;
	step 6 : wff = rnexg () |- ( ( z ∈ K ↦ L ) ∈ _V → ran ( z ∈ K ↦ L ) ∈ _V ) ;;
	step 7 : wff = 3syl (step 4, step 5, step 6) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ran ( z ∈ K ↦ L ) ∈ _V ) ;;
	step 8 : wff = simp2 () |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ∀ z ∈ K L ∈ On ) ;;
	step 9 : wff = eqid () |- ( z ∈ K ↦ L ) = ( z ∈ K ↦ L ) ;;
	step 10 : wff = fmpt (step 9) |- ( ∀ z ∈ K L ∈ On ↔ ( z ∈ K ↦ L ) : K ⟶ On ) ;;
	step 11 : wff = sylib (step 8, step 10) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( z ∈ K ↦ L ) : K ⟶ On ) ;;
	step 12 : wff = frn () |- ( ( z ∈ K ↦ L ) : K ⟶ On → ran ( z ∈ K ↦ L ) ⊆ On ) ;;
	step 13 : wff = syl (step 11, step 12) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ran ( z ∈ K ↦ L ) ⊆ On ) ;;
	step 14 : wff = dmmptg () |- ( ∀ z ∈ K L ∈ On → dom ( z ∈ K ↦ L ) = K ) ;;
	step 15 : wff = 3ad2ant2 (step 14) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → dom ( z ∈ K ↦ L ) = K ) ;;
	step 16 : wff = simp3 () |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → K ≠ ∅ ) ;;
	step 17 : wff = eqnetrd (step 15, step 16) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → dom ( z ∈ K ↦ L ) ≠ ∅ ) ;;
	step 18 : wff = dm0rn0 () |- ( dom ( z ∈ K ↦ L ) = ∅ ↔ ran ( z ∈ K ↦ L ) = ∅ ) ;;
	step 19 : wff = necon3bii (step 18) |- ( dom ( z ∈ K ↦ L ) ≠ ∅ ↔ ran ( z ∈ K ↦ L ) ≠ ∅ ) ;;
	step 20 : wff = sylib (step 17, step 19) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ran ( z ∈ K ↦ L ) ≠ ∅ ) ;;
	step 21 : wff = onovuni (hyp 1, hyp 2) |- ( ( ran ( z ∈ K ↦ L ) ∈ _V ∧ ran ( z ∈ K ↦ L ) ⊆ On ∧ ran ( z ∈ K ↦ L ) ≠ ∅ ) → ( A F ⋃ ran ( z ∈ K ↦ L ) ) = ⋃_ x ∈ ran ( z ∈ K ↦ L ) ( A F x ) ) ;;
	step 22 : wff = syl3anc (step 7, step 13, step 20, step 21) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( A F ⋃ ran ( z ∈ K ↦ L ) ) = ⋃_ x ∈ ran ( z ∈ K ↦ L ) ( A F x ) ) ;;
	step 23 : wff = eqid () |- ( z ∈ K ↦ L ) = ( z ∈ K ↦ L ) ;;
	step 24 : wff = oveq2 () |- ( x = L → ( A F x ) = ( A F L ) ) ;;
	step 25 : wff = eleq2d (step 24) |- ( x = L → ( w ∈ ( A F x ) ↔ w ∈ ( A F L ) ) ) ;;
	step 26 : wff = rexrnmpt (step 23, step 25) |- ( ∀ z ∈ K L ∈ On → ( ∃ x ∈ ran ( z ∈ K ↦ L ) w ∈ ( A F x ) ↔ ∃ z ∈ K w ∈ ( A F L ) ) ) ;;
	step 27 : wff = 3ad2ant2 (step 26) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( ∃ x ∈ ran ( z ∈ K ↦ L ) w ∈ ( A F x ) ↔ ∃ z ∈ K w ∈ ( A F L ) ) ) ;;
	step 28 : wff = eliun () |- ( w ∈ ⋃_ x ∈ ran ( z ∈ K ↦ L ) ( A F x ) ↔ ∃ x ∈ ran ( z ∈ K ↦ L ) w ∈ ( A F x ) ) ;;
	step 29 : wff = eliun () |- ( w ∈ ⋃_ z ∈ K ( A F L ) ↔ ∃ z ∈ K w ∈ ( A F L ) ) ;;
	step 30 : wff = 3bitr4g (step 27, step 28, step 29) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( w ∈ ⋃_ x ∈ ran ( z ∈ K ↦ L ) ( A F x ) ↔ w ∈ ⋃_ z ∈ K ( A F L ) ) ) ;;
	step 31 : wff = eqrdv (step 30) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ⋃_ x ∈ ran ( z ∈ K ↦ L ) ( A F x ) = ⋃_ z ∈ K ( A F L ) ) ;;
	step 32 : wff = 3eqtrd (step 3, step 22, step 31) |- ( ( K ∈ T ∧ ∀ z ∈ K L ∈ On ∧ K ≠ ∅ ) → ( A F ⋃_ z ∈ K L ) = ⋃_ z ∈ K ( A F L ) ) ;;
	qed prop 1 = step 32 ;;
}

/*There are no length ` om ` decreasing sequences in the ordinals.  See
       also ~ noinfep for a stronger version assuming Regularity.  (Contributed
       by Mario Carneiro, 19-May-2015.) */

theorem onnseq (x : set, F : class) disjointed(w x y z F) {
	prop 1 : wff = |- ( ( F ` ∅ ) ∈ On → ∃ x ∈ ω ¬ ( F ` suc x ) ∈ ( F ` x ) ) ;;
}

proof of onnseq {
	var y : set, z : set, w : set;;
	step 1 : wff = epweon () |- 𝛜 We On ;;
	step 2 : wff = a1i (step 1) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → 𝛜 We On ) ;;
	step 3 : wff = fveq2 () |- ( y = ∅ → ( F ` y ) = ( F ` ∅ ) ) ;;
	step 4 : wff = eleq1d (step 3) |- ( y = ∅ → ( ( F ` y ) ∈ On ↔ ( F ` ∅ ) ∈ On ) ) ;;
	step 5 : wff = fveq2 () |- ( y = z → ( F ` y ) = ( F ` z ) ) ;;
	step 6 : wff = eleq1d (step 5) |- ( y = z → ( ( F ` y ) ∈ On ↔ ( F ` z ) ∈ On ) ) ;;
	step 7 : wff = fveq2 () |- ( y = suc z → ( F ` y ) = ( F ` suc z ) ) ;;
	step 8 : wff = eleq1d (step 7) |- ( y = suc z → ( ( F ` y ) ∈ On ↔ ( F ` suc z ) ∈ On ) ) ;;
	step 9 : wff = simpl () |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( F ` ∅ ) ∈ On ) ;;
	step 10 : wff = suceq () |- ( x = z → suc x = suc z ) ;;
	step 11 : wff = fveq2d (step 10) |- ( x = z → ( F ` suc x ) = ( F ` suc z ) ) ;;
	step 12 : wff = fveq2 () |- ( x = z → ( F ` x ) = ( F ` z ) ) ;;
	step 13 : wff = eleq12d (step 11, step 12) |- ( x = z → ( ( F ` suc x ) ∈ ( F ` x ) ↔ ( F ` suc z ) ∈ ( F ` z ) ) ) ;;
	step 14 : wff = rspcv (step 13) |- ( z ∈ ω → ( ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) → ( F ` suc z ) ∈ ( F ` z ) ) ) ;;
	step 15 : wff = onelon () |- ( ( ( F ` z ) ∈ On ∧ ( F ` suc z ) ∈ ( F ` z ) ) → ( F ` suc z ) ∈ On ) ;;
	step 16 : wff = expcom (step 15) |- ( ( F ` suc z ) ∈ ( F ` z ) → ( ( F ` z ) ∈ On → ( F ` suc z ) ∈ On ) ) ;;
	step 17 : wff = syl6 (step 14, step 16) |- ( z ∈ ω → ( ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) → ( ( F ` z ) ∈ On → ( F ` suc z ) ∈ On ) ) ) ;;
	step 18 : wff = adantld (step 17) |- ( z ∈ ω → ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( ( F ` z ) ∈ On → ( F ` suc z ) ∈ On ) ) ) ;;
	step 19 : wff = finds2 (step 4, step 6, step 8, step 9, step 18) |- ( y ∈ ω → ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( F ` y ) ∈ On ) ) ;;
	step 20 : wff = com12 (step 19) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( y ∈ ω → ( F ` y ) ∈ On ) ) ;;
	step 21 : wff = ralrimiv (step 20) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ∀ y ∈ ω ( F ` y ) ∈ On ) ;;
	step 22 : wff = eqid () |- ( y ∈ ω ↦ ( F ` y ) ) = ( y ∈ ω ↦ ( F ` y ) ) ;;
	step 23 : wff = fmpt (step 22) |- ( ∀ y ∈ ω ( F ` y ) ∈ On ↔ ( y ∈ ω ↦ ( F ` y ) ) : ω ⟶ On ) ;;
	step 24 : wff = sylib (step 21, step 23) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( y ∈ ω ↦ ( F ` y ) ) : ω ⟶ On ) ;;
	step 25 : wff = frn () |- ( ( y ∈ ω ↦ ( F ` y ) ) : ω ⟶ On → ran ( y ∈ ω ↦ ( F ` y ) ) ⊆ On ) ;;
	step 26 : wff = syl (step 24, step 25) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ran ( y ∈ ω ↦ ( F ` y ) ) ⊆ On ) ;;
	step 27 : wff = peano1 () |- ∅ ∈ ω ;;
	step 28 : wff = fveq2 () |- ( y = ∅ → ( F ` y ) = ( F ` ∅ ) ) ;;
	step 29 : wff = eleq1d (step 28) |- ( y = ∅ → ( ( F ` y ) ∈ On ↔ ( F ` ∅ ) ∈ On ) ) ;;
	step 30 : wff = fveq2 () |- ( y = z → ( F ` y ) = ( F ` z ) ) ;;
	step 31 : wff = eleq1d (step 30) |- ( y = z → ( ( F ` y ) ∈ On ↔ ( F ` z ) ∈ On ) ) ;;
	step 32 : wff = fveq2 () |- ( y = suc z → ( F ` y ) = ( F ` suc z ) ) ;;
	step 33 : wff = eleq1d (step 32) |- ( y = suc z → ( ( F ` y ) ∈ On ↔ ( F ` suc z ) ∈ On ) ) ;;
	step 34 : wff = simpl () |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( F ` ∅ ) ∈ On ) ;;
	step 35 : wff = suceq () |- ( x = z → suc x = suc z ) ;;
	step 36 : wff = fveq2d (step 35) |- ( x = z → ( F ` suc x ) = ( F ` suc z ) ) ;;
	step 37 : wff = fveq2 () |- ( x = z → ( F ` x ) = ( F ` z ) ) ;;
	step 38 : wff = eleq12d (step 36, step 37) |- ( x = z → ( ( F ` suc x ) ∈ ( F ` x ) ↔ ( F ` suc z ) ∈ ( F ` z ) ) ) ;;
	step 39 : wff = rspcv (step 38) |- ( z ∈ ω → ( ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) → ( F ` suc z ) ∈ ( F ` z ) ) ) ;;
	step 40 : wff = onelon () |- ( ( ( F ` z ) ∈ On ∧ ( F ` suc z ) ∈ ( F ` z ) ) → ( F ` suc z ) ∈ On ) ;;
	step 41 : wff = expcom (step 40) |- ( ( F ` suc z ) ∈ ( F ` z ) → ( ( F ` z ) ∈ On → ( F ` suc z ) ∈ On ) ) ;;
	step 42 : wff = syl6 (step 39, step 41) |- ( z ∈ ω → ( ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) → ( ( F ` z ) ∈ On → ( F ` suc z ) ∈ On ) ) ) ;;
	step 43 : wff = adantld (step 42) |- ( z ∈ ω → ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( ( F ` z ) ∈ On → ( F ` suc z ) ∈ On ) ) ) ;;
	step 44 : wff = finds2 (step 29, step 31, step 33, step 34, step 43) |- ( y ∈ ω → ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( F ` y ) ∈ On ) ) ;;
	step 45 : wff = com12 (step 44) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( y ∈ ω → ( F ` y ) ∈ On ) ) ;;
	step 46 : wff = ralrimiv (step 45) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ∀ y ∈ ω ( F ` y ) ∈ On ) ;;
	step 47 : wff = eqid () |- ( y ∈ ω ↦ ( F ` y ) ) = ( y ∈ ω ↦ ( F ` y ) ) ;;
	step 48 : wff = fmpt (step 47) |- ( ∀ y ∈ ω ( F ` y ) ∈ On ↔ ( y ∈ ω ↦ ( F ` y ) ) : ω ⟶ On ) ;;
	step 49 : wff = sylib (step 46, step 48) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ( y ∈ ω ↦ ( F ` y ) ) : ω ⟶ On ) ;;
	step 50 : wff = fdm () |- ( ( y ∈ ω ↦ ( F ` y ) ) : ω ⟶ On → dom ( y ∈ ω ↦ ( F ` y ) ) = ω ) ;;
	step 51 : wff = syl (step 49, step 50) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → dom ( y ∈ ω ↦ ( F ` y ) ) = ω ) ;;
	step 52 : wff = syl5eleqr (step 27, step 51) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ∅ ∈ dom ( y ∈ ω ↦ ( F ` y ) ) ) ;;
	step 53 : wff = ne0i () |- ( ∅ ∈ dom ( y ∈ ω ↦ ( F ` y ) ) → dom ( y ∈ ω ↦ ( F ` y ) ) ≠ ∅ ) ;;
	step 54 : wff = syl (step 52, step 53) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → dom ( y ∈ ω ↦ ( F ` y ) ) ≠ ∅ ) ;;
	step 55 : wff = dm0rn0 () |- ( dom ( y ∈ ω ↦ ( F ` y ) ) = ∅ ↔ ran ( y ∈ ω ↦ ( F ` y ) ) = ∅ ) ;;
	step 56 : wff = necon3bii (step 55) |- ( dom ( y ∈ ω ↦ ( F ` y ) ) ≠ ∅ ↔ ran ( y ∈ ω ↦ ( F ` y ) ) ≠ ∅ ) ;;
	step 57 : wff = sylib (step 54, step 56) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ran ( y ∈ ω ↦ ( F ` y ) ) ≠ ∅ ) ;;
	step 58 : wff = wefrc () |- ( ( 𝛜 We On ∧ ran ( y ∈ ω ↦ ( F ` y ) ) ⊆ On ∧ ran ( y ∈ ω ↦ ( F ` y ) ) ≠ ∅ ) → ∃ z ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ z ) = ∅ ) ;;
	step 59 : wff = syl3anc (step 2, step 26, step 57, step 58) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ∃ z ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ z ) = ∅ ) ;;
	step 60 : wff = fvex () |- ( F ` w ) ∈ _V ;;
	step 61 : wff = rgenw (step 60) |- ∀ w ∈ ω ( F ` w ) ∈ _V ;;
	step 62 : wff = fveq2 () |- ( y = w → ( F ` y ) = ( F ` w ) ) ;;
	step 63 : wff = cbvmptv (step 62) |- ( y ∈ ω ↦ ( F ` y ) ) = ( w ∈ ω ↦ ( F ` w ) ) ;;
	step 64 : wff = ineq2 () |- ( z = ( F ` w ) → ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ z ) = ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) ) ;;
	step 65 : wff = eqeq1d (step 64) |- ( z = ( F ` w ) → ( ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ z ) = ∅ ↔ ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) = ∅ ) ) ;;
	step 66 : wff = rexrnmpt (step 63, step 65) |- ( ∀ w ∈ ω ( F ` w ) ∈ _V → ( ∃ z ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ z ) = ∅ ↔ ∃ w ∈ ω ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) = ∅ ) ) ;;
	step 67 : wff = ax-mp (step 61, step 66) |- ( ∃ z ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ z ) = ∅ ↔ ∃ w ∈ ω ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) = ∅ ) ;;
	step 68 : wff = sylib (step 59, step 67) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ∃ w ∈ ω ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) = ∅ ) ;;
	step 69 : wff = peano2 () |- ( w ∈ ω → suc w ∈ ω ) ;;
	step 70 : wff = adantl (step 69) |- ( ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ∧ w ∈ ω ) → suc w ∈ ω ) ;;
	step 71 : wff = eqid () |- ( F ` suc w ) = ( F ` suc w ) ;;
	step 72 : wff = fveq2 () |- ( y = suc w → ( F ` y ) = ( F ` suc w ) ) ;;
	step 73 : wff = eqeq2d (step 72) |- ( y = suc w → ( ( F ` suc w ) = ( F ` y ) ↔ ( F ` suc w ) = ( F ` suc w ) ) ) ;;
	step 74 : wff = rspcev (step 73) |- ( ( suc w ∈ ω ∧ ( F ` suc w ) = ( F ` suc w ) ) → ∃ y ∈ ω ( F ` suc w ) = ( F ` y ) ) ;;
	step 75 : wff = sylancl (step 70, step 71, step 74) |- ( ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ∧ w ∈ ω ) → ∃ y ∈ ω ( F ` suc w ) = ( F ` y ) ) ;;
	step 76 : wff = fvex () |- ( F ` suc w ) ∈ _V ;;
	step 77 : wff = eqid () |- ( y ∈ ω ↦ ( F ` y ) ) = ( y ∈ ω ↦ ( F ` y ) ) ;;
	step 78 : wff = elrnmpt (step 77) |- ( ( F ` suc w ) ∈ _V → ( ( F ` suc w ) ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ↔ ∃ y ∈ ω ( F ` suc w ) = ( F ` y ) ) ) ;;
	step 79 : wff = ax-mp (step 76, step 78) |- ( ( F ` suc w ) ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ↔ ∃ y ∈ ω ( F ` suc w ) = ( F ` y ) ) ;;
	step 80 : wff = sylibr (step 75, step 79) |- ( ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ∧ w ∈ ω ) → ( F ` suc w ) ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ) ;;
	step 81 : wff = suceq () |- ( x = w → suc x = suc w ) ;;
	step 82 : wff = fveq2d (step 81) |- ( x = w → ( F ` suc x ) = ( F ` suc w ) ) ;;
	step 83 : wff = fveq2 () |- ( x = w → ( F ` x ) = ( F ` w ) ) ;;
	step 84 : wff = eleq12d (step 82, step 83) |- ( x = w → ( ( F ` suc x ) ∈ ( F ` x ) ↔ ( F ` suc w ) ∈ ( F ` w ) ) ) ;;
	step 85 : wff = rspccva (step 84) |- ( ( ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ∧ w ∈ ω ) → ( F ` suc w ) ∈ ( F ` w ) ) ;;
	step 86 : wff = adantll (step 85) |- ( ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ∧ w ∈ ω ) → ( F ` suc w ) ∈ ( F ` w ) ) ;;
	step 87 : wff = inelcm () |- ( ( ( F ` suc w ) ∈ ran ( y ∈ ω ↦ ( F ` y ) ) ∧ ( F ` suc w ) ∈ ( F ` w ) ) → ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) ≠ ∅ ) ;;
	step 88 : wff = syl2anc (step 80, step 86, step 87) |- ( ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ∧ w ∈ ω ) → ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) ≠ ∅ ) ;;
	step 89 : wff = neneqd (step 88) |- ( ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ∧ w ∈ ω ) → ¬ ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) = ∅ ) ;;
	step 90 : wff = nrexdv (step 89) |- ( ( ( F ` ∅ ) ∈ On ∧ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) → ¬ ∃ w ∈ ω ( ran ( y ∈ ω ↦ ( F ` y ) ) ∩ ( F ` w ) ) = ∅ ) ;;
	step 91 : wff = pm2.65da (step 68, step 90) |- ( ( F ` ∅ ) ∈ On → ¬ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ;;
	step 92 : wff = rexnal () |- ( ∃ x ∈ ω ¬ ( F ` suc x ) ∈ ( F ` x ) ↔ ¬ ∀ x ∈ ω ( F ` suc x ) ∈ ( F ` x ) ) ;;
	step 93 : wff = sylibr (step 91, step 92) |- ( ( F ` ∅ ) ∈ On → ∃ x ∈ ω ¬ ( F ` suc x ) ∈ ( F ` x ) ) ;;
	qed prop 1 = step 93 ;;
}

constant {
	symbol Smo ;;
}

/*Introduce the strictly monotone ordinal function.  A strictly monotone
     function is one that is constantly increasing across the ordinals. */

rule wsmo (A : class) {
	term : wff = # Smo A ;;
}

/*Definition of a strictly monotone ordinal function.  Definition 7.46 in
       [TakeutiZaring] p. 50.  (Contributed by Andrew Salmon, 15-Nov-2011.) */

definition df-smo (x : set, y : set, A : class) disjointed(x y A) {
	defiendum : wff = # Smo A ;;
	definiens : wff = # ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/*Alternate definition of a strictly monotone ordinal function.
       (Contributed by Mario Carneiro, 4-Mar-2013.) */

theorem dfsmo2 (x : set, y : set, F : class) disjointed(F x y) {
	prop 1 : wff = |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
}

proof of dfsmo2 {
	step 1 : wff = df-smo () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 2 : wff = ralcom () |- ( ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ↔ ∀ x ∈ dom F ∀ y ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 3 : wff = impexp () |- ( ( ( y ∈ dom F ∧ y ∈ x ) → ( F ` y ) ∈ ( F ` x ) ) ↔ ( y ∈ dom F → ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 4 : wff = simpr () |- ( ( y ∈ dom F ∧ y ∈ x ) → y ∈ x ) ;;
	step 5 : wff = ordtr1 () |- ( Ord dom F → ( ( y ∈ x ∧ x ∈ dom F ) → y ∈ dom F ) ) ;;
	step 6 : wff = 3impib (step 5) |- ( ( Ord dom F ∧ y ∈ x ∧ x ∈ dom F ) → y ∈ dom F ) ;;
	step 7 : wff = 3com23 (step 6) |- ( ( Ord dom F ∧ x ∈ dom F ∧ y ∈ x ) → y ∈ dom F ) ;;
	step 8 : wff = simp3 () |- ( ( Ord dom F ∧ x ∈ dom F ∧ y ∈ x ) → y ∈ x ) ;;
	step 9 : wff = jca (step 7, step 8) |- ( ( Ord dom F ∧ x ∈ dom F ∧ y ∈ x ) → ( y ∈ dom F ∧ y ∈ x ) ) ;;
	step 10 : wff = 3expia (step 9) |- ( ( Ord dom F ∧ x ∈ dom F ) → ( y ∈ x → ( y ∈ dom F ∧ y ∈ x ) ) ) ;;
	step 11 : wff = impbid2 (step 4, step 10) |- ( ( Ord dom F ∧ x ∈ dom F ) → ( ( y ∈ dom F ∧ y ∈ x ) ↔ y ∈ x ) ) ;;
	step 12 : wff = imbi1d (step 11) |- ( ( Ord dom F ∧ x ∈ dom F ) → ( ( ( y ∈ dom F ∧ y ∈ x ) → ( F ` y ) ∈ ( F ` x ) ) ↔ ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 13 : wff = syl5bbr (step 3, step 12) |- ( ( Ord dom F ∧ x ∈ dom F ) → ( ( y ∈ dom F → ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ↔ ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 14 : wff = ralbidv2 (step 13) |- ( ( Ord dom F ∧ x ∈ dom F ) → ( ∀ y ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ↔ ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 15 : wff = ralbidva (step 14) |- ( Ord dom F → ( ∀ x ∈ dom F ∀ y ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ↔ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 16 : wff = syl5bb (step 2, step 15) |- ( Ord dom F → ( ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ↔ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 17 : wff = pm5.32i (step 16) |- ( ( Ord dom F ∧ ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ↔ ( Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 18 : wff = anbi2i (step 17) |- ( ( F : dom F ⟶ On ∧ ( Ord dom F ∧ ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ) ↔ ( F : dom F ⟶ On ∧ ( Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 19 : wff = 3anass () |- ( ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ↔ ( F : dom F ⟶ On ∧ ( Ord dom F ∧ ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ) ) ;;
	step 20 : wff = 3anass () |- ( ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ↔ ( F : dom F ⟶ On ∧ ( Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 21 : wff = 3bitr4i (step 18, step 19, step 20) |- ( ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ y ∈ dom F ∀ x ∈ dom F ( y ∈ x → ( F ` y ) ∈ ( F ` x ) ) ) ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 22 : wff = bitri (step 1, step 21) |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	qed prop 1 = step 22 ;;
}

/*Conditions for which ` A ` is a strictly monotone ordinal function.
       (Contributed by Andrew Salmon, 15-Nov-2011.) */

theorem issmo (x : set, y : set, A : class, B : class) disjointed(x y A) {
	hyp 1 : wff = |- A : B ⟶ On ;;
	hyp 2 : wff = |- Ord B ;;
	hyp 3 : wff = |- ( ( x ∈ B ∧ y ∈ B ) → ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	hyp 4 : wff = |- dom A = B ;;
	-----------------------
	prop 1 : wff = |- Smo A ;;
}

proof of issmo {
	step 1 : wff = feq2i (hyp 4) |- ( A : dom A ⟶ On ↔ A : B ⟶ On ) ;;
	step 2 : wff = mpbir (hyp 1, step 1) |- A : dom A ⟶ On ;;
	step 3 : wff = ordeq () |- ( dom A = B → ( Ord dom A ↔ Ord B ) ) ;;
	step 4 : wff = ax-mp (hyp 4, step 3) |- ( Ord dom A ↔ Ord B ) ;;
	step 5 : wff = mpbir (hyp 2, step 4) |- Ord dom A ;;
	step 6 : wff = eleq2i (hyp 4) |- ( x ∈ dom A ↔ x ∈ B ) ;;
	step 7 : wff = eleq2i (hyp 4) |- ( y ∈ dom A ↔ y ∈ B ) ;;
	step 8 : wff = syl2anb (step 6, step 7, hyp 3) |- ( ( x ∈ dom A ∧ y ∈ dom A ) → ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 9 : wff = rgen2a (step 8) |- ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ;;
	step 10 : wff = df-smo () |- ( Smo A ↔ ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 11 : wff = mpbir3an (step 2, step 5, step 9, step 10) |- Smo A ;;
	qed prop 1 = step 11 ;;
}

/*Alternative definition of a strictly monotone ordinal function.
       (Contributed by Mario Carneiro, 12-Mar-2013.) */

theorem issmo2 (x : set, y : set, A : class, B : class, F : class) disjointed(A x, F x y) {
	prop 1 : wff = |- ( F : A ⟶ B → ( ( B ⊆ On ∧ Ord A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) → Smo F ) ) ;;
}

proof of issmo2 {
	step 1 : wff = fss () |- ( ( F : A ⟶ B ∧ B ⊆ On ) → F : A ⟶ On ) ;;
	step 2 : wff = ex (step 1) |- ( F : A ⟶ B → ( B ⊆ On → F : A ⟶ On ) ) ;;
	step 3 : wff = fdm () |- ( F : A ⟶ B → dom F = A ) ;;
	step 4 : wff = feq2d (step 3) |- ( F : A ⟶ B → ( F : dom F ⟶ On ↔ F : A ⟶ On ) ) ;;
	step 5 : wff = sylibrd (step 2, step 4) |- ( F : A ⟶ B → ( B ⊆ On → F : dom F ⟶ On ) ) ;;
	step 6 : wff = fdm () |- ( F : A ⟶ B → dom F = A ) ;;
	step 7 : wff = ordeq () |- ( dom F = A → ( Ord dom F ↔ Ord A ) ) ;;
	step 8 : wff = syl (step 6, step 7) |- ( F : A ⟶ B → ( Ord dom F ↔ Ord A ) ) ;;
	step 9 : wff = biimprd (step 8) |- ( F : A ⟶ B → ( Ord A → Ord dom F ) ) ;;
	step 10 : wff = fdm () |- ( F : A ⟶ B → dom F = A ) ;;
	step 11 : wff = raleqdv (step 10) |- ( F : A ⟶ B → ( ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ↔ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 12 : wff = biimprd (step 11) |- ( F : A ⟶ B → ( ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) → ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 13 : wff = 3anim123d (step 5, step 9, step 12) |- ( F : A ⟶ B → ( ( B ⊆ On ∧ Ord A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) → ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ) ;;
	step 14 : wff = dfsmo2 () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 15 : wff = syl6ibr (step 13, step 14) |- ( F : A ⟶ B → ( ( B ⊆ On ∧ Ord A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) → Smo F ) ) ;;
	qed prop 1 = step 15 ;;
}

/*Equality theorem for strictly monotone functions.  (Contributed by
       Andrew Salmon, 16-Nov-2011.) */

theorem smoeq (A : class, B : class) disjointed(x y A, x y B) {
	prop 1 : wff = |- ( A = B → ( Smo A ↔ Smo B ) ) ;;
}

proof of smoeq {
	var x : set, y : set;;
	step 1 : wff = id () |- ( A = B → A = B ) ;;
	step 2 : wff = dmeq () |- ( A = B → dom A = dom B ) ;;
	step 3 : wff = feq12d (step 1, step 2) |- ( A = B → ( A : dom A ⟶ On ↔ B : dom B ⟶ On ) ) ;;
	step 4 : wff = dmeq () |- ( A = B → dom A = dom B ) ;;
	step 5 : wff = ordeq () |- ( dom A = dom B → ( Ord dom A ↔ Ord dom B ) ) ;;
	step 6 : wff = syl (step 4, step 5) |- ( A = B → ( Ord dom A ↔ Ord dom B ) ) ;;
	step 7 : wff = fveq1 () |- ( A = B → ( A ` x ) = ( B ` x ) ) ;;
	step 8 : wff = fveq1 () |- ( A = B → ( A ` y ) = ( B ` y ) ) ;;
	step 9 : wff = eleq12d (step 7, step 8) |- ( A = B → ( ( A ` x ) ∈ ( A ` y ) ↔ ( B ` x ) ∈ ( B ` y ) ) ) ;;
	step 10 : wff = imbi2d (step 9) |- ( A = B → ( ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ↔ ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 11 : wff = 2ralbidv (step 10) |- ( A = B → ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ↔ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 12 : wff = dmeq () |- ( A = B → dom A = dom B ) ;;
	step 13 : wff = raleqdv (step 12) |- ( A = B → ( ∀ y ∈ dom A ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ↔ ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 14 : wff = ralbidv (step 13) |- ( A = B → ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ↔ ∀ x ∈ dom A ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 15 : wff = dmeq () |- ( A = B → dom A = dom B ) ;;
	step 16 : wff = raleqdv (step 15) |- ( A = B → ( ∀ x ∈ dom A ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ↔ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 17 : wff = 3bitrd (step 11, step 14, step 16) |- ( A = B → ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ↔ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 18 : wff = 3anbi123d (step 3, step 6, step 17) |- ( A = B → ( ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ↔ ( B : dom B ⟶ On ∧ Ord dom B ∧ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ) ;;
	step 19 : wff = df-smo () |- ( Smo A ↔ ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 20 : wff = df-smo () |- ( Smo B ↔ ( B : dom B ⟶ On ∧ Ord dom B ∧ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 21 : wff = 3bitr4g (step 18, step 19, step 20) |- ( A = B → ( Smo A ↔ Smo B ) ) ;;
	qed prop 1 = step 21 ;;
}

/*The domain of a strictly monotone function is an ordinal.  (Contributed
       by Andrew Salmon, 16-Nov-2011.) */

theorem smodm (A : class) disjointed(x y A, x y) {
	prop 1 : wff = |- ( Smo A → Ord dom A ) ;;
}

proof of smodm {
	var x : set, y : set;;
	step 1 : wff = df-smo () |- ( Smo A ↔ ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 2 : wff = simp2bi (step 1) |- ( Smo A → Ord dom A ) ;;
	qed prop 1 = step 2 ;;
}

/*A strictly monotone function restricted to an ordinal remains strictly
       monotone.  (Contributed by Andrew Salmon, 16-Nov-2011.)  (Proof
       shortened by Mario Carneiro, 5-Dec-2016.) */

theorem smores (A : class, B : class) disjointed(x y A, x y B) {
	prop 1 : wff = |- ( ( Smo A ∧ B ∈ dom A ) → Smo ( A ↾ B ) ) ;;
}

proof of smores {
	var x : set, y : set;;
	step 1 : wff = funres () |- ( Fun A → Fun ( A ↾ B ) ) ;;
	step 2 : wff = funfn () |- ( Fun A ↔ A Fn dom A ) ;;
	step 3 : wff = funfn () |- ( Fun ( A ↾ B ) ↔ ( A ↾ B ) Fn dom ( A ↾ B ) ) ;;
	step 4 : wff = 3imtr3i (step 1, step 2, step 3) |- ( A Fn dom A → ( A ↾ B ) Fn dom ( A ↾ B ) ) ;;
	step 5 : wff = resss () |- ( A ↾ B ) ⊆ A ;;
	step 6 : wff = rnss () |- ( ( A ↾ B ) ⊆ A → ran ( A ↾ B ) ⊆ ran A ) ;;
	step 7 : wff = ax-mp (step 5, step 6) |- ran ( A ↾ B ) ⊆ ran A ;;
	step 8 : wff = sstr () |- ( ( ran ( A ↾ B ) ⊆ ran A ∧ ran A ⊆ On ) → ran ( A ↾ B ) ⊆ On ) ;;
	step 9 : wff = mpan (step 7, step 8) |- ( ran A ⊆ On → ran ( A ↾ B ) ⊆ On ) ;;
	step 10 : wff = anim12i (step 4, step 9) |- ( ( A Fn dom A ∧ ran A ⊆ On ) → ( ( A ↾ B ) Fn dom ( A ↾ B ) ∧ ran ( A ↾ B ) ⊆ On ) ) ;;
	step 11 : wff = df-f () |- ( A : dom A ⟶ On ↔ ( A Fn dom A ∧ ran A ⊆ On ) ) ;;
	step 12 : wff = df-f () |- ( ( A ↾ B ) : dom ( A ↾ B ) ⟶ On ↔ ( ( A ↾ B ) Fn dom ( A ↾ B ) ∧ ran ( A ↾ B ) ⊆ On ) ) ;;
	step 13 : wff = 3imtr4i (step 10, step 11, step 12) |- ( A : dom A ⟶ On → ( A ↾ B ) : dom ( A ↾ B ) ⟶ On ) ;;
	step 14 : wff = a1i (step 13) |- ( B ∈ dom A → ( A : dom A ⟶ On → ( A ↾ B ) : dom ( A ↾ B ) ⟶ On ) ) ;;
	step 15 : wff = ordelord () |- ( ( Ord dom A ∧ B ∈ dom A ) → Ord B ) ;;
	step 16 : wff = expcom (step 15) |- ( B ∈ dom A → ( Ord dom A → Ord B ) ) ;;
	step 17 : wff = ordin () |- ( ( Ord B ∧ Ord dom A ) → Ord ( B ∩ dom A ) ) ;;
	step 18 : wff = ex (step 17) |- ( Ord B → ( Ord dom A → Ord ( B ∩ dom A ) ) ) ;;
	step 19 : wff = syli (step 16, step 18) |- ( B ∈ dom A → ( Ord dom A → Ord ( B ∩ dom A ) ) ) ;;
	step 20 : wff = dmres () |- dom ( A ↾ B ) = ( B ∩ dom A ) ;;
	step 21 : wff = ordeq () |- ( dom ( A ↾ B ) = ( B ∩ dom A ) → ( Ord dom ( A ↾ B ) ↔ Ord ( B ∩ dom A ) ) ) ;;
	step 22 : wff = ax-mp (step 20, step 21) |- ( Ord dom ( A ↾ B ) ↔ Ord ( B ∩ dom A ) ) ;;
	step 23 : wff = syl6ibr (step 19, step 22) |- ( B ∈ dom A → ( Ord dom A → Ord dom ( A ↾ B ) ) ) ;;
	step 24 : wff = resss () |- ( A ↾ B ) ⊆ A ;;
	step 25 : wff = dmss () |- ( ( A ↾ B ) ⊆ A → dom ( A ↾ B ) ⊆ dom A ) ;;
	step 26 : wff = ax-mp (step 24, step 25) |- dom ( A ↾ B ) ⊆ dom A ;;
	step 27 : wff = ssralv () |- ( dom ( A ↾ B ) ⊆ dom A → ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 28 : wff = ax-mp (step 26, step 27) |- ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 29 : wff = resss () |- ( A ↾ B ) ⊆ A ;;
	step 30 : wff = dmss () |- ( ( A ↾ B ) ⊆ A → dom ( A ↾ B ) ⊆ dom A ) ;;
	step 31 : wff = ax-mp (step 29, step 30) |- dom ( A ↾ B ) ⊆ dom A ;;
	step 32 : wff = ssralv () |- ( dom ( A ↾ B ) ⊆ dom A → ( ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 33 : wff = ax-mp (step 31, step 32) |- ( ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 34 : wff = ralimi (step 33) |- ( ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 35 : wff = syl (step 28, step 34) |- ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 36 : wff = dmres () |- dom ( A ↾ B ) = ( B ∩ dom A ) ;;
	step 37 : wff = inss1 () |- ( B ∩ dom A ) ⊆ B ;;
	step 38 : wff = eqsstri (step 36, step 37) |- dom ( A ↾ B ) ⊆ B ;;
	step 39 : wff = simpl () |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → x ∈ dom ( A ↾ B ) ) ;;
	step 40 : wff = sseldi (step 38, step 39) |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → x ∈ B ) ;;
	step 41 : wff = fvres () |- ( x ∈ B → ( ( A ↾ B ) ` x ) = ( A ` x ) ) ;;
	step 42 : wff = syl (step 40, step 41) |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → ( ( A ↾ B ) ` x ) = ( A ` x ) ) ;;
	step 43 : wff = dmres () |- dom ( A ↾ B ) = ( B ∩ dom A ) ;;
	step 44 : wff = inss1 () |- ( B ∩ dom A ) ⊆ B ;;
	step 45 : wff = eqsstri (step 43, step 44) |- dom ( A ↾ B ) ⊆ B ;;
	step 46 : wff = simpr () |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → y ∈ dom ( A ↾ B ) ) ;;
	step 47 : wff = sseldi (step 45, step 46) |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → y ∈ B ) ;;
	step 48 : wff = fvres () |- ( y ∈ B → ( ( A ↾ B ) ` y ) = ( A ` y ) ) ;;
	step 49 : wff = syl (step 47, step 48) |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → ( ( A ↾ B ) ` y ) = ( A ` y ) ) ;;
	step 50 : wff = eleq12d (step 42, step 49) |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → ( ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ↔ ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 51 : wff = imbi2d (step 50) |- ( ( x ∈ dom ( A ↾ B ) ∧ y ∈ dom ( A ↾ B ) ) → ( ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ↔ ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 52 : wff = ralbidva (step 51) |- ( x ∈ dom ( A ↾ B ) → ( ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ↔ ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 53 : wff = ralbiia (step 52) |- ( ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ↔ ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ;;
	step 54 : wff = sylibr (step 35, step 53) |- ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ) ;;
	step 55 : wff = a1i (step 54) |- ( B ∈ dom A → ( ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) → ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ) ) ;;
	step 56 : wff = 3anim123d (step 14, step 23, step 55) |- ( B ∈ dom A → ( ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) → ( ( A ↾ B ) : dom ( A ↾ B ) ⟶ On ∧ Ord dom ( A ↾ B ) ∧ ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ) ) ) ;;
	step 57 : wff = df-smo () |- ( Smo A ↔ ( A : dom A ⟶ On ∧ Ord dom A ∧ ∀ x ∈ dom A ∀ y ∈ dom A ( x ∈ y → ( A ` x ) ∈ ( A ` y ) ) ) ) ;;
	step 58 : wff = df-smo () |- ( Smo ( A ↾ B ) ↔ ( ( A ↾ B ) : dom ( A ↾ B ) ⟶ On ∧ Ord dom ( A ↾ B ) ∧ ∀ x ∈ dom ( A ↾ B ) ∀ y ∈ dom ( A ↾ B ) ( x ∈ y → ( ( A ↾ B ) ` x ) ∈ ( ( A ↾ B ) ` y ) ) ) ) ;;
	step 59 : wff = 3imtr4g (step 56, step 57, step 58) |- ( B ∈ dom A → ( Smo A → Smo ( A ↾ B ) ) ) ;;
	step 60 : wff = impcom (step 59) |- ( ( Smo A ∧ B ∈ dom A ) → Smo ( A ↾ B ) ) ;;
	qed prop 1 = step 60 ;;
}

/*A strictly monotone function restricted to an ordinal remains strictly
       monotone.  (Contributed by Andrew Salmon, 19-Nov-2011.) */

theorem smores3 (A : class, B : class, C : class) disjointed(A, B) {
	prop 1 : wff = |- ( ( Smo ( A ↾ B ) ∧ C ∈ ( dom A ∩ B ) ∧ Ord B ) → Smo ( A ↾ C ) ) ;;
}

proof of smores3 {
	step 1 : wff = dmres () |- dom ( A ↾ B ) = ( B ∩ dom A ) ;;
	step 2 : wff = incom () |- ( B ∩ dom A ) = ( dom A ∩ B ) ;;
	step 3 : wff = eqtri (step 1, step 2) |- dom ( A ↾ B ) = ( dom A ∩ B ) ;;
	step 4 : wff = eleq2i (step 3) |- ( C ∈ dom ( A ↾ B ) ↔ C ∈ ( dom A ∩ B ) ) ;;
	step 5 : wff = smores () |- ( ( Smo ( A ↾ B ) ∧ C ∈ dom ( A ↾ B ) ) → Smo ( ( A ↾ B ) ↾ C ) ) ;;
	step 6 : wff = sylan2br (step 4, step 5) |- ( ( Smo ( A ↾ B ) ∧ C ∈ ( dom A ∩ B ) ) → Smo ( ( A ↾ B ) ↾ C ) ) ;;
	step 7 : wff = 3adant3 (step 6) |- ( ( Smo ( A ↾ B ) ∧ C ∈ ( dom A ∩ B ) ∧ Ord B ) → Smo ( ( A ↾ B ) ↾ C ) ) ;;
	step 8 : wff = inss2 () |- ( dom A ∩ B ) ⊆ B ;;
	step 9 : wff = sseli (step 8) |- ( C ∈ ( dom A ∩ B ) → C ∈ B ) ;;
	step 10 : wff = ordelss () |- ( ( Ord B ∧ C ∈ B ) → C ⊆ B ) ;;
	step 11 : wff = ancoms (step 10) |- ( ( C ∈ B ∧ Ord B ) → C ⊆ B ) ;;
	step 12 : wff = sylan (step 9, step 11) |- ( ( C ∈ ( dom A ∩ B ) ∧ Ord B ) → C ⊆ B ) ;;
	step 13 : wff = 3adant1 (step 12) |- ( ( Smo ( A ↾ B ) ∧ C ∈ ( dom A ∩ B ) ∧ Ord B ) → C ⊆ B ) ;;
	step 14 : wff = resabs1 () |- ( C ⊆ B → ( ( A ↾ B ) ↾ C ) = ( A ↾ C ) ) ;;
	step 15 : wff = smoeq () |- ( ( ( A ↾ B ) ↾ C ) = ( A ↾ C ) → ( Smo ( ( A ↾ B ) ↾ C ) ↔ Smo ( A ↾ C ) ) ) ;;
	step 16 : wff = 3syl (step 13, step 14, step 15) |- ( ( Smo ( A ↾ B ) ∧ C ∈ ( dom A ∩ B ) ∧ Ord B ) → ( Smo ( ( A ↾ B ) ↾ C ) ↔ Smo ( A ↾ C ) ) ) ;;
	step 17 : wff = mpbid (step 7, step 16) |- ( ( Smo ( A ↾ B ) ∧ C ∈ ( dom A ∩ B ) ∧ Ord B ) → Smo ( A ↾ C ) ) ;;
	qed prop 1 = step 17 ;;
}

/*A strictly monotone ordinal function restricted to an ordinal is still
       monotone.  (Contributed by Mario Carneiro, 15-Mar-2013.) */

theorem smores2 (A : class, F : class) disjointed(A x y, F x y) {
	prop 1 : wff = |- ( ( Smo F ∧ Ord A ) → Smo ( F ↾ A ) ) ;;
}

proof of smores2 {
	var x : set, y : set;;
	step 1 : wff = dfsmo2 () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 2 : wff = simp1bi (step 1) |- ( Smo F → F : dom F ⟶ On ) ;;
	step 3 : wff = ffun () |- ( F : dom F ⟶ On → Fun F ) ;;
	step 4 : wff = syl (step 2, step 3) |- ( Smo F → Fun F ) ;;
	step 5 : wff = funres () |- ( Fun F → Fun ( F ↾ A ) ) ;;
	step 6 : wff = funfn () |- ( Fun ( F ↾ A ) ↔ ( F ↾ A ) Fn dom ( F ↾ A ) ) ;;
	step 7 : wff = sylib (step 5, step 6) |- ( Fun F → ( F ↾ A ) Fn dom ( F ↾ A ) ) ;;
	step 8 : wff = syl (step 4, step 7) |- ( Smo F → ( F ↾ A ) Fn dom ( F ↾ A ) ) ;;
	step 9 : wff = df-ima () |- ( F " A ) = ran ( F ↾ A ) ;;
	step 10 : wff = imassrn () |- ( F " A ) ⊆ ran F ;;
	step 11 : wff = eqsstr3i (step 9, step 10) |- ran ( F ↾ A ) ⊆ ran F ;;
	step 12 : wff = dfsmo2 () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 13 : wff = simp1bi (step 12) |- ( Smo F → F : dom F ⟶ On ) ;;
	step 14 : wff = frn () |- ( F : dom F ⟶ On → ran F ⊆ On ) ;;
	step 15 : wff = syl (step 13, step 14) |- ( Smo F → ran F ⊆ On ) ;;
	step 16 : wff = syl5ss (step 11, step 15) |- ( Smo F → ran ( F ↾ A ) ⊆ On ) ;;
	step 17 : wff = df-f () |- ( ( F ↾ A ) : dom ( F ↾ A ) ⟶ On ↔ ( ( F ↾ A ) Fn dom ( F ↾ A ) ∧ ran ( F ↾ A ) ⊆ On ) ) ;;
	step 18 : wff = sylanbrc (step 8, step 16, step 17) |- ( Smo F → ( F ↾ A ) : dom ( F ↾ A ) ⟶ On ) ;;
	step 19 : wff = adantr (step 18) |- ( ( Smo F ∧ Ord A ) → ( F ↾ A ) : dom ( F ↾ A ) ⟶ On ) ;;
	step 20 : wff = smodm () |- ( Smo F → Ord dom F ) ;;
	step 21 : wff = ordin () |- ( ( Ord A ∧ Ord dom F ) → Ord ( A ∩ dom F ) ) ;;
	step 22 : wff = dmres () |- dom ( F ↾ A ) = ( A ∩ dom F ) ;;
	step 23 : wff = ordeq () |- ( dom ( F ↾ A ) = ( A ∩ dom F ) → ( Ord dom ( F ↾ A ) ↔ Ord ( A ∩ dom F ) ) ) ;;
	step 24 : wff = ax-mp (step 22, step 23) |- ( Ord dom ( F ↾ A ) ↔ Ord ( A ∩ dom F ) ) ;;
	step 25 : wff = sylibr (step 21, step 24) |- ( ( Ord A ∧ Ord dom F ) → Ord dom ( F ↾ A ) ) ;;
	step 26 : wff = ancoms (step 25) |- ( ( Ord dom F ∧ Ord A ) → Ord dom ( F ↾ A ) ) ;;
	step 27 : wff = sylan (step 20, step 26) |- ( ( Smo F ∧ Ord A ) → Ord dom ( F ↾ A ) ) ;;
	step 28 : wff = resss () |- ( F ↾ A ) ⊆ F ;;
	step 29 : wff = dmss () |- ( ( F ↾ A ) ⊆ F → dom ( F ↾ A ) ⊆ dom F ) ;;
	step 30 : wff = ax-mp (step 28, step 29) |- dom ( F ↾ A ) ⊆ dom F ;;
	step 31 : wff = dfsmo2 () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 32 : wff = simp3bi (step 31) |- ( Smo F → ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 33 : wff = ssralv () |- ( dom ( F ↾ A ) ⊆ dom F → ( ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) → ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 34 : wff = mpsyl (step 30, step 32, step 33) |- ( Smo F → ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 35 : wff = adantr (step 34) |- ( ( Smo F ∧ Ord A ) → ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 36 : wff = smodm () |- ( Smo F → Ord dom F ) ;;
	step 37 : wff = ordin () |- ( ( Ord A ∧ Ord dom F ) → Ord ( A ∩ dom F ) ) ;;
	step 38 : wff = dmres () |- dom ( F ↾ A ) = ( A ∩ dom F ) ;;
	step 39 : wff = ordeq () |- ( dom ( F ↾ A ) = ( A ∩ dom F ) → ( Ord dom ( F ↾ A ) ↔ Ord ( A ∩ dom F ) ) ) ;;
	step 40 : wff = ax-mp (step 38, step 39) |- ( Ord dom ( F ↾ A ) ↔ Ord ( A ∩ dom F ) ) ;;
	step 41 : wff = sylibr (step 37, step 40) |- ( ( Ord A ∧ Ord dom F ) → Ord dom ( F ↾ A ) ) ;;
	step 42 : wff = ancoms (step 41) |- ( ( Ord dom F ∧ Ord A ) → Ord dom ( F ↾ A ) ) ;;
	step 43 : wff = sylan (step 36, step 42) |- ( ( Smo F ∧ Ord A ) → Ord dom ( F ↾ A ) ) ;;
	step 44 : wff = ordtr1 () |- ( Ord dom ( F ↾ A ) → ( ( y ∈ x ∧ x ∈ dom ( F ↾ A ) ) → y ∈ dom ( F ↾ A ) ) ) ;;
	step 45 : wff = syl (step 43, step 44) |- ( ( Smo F ∧ Ord A ) → ( ( y ∈ x ∧ x ∈ dom ( F ↾ A ) ) → y ∈ dom ( F ↾ A ) ) ) ;;
	step 46 : wff = dmres () |- dom ( F ↾ A ) = ( A ∩ dom F ) ;;
	step 47 : wff = inss1 () |- ( A ∩ dom F ) ⊆ A ;;
	step 48 : wff = eqsstri (step 46, step 47) |- dom ( F ↾ A ) ⊆ A ;;
	step 49 : wff = sseli (step 48) |- ( y ∈ dom ( F ↾ A ) → y ∈ A ) ;;
	step 50 : wff = syl6 (step 45, step 49) |- ( ( Smo F ∧ Ord A ) → ( ( y ∈ x ∧ x ∈ dom ( F ↾ A ) ) → y ∈ A ) ) ;;
	step 51 : wff = exp3acom23 (step 50) |- ( ( Smo F ∧ Ord A ) → ( x ∈ dom ( F ↾ A ) → ( y ∈ x → y ∈ A ) ) ) ;;
	step 52 : wff = imp31 (step 51) |- ( ( ( ( Smo F ∧ Ord A ) ∧ x ∈ dom ( F ↾ A ) ) ∧ y ∈ x ) → y ∈ A ) ;;
	step 53 : wff = fvres () |- ( y ∈ A → ( ( F ↾ A ) ` y ) = ( F ` y ) ) ;;
	step 54 : wff = syl (step 52, step 53) |- ( ( ( ( Smo F ∧ Ord A ) ∧ x ∈ dom ( F ↾ A ) ) ∧ y ∈ x ) → ( ( F ↾ A ) ` y ) = ( F ` y ) ) ;;
	step 55 : wff = dmres () |- dom ( F ↾ A ) = ( A ∩ dom F ) ;;
	step 56 : wff = inss1 () |- ( A ∩ dom F ) ⊆ A ;;
	step 57 : wff = eqsstri (step 55, step 56) |- dom ( F ↾ A ) ⊆ A ;;
	step 58 : wff = sseli (step 57) |- ( x ∈ dom ( F ↾ A ) → x ∈ A ) ;;
	step 59 : wff = fvres () |- ( x ∈ A → ( ( F ↾ A ) ` x ) = ( F ` x ) ) ;;
	step 60 : wff = syl (step 58, step 59) |- ( x ∈ dom ( F ↾ A ) → ( ( F ↾ A ) ` x ) = ( F ` x ) ) ;;
	step 61 : wff = ad2antlr (step 60) |- ( ( ( ( Smo F ∧ Ord A ) ∧ x ∈ dom ( F ↾ A ) ) ∧ y ∈ x ) → ( ( F ↾ A ) ` x ) = ( F ` x ) ) ;;
	step 62 : wff = eleq12d (step 54, step 61) |- ( ( ( ( Smo F ∧ Ord A ) ∧ x ∈ dom ( F ↾ A ) ) ∧ y ∈ x ) → ( ( ( F ↾ A ) ` y ) ∈ ( ( F ↾ A ) ` x ) ↔ ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 63 : wff = ralbidva (step 62) |- ( ( ( Smo F ∧ Ord A ) ∧ x ∈ dom ( F ↾ A ) ) → ( ∀ y ∈ x ( ( F ↾ A ) ` y ) ∈ ( ( F ↾ A ) ` x ) ↔ ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 64 : wff = ralbidva (step 63) |- ( ( Smo F ∧ Ord A ) → ( ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( ( F ↾ A ) ` y ) ∈ ( ( F ↾ A ) ` x ) ↔ ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 65 : wff = mpbird (step 35, step 64) |- ( ( Smo F ∧ Ord A ) → ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( ( F ↾ A ) ` y ) ∈ ( ( F ↾ A ) ` x ) ) ;;
	step 66 : wff = dfsmo2 () |- ( Smo ( F ↾ A ) ↔ ( ( F ↾ A ) : dom ( F ↾ A ) ⟶ On ∧ Ord dom ( F ↾ A ) ∧ ∀ x ∈ dom ( F ↾ A ) ∀ y ∈ x ( ( F ↾ A ) ` y ) ∈ ( ( F ↾ A ) ` x ) ) ) ;;
	step 67 : wff = syl3anbrc (step 19, step 27, step 65, step 66) |- ( ( Smo F ∧ Ord A ) → Smo ( F ↾ A ) ) ;;
	qed prop 1 = step 67 ;;
}

/*The domain of a strictly monotone ordinal function is an ordinal.
     (Contributed by Mario Carneiro, 12-Mar-2013.) */

theorem smodm2 (A : class, F : class)  {
	prop 1 : wff = |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
}

proof of smodm2 {
	step 1 : wff = smodm () |- ( Smo F → Ord dom F ) ;;
	step 2 : wff = fndm () |- ( F Fn A → dom F = A ) ;;
	step 3 : wff = ordeq () |- ( dom F = A → ( Ord dom F ↔ Ord A ) ) ;;
	step 4 : wff = syl (step 2, step 3) |- ( F Fn A → ( Ord dom F ↔ Ord A ) ) ;;
	step 5 : wff = biimpa (step 4) |- ( ( F Fn A ∧ Ord dom F ) → Ord A ) ;;
	step 6 : wff = sylan2 (step 1, step 5) |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	qed prop 1 = step 6 ;;
}

/*The function values of a strictly monotone ordinal function are
       ordinals.  (Contributed by Mario Carneiro, 12-Mar-2013.) */

theorem smofvon2 (B : class, F : class) disjointed(F x y) {
	prop 1 : wff = |- ( Smo F → ( F ` B ) ∈ On ) ;;
}

proof of smofvon2 {
	var x : set, y : set;;
	step 1 : wff = dfsmo2 () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ) ;;
	step 2 : wff = simp1bi (step 1) |- ( Smo F → F : dom F ⟶ On ) ;;
	step 3 : wff = ffvelrn () |- ( ( F : dom F ⟶ On ∧ B ∈ dom F ) → ( F ` B ) ∈ On ) ;;
	step 4 : wff = expcom (step 3) |- ( B ∈ dom F → ( F : dom F ⟶ On → ( F ` B ) ∈ On ) ) ;;
	step 5 : wff = syl5 (step 2, step 4) |- ( B ∈ dom F → ( Smo F → ( F ` B ) ∈ On ) ) ;;
	step 6 : wff = ndmfv () |- ( ¬ B ∈ dom F → ( F ` B ) = ∅ ) ;;
	step 7 : wff = 0elon () |- ∅ ∈ On ;;
	step 8 : wff = syl6eqel (step 6, step 7) |- ( ¬ B ∈ dom F → ( F ` B ) ∈ On ) ;;
	step 9 : wff = a1d (step 8) |- ( ¬ B ∈ dom F → ( Smo F → ( F ` B ) ∈ On ) ) ;;
	step 10 : wff = pm2.61i (step 5, step 9) |- ( Smo F → ( F ` B ) ∈ On ) ;;
	qed prop 1 = step 10 ;;
}

/*The identity relation restricted to the ordinals is a strictly monotone
       function.  (Contributed by Andrew Salmon, 16-Nov-2011.) */

theorem iordsmo (A : class) disjointed(x y A) {
	hyp 1 : wff = |- Ord A ;;
	-----------------------
	prop 1 : wff = |- Smo ( _I ↾ A ) ;;
}

proof of iordsmo {
	var x : set, y : set;;
	step 1 : wff = fnresi () |- ( _I ↾ A ) Fn A ;;
	step 2 : wff = rnresi () |- ran ( _I ↾ A ) = A ;;
	step 3 : wff = ordsson () |- ( Ord A → A ⊆ On ) ;;
	step 4 : wff = ax-mp (hyp 1, step 3) |- A ⊆ On ;;
	step 5 : wff = eqsstri (step 2, step 4) |- ran ( _I ↾ A ) ⊆ On ;;
	step 6 : wff = df-f () |- ( ( _I ↾ A ) : A ⟶ On ↔ ( ( _I ↾ A ) Fn A ∧ ran ( _I ↾ A ) ⊆ On ) ) ;;
	step 7 : wff = mpbir2an (step 1, step 5, step 6) |- ( _I ↾ A ) : A ⟶ On ;;
	step 8 : wff = fvresi () |- ( x ∈ A → ( ( _I ↾ A ) ` x ) = x ) ;;
	step 9 : wff = adantr (step 8) |- ( ( x ∈ A ∧ y ∈ A ) → ( ( _I ↾ A ) ` x ) = x ) ;;
	step 10 : wff = fvresi () |- ( y ∈ A → ( ( _I ↾ A ) ` y ) = y ) ;;
	step 11 : wff = adantl (step 10) |- ( ( x ∈ A ∧ y ∈ A ) → ( ( _I ↾ A ) ` y ) = y ) ;;
	step 12 : wff = eleq12d (step 9, step 11) |- ( ( x ∈ A ∧ y ∈ A ) → ( ( ( _I ↾ A ) ` x ) ∈ ( ( _I ↾ A ) ` y ) ↔ x ∈ y ) ) ;;
	step 13 : wff = biimprd (step 12) |- ( ( x ∈ A ∧ y ∈ A ) → ( x ∈ y → ( ( _I ↾ A ) ` x ) ∈ ( ( _I ↾ A ) ` y ) ) ) ;;
	step 14 : wff = dmresi () |- dom ( _I ↾ A ) = A ;;
	step 15 : wff = issmo (step 7, hyp 1, step 13, step 14) |- Smo ( _I ↾ A ) ;;
	qed prop 1 = step 15 ;;
}

/*The null set is a strictly monotone ordinal function.  (Contributed by
       Andrew Salmon, 20-Nov-2011.) */

theorem smo0 ()  {
	prop 1 : wff = |- Smo ∅ ;;
}

proof of smo0 {
	step 1 : wff = ord0 () |- Ord ∅ ;;
	step 2 : wff = iordsmo (step 1) |- Smo ( _I ↾ ∅ ) ;;
	step 3 : wff = res0 () |- ( _I ↾ ∅ ) = ∅ ;;
	step 4 : wff = smoeq () |- ( ( _I ↾ ∅ ) = ∅ → ( Smo ( _I ↾ ∅ ) ↔ Smo ∅ ) ) ;;
	step 5 : wff = ax-mp (step 3, step 4) |- ( Smo ( _I ↾ ∅ ) ↔ Smo ∅ ) ;;
	step 6 : wff = mpbi (step 2, step 5) |- Smo ∅ ;;
	qed prop 1 = step 6 ;;
}

/*If ` B ` is a strictly monotone ordinal function, and ` A ` is in the
       domain of ` B ` , then the value of the function at ` A ` is an
       ordinal.  (Contributed by Andrew Salmon, 20-Nov-2011.) */

theorem smofvon (A : class, B : class) disjointed(x y A, x y B, x y, x y) {
	prop 1 : wff = |- ( ( Smo B ∧ A ∈ dom B ) → ( B ` A ) ∈ On ) ;;
}

proof of smofvon {
	var x : set, y : set;;
	step 1 : wff = df-smo () |- ( Smo B ↔ ( B : dom B ⟶ On ∧ Ord dom B ∧ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 2 : wff = simp1bi (step 1) |- ( Smo B → B : dom B ⟶ On ) ;;
	step 3 : wff = ffvelrn () |- ( ( B : dom B ⟶ On ∧ A ∈ dom B ) → ( B ` A ) ∈ On ) ;;
	step 4 : wff = sylan (step 2, step 3) |- ( ( Smo B ∧ A ∈ dom B ) → ( B ` A ) ∈ On ) ;;
	qed prop 1 = step 4 ;;
}

/*If ` x ` is less than ` y ` then a strictly monotone function's value
       will be strictly less at ` x ` than at ` y ` .  (Contributed by Andrew
       Salmon, 22-Nov-2011.) */

theorem smoel (A : class, B : class, C : class) disjointed(x y A, x y B, x y C, x y) {
	prop 1 : wff = |- ( ( Smo B ∧ A ∈ dom B ∧ C ∈ A ) → ( B ` C ) ∈ ( B ` A ) ) ;;
}

proof of smoel {
	var x : set, y : set;;
	step 1 : wff = smodm () |- ( Smo B → Ord dom B ) ;;
	step 2 : wff = ordtr1 () |- ( Ord dom B → ( ( C ∈ A ∧ A ∈ dom B ) → C ∈ dom B ) ) ;;
	step 3 : wff = ancomsd (step 2) |- ( Ord dom B → ( ( A ∈ dom B ∧ C ∈ A ) → C ∈ dom B ) ) ;;
	step 4 : wff = expdimp (step 3) |- ( ( Ord dom B ∧ A ∈ dom B ) → ( C ∈ A → C ∈ dom B ) ) ;;
	step 5 : wff = sylan (step 1, step 4) |- ( ( Smo B ∧ A ∈ dom B ) → ( C ∈ A → C ∈ dom B ) ) ;;
	step 6 : wff = df-smo () |- ( Smo B ↔ ( B : dom B ⟶ On ∧ Ord dom B ∧ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) ) ;;
	step 7 : wff = eleq1 () |- ( x = C → ( x ∈ y ↔ C ∈ y ) ) ;;
	step 8 : wff = fveq2 () |- ( x = C → ( B ` x ) = ( B ` C ) ) ;;
	step 9 : wff = eleq1d (step 8) |- ( x = C → ( ( B ` x ) ∈ ( B ` y ) ↔ ( B ` C ) ∈ ( B ` y ) ) ) ;;
	step 10 : wff = imbi12d (step 7, step 9) |- ( x = C → ( ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ↔ ( C ∈ y → ( B ` C ) ∈ ( B ` y ) ) ) ) ;;
	step 11 : wff = eleq2 () |- ( y = A → ( C ∈ y ↔ C ∈ A ) ) ;;
	step 12 : wff = fveq2 () |- ( y = A → ( B ` y ) = ( B ` A ) ) ;;
	step 13 : wff = eleq2d (step 12) |- ( y = A → ( ( B ` C ) ∈ ( B ` y ) ↔ ( B ` C ) ∈ ( B ` A ) ) ) ;;
	step 14 : wff = imbi12d (step 11, step 13) |- ( y = A → ( ( C ∈ y → ( B ` C ) ∈ ( B ` y ) ) ↔ ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 15 : wff = rspc2v (step 10, step 14) |- ( ( C ∈ dom B ∧ A ∈ dom B ) → ( ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 16 : wff = ancoms (step 15) |- ( ( A ∈ dom B ∧ C ∈ dom B ) → ( ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 17 : wff = com12 (step 16) |- ( ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) → ( ( A ∈ dom B ∧ C ∈ dom B ) → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 18 : wff = 3ad2ant3 (step 17) |- ( ( B : dom B ⟶ On ∧ Ord dom B ∧ ∀ x ∈ dom B ∀ y ∈ dom B ( x ∈ y → ( B ` x ) ∈ ( B ` y ) ) ) → ( ( A ∈ dom B ∧ C ∈ dom B ) → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 19 : wff = sylbi (step 6, step 18) |- ( Smo B → ( ( A ∈ dom B ∧ C ∈ dom B ) → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 20 : wff = expdimp (step 19) |- ( ( Smo B ∧ A ∈ dom B ) → ( C ∈ dom B → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 21 : wff = syld (step 5, step 20) |- ( ( Smo B ∧ A ∈ dom B ) → ( C ∈ A → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ) ;;
	step 22 : wff = pm2.43d (step 21) |- ( ( Smo B ∧ A ∈ dom B ) → ( C ∈ A → ( B ` C ) ∈ ( B ` A ) ) ) ;;
	step 23 : wff = 3impia (step 22) |- ( ( Smo B ∧ A ∈ dom B ∧ C ∈ A ) → ( B ` C ) ∈ ( B ` A ) ) ;;
	qed prop 1 = step 23 ;;
}

/*The value of a strictly monotone ordinal function contains its indexed
       union.  (Contributed by Andrew Salmon, 22-Nov-2011.) */

theorem smoiun (x : set, A : class, B : class) disjointed(x y A, x y B, x y, x y) {
	prop 1 : wff = |- ( ( Smo B ∧ A ∈ dom B ) → ⋃_ x ∈ A ( B ` x ) ⊆ ( B ` A ) ) ;;
}

proof of smoiun {
	var y : set;;
	step 1 : wff = eliun () |- ( y ∈ ⋃_ x ∈ A ( B ` x ) ↔ ∃ x ∈ A y ∈ ( B ` x ) ) ;;
	step 2 : wff = smofvon () |- ( ( Smo B ∧ A ∈ dom B ) → ( B ` A ) ∈ On ) ;;
	step 3 : wff = smoel () |- ( ( Smo B ∧ A ∈ dom B ∧ x ∈ A ) → ( B ` x ) ∈ ( B ` A ) ) ;;
	step 4 : wff = 3expia (step 3) |- ( ( Smo B ∧ A ∈ dom B ) → ( x ∈ A → ( B ` x ) ∈ ( B ` A ) ) ) ;;
	step 5 : wff = ontr1 () |- ( ( B ` A ) ∈ On → ( ( y ∈ ( B ` x ) ∧ ( B ` x ) ∈ ( B ` A ) ) → y ∈ ( B ` A ) ) ) ;;
	step 6 : wff = exp3acom23 (step 5) |- ( ( B ` A ) ∈ On → ( ( B ` x ) ∈ ( B ` A ) → ( y ∈ ( B ` x ) → y ∈ ( B ` A ) ) ) ) ;;
	step 7 : wff = sylsyld (step 2, step 4, step 6) |- ( ( Smo B ∧ A ∈ dom B ) → ( x ∈ A → ( y ∈ ( B ` x ) → y ∈ ( B ` A ) ) ) ) ;;
	step 8 : wff = rexlimdv (step 7) |- ( ( Smo B ∧ A ∈ dom B ) → ( ∃ x ∈ A y ∈ ( B ` x ) → y ∈ ( B ` A ) ) ) ;;
	step 9 : wff = syl5bi (step 1, step 8) |- ( ( Smo B ∧ A ∈ dom B ) → ( y ∈ ⋃_ x ∈ A ( B ` x ) → y ∈ ( B ` A ) ) ) ;;
	step 10 : wff = ssrdv (step 9) |- ( ( Smo B ∧ A ∈ dom B ) → ⋃_ x ∈ A ( B ` x ) ⊆ ( B ` A ) ) ;;
	qed prop 1 = step 10 ;;
}

/*If ` F ` is an isomorphism from an ordinal ` A ` onto ` B ` , which is a
       subset of the ordinals, then ` F ` is a strictly monotonic function.
       Exercise 3 in [TakeutiZaring] p. 50.  (Contributed by Andrew Salmon,
       24-Nov-2011.) */

theorem smoiso (A : class, B : class, F : class) disjointed(x y A, x y B, x y, x y F) {
	prop 1 : wff = |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → Smo F ) ;;
}

proof of smoiso {
	var x : set, y : set;;
	step 1 : wff = isof1o () |- ( F Isom 𝛜 , 𝛜 ( A , B ) → F : A ⤖ B ) ;;
	step 2 : wff = f1of () |- ( F : A ⤖ B → F : A ⟶ B ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → F : A ⟶ B ) ;;
	step 4 : wff = ffdm () |- ( F : A ⟶ B → ( F : dom F ⟶ B ∧ dom F ⊆ A ) ) ;;
	step 5 : wff = simpld (step 4) |- ( F : A ⟶ B → F : dom F ⟶ B ) ;;
	step 6 : wff = fss () |- ( ( F : dom F ⟶ B ∧ B ⊆ On ) → F : dom F ⟶ On ) ;;
	step 7 : wff = sylan (step 5, step 6) |- ( ( F : A ⟶ B ∧ B ⊆ On ) → F : dom F ⟶ On ) ;;
	step 8 : wff = 3adant2 (step 7) |- ( ( F : A ⟶ B ∧ Ord A ∧ B ⊆ On ) → F : dom F ⟶ On ) ;;
	step 9 : wff = syl3an1 (step 3, step 8) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → F : dom F ⟶ On ) ;;
	step 10 : wff = isof1o () |- ( F Isom 𝛜 , 𝛜 ( A , B ) → F : A ⤖ B ) ;;
	step 11 : wff = f1of () |- ( F : A ⤖ B → F : A ⟶ B ) ;;
	step 12 : wff = fdm () |- ( F : A ⟶ B → dom F = A ) ;;
	step 13 : wff = eqcomd (step 12) |- ( F : A ⟶ B → A = dom F ) ;;
	step 14 : wff = 3syl (step 10, step 11, step 13) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → A = dom F ) ;;
	step 15 : wff = ordeq () |- ( A = dom F → ( Ord A ↔ Ord dom F ) ) ;;
	step 16 : wff = syl (step 14, step 15) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → ( Ord A ↔ Ord dom F ) ) ;;
	step 17 : wff = biimpa (step 16) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ) → Ord dom F ) ;;
	step 18 : wff = 3adant3 (step 17) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → Ord dom F ) ;;
	step 19 : wff = isof1o () |- ( F Isom 𝛜 , 𝛜 ( A , B ) → F : A ⤖ B ) ;;
	step 20 : wff = f1of () |- ( F : A ⤖ B → F : A ⟶ B ) ;;
	step 21 : wff = fdm () |- ( F : A ⟶ B → dom F = A ) ;;
	step 22 : wff = eleq2d (step 21) |- ( F : A ⟶ B → ( x ∈ dom F ↔ x ∈ A ) ) ;;
	step 23 : wff = fdm () |- ( F : A ⟶ B → dom F = A ) ;;
	step 24 : wff = eleq2d (step 23) |- ( F : A ⟶ B → ( y ∈ dom F ↔ y ∈ A ) ) ;;
	step 25 : wff = anbi12d (step 22, step 24) |- ( F : A ⟶ B → ( ( x ∈ dom F ∧ y ∈ dom F ) ↔ ( x ∈ A ∧ y ∈ A ) ) ) ;;
	step 26 : wff = 3syl (step 19, step 20, step 25) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → ( ( x ∈ dom F ∧ y ∈ dom F ) ↔ ( x ∈ A ∧ y ∈ A ) ) ) ;;
	step 27 : wff = isorel () |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ ( x ∈ A ∧ y ∈ A ) ) → ( x 𝛜 y ↔ ( F ` x ) 𝛜 ( F ` y ) ) ) ;;
	step 28 : wff = epel () |- ( x 𝛜 y ↔ x ∈ y ) ;;
	step 29 : wff = fvex () |- ( F ` y ) ∈ _V ;;
	step 30 : wff = epelc (step 29) |- ( ( F ` x ) 𝛜 ( F ` y ) ↔ ( F ` x ) ∈ ( F ` y ) ) ;;
	step 31 : wff = 3bitr3g (step 27, step 28, step 30) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ ( x ∈ A ∧ y ∈ A ) ) → ( x ∈ y ↔ ( F ` x ) ∈ ( F ` y ) ) ) ;;
	step 32 : wff = biimpd (step 31) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ ( x ∈ A ∧ y ∈ A ) ) → ( x ∈ y → ( F ` x ) ∈ ( F ` y ) ) ) ;;
	step 33 : wff = ex (step 32) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → ( ( x ∈ A ∧ y ∈ A ) → ( x ∈ y → ( F ` x ) ∈ ( F ` y ) ) ) ) ;;
	step 34 : wff = sylbid (step 26, step 33) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → ( ( x ∈ dom F ∧ y ∈ dom F ) → ( x ∈ y → ( F ` x ) ∈ ( F ` y ) ) ) ) ;;
	step 35 : wff = ralrimivv (step 34) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → ∀ x ∈ dom F ∀ y ∈ dom F ( x ∈ y → ( F ` x ) ∈ ( F ` y ) ) ) ;;
	step 36 : wff = 3ad2ant1 (step 35) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → ∀ x ∈ dom F ∀ y ∈ dom F ( x ∈ y → ( F ` x ) ∈ ( F ` y ) ) ) ;;
	step 37 : wff = df-smo () |- ( Smo F ↔ ( F : dom F ⟶ On ∧ Ord dom F ∧ ∀ x ∈ dom F ∀ y ∈ dom F ( x ∈ y → ( F ` x ) ∈ ( F ` y ) ) ) ) ;;
	step 38 : wff = syl3anbrc (step 9, step 18, step 36, step 37) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → Smo F ) ;;
	qed prop 1 = step 38 ;;
}

/*A strictly monotone ordinal function preserves the epsilon relation.
       (Contributed by Mario Carneiro, 12-Mar-2013.) */

theorem smoel2 (A : class, B : class, C : class, F : class) disjointed(A, B, F) {
	prop 1 : wff = |- ( ( ( F Fn A ∧ Smo F ) ∧ ( B ∈ A ∧ C ∈ B ) ) → ( F ` C ) ∈ ( F ` B ) ) ;;
}

proof of smoel2 {
	step 1 : wff = fndm () |- ( F Fn A → dom F = A ) ;;
	step 2 : wff = eleq2d (step 1) |- ( F Fn A → ( B ∈ dom F ↔ B ∈ A ) ) ;;
	step 3 : wff = anbi1d (step 2) |- ( F Fn A → ( ( B ∈ dom F ∧ C ∈ B ) ↔ ( B ∈ A ∧ C ∈ B ) ) ) ;;
	step 4 : wff = biimprd (step 3) |- ( F Fn A → ( ( B ∈ A ∧ C ∈ B ) → ( B ∈ dom F ∧ C ∈ B ) ) ) ;;
	step 5 : wff = smoel () |- ( ( Smo F ∧ B ∈ dom F ∧ C ∈ B ) → ( F ` C ) ∈ ( F ` B ) ) ;;
	step 6 : wff = 3expib (step 5) |- ( Smo F → ( ( B ∈ dom F ∧ C ∈ B ) → ( F ` C ) ∈ ( F ` B ) ) ) ;;
	step 7 : wff = sylan9 (step 4, step 6) |- ( ( F Fn A ∧ Smo F ) → ( ( B ∈ A ∧ C ∈ B ) → ( F ` C ) ∈ ( F ` B ) ) ) ;;
	step 8 : wff = imp (step 7) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( B ∈ A ∧ C ∈ B ) ) → ( F ` C ) ∈ ( F ` B ) ) ;;
	qed prop 1 = step 8 ;;
}

/*A strictly monotone ordinal function is one-to-one.  (Contributed by
       Mario Carneiro, 28-Feb-2013.) */

theorem smo11 (A : class, B : class, F : class) disjointed(A w x y z, F w x y z) {
	prop 1 : wff = |- ( ( F : A ⟶ B ∧ Smo F ) → F : A ↣ B ) ;;
}

proof of smo11 {
	var x : set, y : set, z : set, w : set;;
	step 1 : wff = simpl () |- ( ( F : A ⟶ B ∧ Smo F ) → F : A ⟶ B ) ;;
	step 2 : wff = ffn () |- ( F : A ⟶ B → F Fn A ) ;;
	step 3 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 4 : wff = ordelord () |- ( ( Ord A ∧ z ∈ A ) → Ord z ) ;;
	step 5 : wff = ex (step 4) |- ( Ord A → ( z ∈ A → Ord z ) ) ;;
	step 6 : wff = syl (step 3, step 5) |- ( ( F Fn A ∧ Smo F ) → ( z ∈ A → Ord z ) ) ;;
	step 7 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 8 : wff = ordelord () |- ( ( Ord A ∧ w ∈ A ) → Ord w ) ;;
	step 9 : wff = ex (step 8) |- ( Ord A → ( w ∈ A → Ord w ) ) ;;
	step 10 : wff = syl (step 7, step 9) |- ( ( F Fn A ∧ Smo F ) → ( w ∈ A → Ord w ) ) ;;
	step 11 : wff = anim12d (step 6, step 10) |- ( ( F Fn A ∧ Smo F ) → ( ( z ∈ A ∧ w ∈ A ) → ( Ord z ∧ Ord w ) ) ) ;;
	step 12 : wff = ordtri3or () |- ( ( Ord z ∧ Ord w ) → ( z ∈ w ∨ z = w ∨ w ∈ z ) ) ;;
	step 13 : wff = simp1rr () |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → w ∈ A ) ;;
	step 14 : wff = smoel2 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( x ∈ A ∧ y ∈ x ) ) → ( F ` y ) ∈ ( F ` x ) ) ;;
	step 15 : wff = ralrimivva (step 14) |- ( ( F Fn A ∧ Smo F ) → ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 16 : wff = adantr (step 15) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 17 : wff = 3ad2ant1 (step 16) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 18 : wff = simp2 () |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → z ∈ w ) ;;
	step 19 : wff = simp3 () |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → ( F ` z ) = ( F ` w ) ) ;;
	step 20 : wff = fveq2 () |- ( x = w → ( F ` x ) = ( F ` w ) ) ;;
	step 21 : wff = eleq2d (step 20) |- ( x = w → ( ( F ` y ) ∈ ( F ` x ) ↔ ( F ` y ) ∈ ( F ` w ) ) ) ;;
	step 22 : wff = raleqbi1dv (step 21) |- ( x = w → ( ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ↔ ∀ y ∈ w ( F ` y ) ∈ ( F ` w ) ) ) ;;
	step 23 : wff = rspcv (step 22) |- ( w ∈ A → ( ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) → ∀ y ∈ w ( F ` y ) ∈ ( F ` w ) ) ) ;;
	step 24 : wff = fveq2 () |- ( y = z → ( F ` y ) = ( F ` z ) ) ;;
	step 25 : wff = eleq1d (step 24) |- ( y = z → ( ( F ` y ) ∈ ( F ` w ) ↔ ( F ` z ) ∈ ( F ` w ) ) ) ;;
	step 26 : wff = rspccv (step 25) |- ( ∀ y ∈ w ( F ` y ) ∈ ( F ` w ) → ( z ∈ w → ( F ` z ) ∈ ( F ` w ) ) ) ;;
	step 27 : wff = syl6 (step 23, step 26) |- ( w ∈ A → ( ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) → ( z ∈ w → ( F ` z ) ∈ ( F ` w ) ) ) ) ;;
	step 28 : wff = 3imp (step 27) |- ( ( w ∈ A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ∧ z ∈ w ) → ( F ` z ) ∈ ( F ` w ) ) ;;
	step 29 : wff = eleq1 () |- ( ( F ` z ) = ( F ` w ) → ( ( F ` z ) ∈ ( F ` w ) ↔ ( F ` w ) ∈ ( F ` w ) ) ) ;;
	step 30 : wff = biimpac (step 29) |- ( ( ( F ` z ) ∈ ( F ` w ) ∧ ( F ` z ) = ( F ` w ) ) → ( F ` w ) ∈ ( F ` w ) ) ;;
	step 31 : wff = sylan (step 28, step 30) |- ( ( ( w ∈ A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ∧ z ∈ w ) ∧ ( F ` z ) = ( F ` w ) ) → ( F ` w ) ∈ ( F ` w ) ) ;;
	step 32 : wff = syl31anc (step 13, step 17, step 18, step 19, step 31) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → ( F ` w ) ∈ ( F ` w ) ) ;;
	step 33 : wff = smofvon2 () |- ( Smo F → ( F ` w ) ∈ On ) ;;
	step 34 : wff = eloni () |- ( ( F ` w ) ∈ On → Ord ( F ` w ) ) ;;
	step 35 : wff = ordirr () |- ( Ord ( F ` w ) → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 36 : wff = 3syl (step 33, step 34, step 35) |- ( Smo F → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 37 : wff = ad2antlr (step 36) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 38 : wff = 3ad2ant1 (step 37) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 39 : wff = pm2.65i (step 32, step 38) |- ¬ ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) ;;
	step 40 : wff = pm2.21i (step 39) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ z ∈ w ∧ ( F ` z ) = ( F ` w ) ) → z = w ) ;;
	step 41 : wff = 3exp (step 40) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ( z ∈ w → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 42 : wff = ax-1 () |- ( z = w → ( ( F ` z ) = ( F ` w ) → z = w ) ) ;;
	step 43 : wff = a1i (step 42) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ( z = w → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 44 : wff = simp1rl () |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → z ∈ A ) ;;
	step 45 : wff = smoel2 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( x ∈ A ∧ y ∈ x ) ) → ( F ` y ) ∈ ( F ` x ) ) ;;
	step 46 : wff = ralrimivva (step 45) |- ( ( F Fn A ∧ Smo F ) → ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 47 : wff = adantr (step 46) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 48 : wff = 3ad2ant1 (step 47) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ) ;;
	step 49 : wff = simp2 () |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → w ∈ z ) ;;
	step 50 : wff = simp3 () |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → ( F ` z ) = ( F ` w ) ) ;;
	step 51 : wff = fveq2 () |- ( x = z → ( F ` x ) = ( F ` z ) ) ;;
	step 52 : wff = eleq2d (step 51) |- ( x = z → ( ( F ` y ) ∈ ( F ` x ) ↔ ( F ` y ) ∈ ( F ` z ) ) ) ;;
	step 53 : wff = raleqbi1dv (step 52) |- ( x = z → ( ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ↔ ∀ y ∈ z ( F ` y ) ∈ ( F ` z ) ) ) ;;
	step 54 : wff = rspcv (step 53) |- ( z ∈ A → ( ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) → ∀ y ∈ z ( F ` y ) ∈ ( F ` z ) ) ) ;;
	step 55 : wff = fveq2 () |- ( y = w → ( F ` y ) = ( F ` w ) ) ;;
	step 56 : wff = eleq1d (step 55) |- ( y = w → ( ( F ` y ) ∈ ( F ` z ) ↔ ( F ` w ) ∈ ( F ` z ) ) ) ;;
	step 57 : wff = rspccv (step 56) |- ( ∀ y ∈ z ( F ` y ) ∈ ( F ` z ) → ( w ∈ z → ( F ` w ) ∈ ( F ` z ) ) ) ;;
	step 58 : wff = syl6 (step 54, step 57) |- ( z ∈ A → ( ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) → ( w ∈ z → ( F ` w ) ∈ ( F ` z ) ) ) ) ;;
	step 59 : wff = 3imp (step 58) |- ( ( z ∈ A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ∧ w ∈ z ) → ( F ` w ) ∈ ( F ` z ) ) ;;
	step 60 : wff = eleq2 () |- ( ( F ` z ) = ( F ` w ) → ( ( F ` w ) ∈ ( F ` z ) ↔ ( F ` w ) ∈ ( F ` w ) ) ) ;;
	step 61 : wff = biimpac (step 60) |- ( ( ( F ` w ) ∈ ( F ` z ) ∧ ( F ` z ) = ( F ` w ) ) → ( F ` w ) ∈ ( F ` w ) ) ;;
	step 62 : wff = sylan (step 59, step 61) |- ( ( ( z ∈ A ∧ ∀ x ∈ A ∀ y ∈ x ( F ` y ) ∈ ( F ` x ) ∧ w ∈ z ) ∧ ( F ` z ) = ( F ` w ) ) → ( F ` w ) ∈ ( F ` w ) ) ;;
	step 63 : wff = syl31anc (step 44, step 48, step 49, step 50, step 62) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → ( F ` w ) ∈ ( F ` w ) ) ;;
	step 64 : wff = smofvon2 () |- ( Smo F → ( F ` w ) ∈ On ) ;;
	step 65 : wff = eloni () |- ( ( F ` w ) ∈ On → Ord ( F ` w ) ) ;;
	step 66 : wff = ordirr () |- ( Ord ( F ` w ) → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 67 : wff = 3syl (step 64, step 65, step 66) |- ( Smo F → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 68 : wff = ad2antlr (step 67) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 69 : wff = 3ad2ant1 (step 68) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → ¬ ( F ` w ) ∈ ( F ` w ) ) ;;
	step 70 : wff = pm2.65i (step 63, step 69) |- ¬ ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) ;;
	step 71 : wff = pm2.21i (step 70) |- ( ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) ∧ w ∈ z ∧ ( F ` z ) = ( F ` w ) ) → z = w ) ;;
	step 72 : wff = 3exp (step 71) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ( w ∈ z → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 73 : wff = 3jaod (step 41, step 43, step 72) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ( ( z ∈ w ∨ z = w ∨ w ∈ z ) → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 74 : wff = syl5 (step 12, step 73) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( z ∈ A ∧ w ∈ A ) ) → ( ( Ord z ∧ Ord w ) → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 75 : wff = ex (step 74) |- ( ( F Fn A ∧ Smo F ) → ( ( z ∈ A ∧ w ∈ A ) → ( ( Ord z ∧ Ord w ) → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ) ;;
	step 76 : wff = mpdd (step 11, step 75) |- ( ( F Fn A ∧ Smo F ) → ( ( z ∈ A ∧ w ∈ A ) → ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 77 : wff = ralrimivv (step 76) |- ( ( F Fn A ∧ Smo F ) → ∀ z ∈ A ∀ w ∈ A ( ( F ` z ) = ( F ` w ) → z = w ) ) ;;
	step 78 : wff = sylan (step 2, step 77) |- ( ( F : A ⟶ B ∧ Smo F ) → ∀ z ∈ A ∀ w ∈ A ( ( F ` z ) = ( F ` w ) → z = w ) ) ;;
	step 79 : wff = dff13 () |- ( F : A ↣ B ↔ ( F : A ⟶ B ∧ ∀ z ∈ A ∀ w ∈ A ( ( F ` z ) = ( F ` w ) → z = w ) ) ) ;;
	step 80 : wff = sylanbrc (step 1, step 78, step 79) |- ( ( F : A ⟶ B ∧ Smo F ) → F : A ↣ B ) ;;
	qed prop 1 = step 80 ;;
}

/*A strictly monotone ordinal function preserves strict ordering.
       (Contributed by Mario Carneiro, 4-Mar-2013.) */

theorem smoord (A : class, C : class, D : class, F : class)  {
	prop 1 : wff = |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ;;
}

proof of smoord {
	step 1 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord A ) ;;
	step 3 : wff = simprl () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → C ∈ A ) ;;
	step 4 : wff = ordelord () |- ( ( Ord A ∧ C ∈ A ) → Ord C ) ;;
	step 5 : wff = syl2anc (step 2, step 3, step 4) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord C ) ;;
	step 6 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 7 : wff = adantr (step 6) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord A ) ;;
	step 8 : wff = simprr () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → D ∈ A ) ;;
	step 9 : wff = ordelord () |- ( ( Ord A ∧ D ∈ A ) → Ord D ) ;;
	step 10 : wff = syl2anc (step 7, step 8, step 9) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord D ) ;;
	step 11 : wff = ordtri3or () |- ( ( Ord C ∧ Ord D ) → ( C ∈ D ∨ C = D ∨ D ∈ C ) ) ;;
	step 12 : wff = simp3 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C ∈ D ) → C ∈ D ) ;;
	step 13 : wff = smoel2 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( D ∈ A ∧ C ∈ D ) ) → ( F ` C ) ∈ ( F ` D ) ) ;;
	step 14 : wff = expr (step 13) |- ( ( ( F Fn A ∧ Smo F ) ∧ D ∈ A ) → ( C ∈ D → ( F ` C ) ∈ ( F ` D ) ) ) ;;
	step 15 : wff = adantrl (step 14) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ∈ D → ( F ` C ) ∈ ( F ` D ) ) ) ;;
	step 16 : wff = 3impia (step 15) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C ∈ D ) → ( F ` C ) ∈ ( F ` D ) ) ;;
	step 17 : wff = 2thd (step 12, step 16) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C ∈ D ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ;;
	step 18 : wff = 3expia (step 17) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ∈ D → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ) ;;
	step 19 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 20 : wff = adantr (step 19) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord A ) ;;
	step 21 : wff = simprl () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → C ∈ A ) ;;
	step 22 : wff = ordelord () |- ( ( Ord A ∧ C ∈ A ) → Ord C ) ;;
	step 23 : wff = syl2anc (step 20, step 21, step 22) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord C ) ;;
	step 24 : wff = ordirr () |- ( Ord C → ¬ C ∈ C ) ;;
	step 25 : wff = syl (step 23, step 24) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ¬ C ∈ C ) ;;
	step 26 : wff = 3adant3 (step 25) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ¬ C ∈ C ) ;;
	step 27 : wff = simp3 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → C = D ) ;;
	step 28 : wff = eleq2d (step 27) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ( C ∈ C ↔ C ∈ D ) ) ;;
	step 29 : wff = mtbid (step 26, step 28) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ¬ C ∈ D ) ;;
	step 30 : wff = smofvon2 () |- ( Smo F → ( F ` C ) ∈ On ) ;;
	step 31 : wff = ad2antlr (step 30) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( F ` C ) ∈ On ) ;;
	step 32 : wff = eloni () |- ( ( F ` C ) ∈ On → Ord ( F ` C ) ) ;;
	step 33 : wff = ordirr () |- ( Ord ( F ` C ) → ¬ ( F ` C ) ∈ ( F ` C ) ) ;;
	step 34 : wff = 3syl (step 31, step 32, step 33) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ¬ ( F ` C ) ∈ ( F ` C ) ) ;;
	step 35 : wff = 3adant3 (step 34) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ¬ ( F ` C ) ∈ ( F ` C ) ) ;;
	step 36 : wff = simp3 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → C = D ) ;;
	step 37 : wff = fveq2d (step 36) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ( F ` C ) = ( F ` D ) ) ;;
	step 38 : wff = eleq2d (step 37) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ( ( F ` C ) ∈ ( F ` C ) ↔ ( F ` C ) ∈ ( F ` D ) ) ) ;;
	step 39 : wff = mtbid (step 35, step 38) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ¬ ( F ` C ) ∈ ( F ` D ) ) ;;
	step 40 : wff = 2falsed (step 29, step 39) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ C = D ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ;;
	step 41 : wff = 3expia (step 40) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C = D → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ) ;;
	step 42 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 43 : wff = adantr (step 42) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord A ) ;;
	step 44 : wff = simprr () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → D ∈ A ) ;;
	step 45 : wff = ordelord () |- ( ( Ord A ∧ D ∈ A ) → Ord D ) ;;
	step 46 : wff = syl2anc (step 43, step 44, step 45) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord D ) ;;
	step 47 : wff = 3adant3 (step 46) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → Ord D ) ;;
	step 48 : wff = ordn2lp () |- ( Ord D → ¬ ( D ∈ C ∧ C ∈ D ) ) ;;
	step 49 : wff = syl (step 47, step 48) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ¬ ( D ∈ C ∧ C ∈ D ) ) ;;
	step 50 : wff = pm3.2 () |- ( D ∈ C → ( C ∈ D → ( D ∈ C ∧ C ∈ D ) ) ) ;;
	step 51 : wff = 3ad2ant3 (step 50) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ( C ∈ D → ( D ∈ C ∧ C ∈ D ) ) ) ;;
	step 52 : wff = mtod (step 49, step 51) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ¬ C ∈ D ) ;;
	step 53 : wff = smofvon2 () |- ( Smo F → ( F ` C ) ∈ On ) ;;
	step 54 : wff = ad2antlr (step 53) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( F ` C ) ∈ On ) ;;
	step 55 : wff = eloni () |- ( ( F ` C ) ∈ On → Ord ( F ` C ) ) ;;
	step 56 : wff = syl (step 54, step 55) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord ( F ` C ) ) ;;
	step 57 : wff = 3adant3 (step 56) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → Ord ( F ` C ) ) ;;
	step 58 : wff = ordn2lp () |- ( Ord ( F ` C ) → ¬ ( ( F ` C ) ∈ ( F ` D ) ∧ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 59 : wff = syl (step 57, step 58) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ¬ ( ( F ` C ) ∈ ( F ` D ) ∧ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 60 : wff = smoel2 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ C ) ) → ( F ` D ) ∈ ( F ` C ) ) ;;
	step 61 : wff = adantrlr (step 60) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) ) → ( F ` D ) ∈ ( F ` C ) ) ;;
	step 62 : wff = 3impb (step 61) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ( F ` D ) ∈ ( F ` C ) ) ;;
	step 63 : wff = pm3.21 () |- ( ( F ` D ) ∈ ( F ` C ) → ( ( F ` C ) ∈ ( F ` D ) → ( ( F ` C ) ∈ ( F ` D ) ∧ ( F ` D ) ∈ ( F ` C ) ) ) ) ;;
	step 64 : wff = syl (step 62, step 63) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ( ( F ` C ) ∈ ( F ` D ) → ( ( F ` C ) ∈ ( F ` D ) ∧ ( F ` D ) ∈ ( F ` C ) ) ) ) ;;
	step 65 : wff = mtod (step 59, step 64) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ¬ ( F ` C ) ∈ ( F ` D ) ) ;;
	step 66 : wff = 2falsed (step 52, step 65) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ∧ D ∈ C ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ;;
	step 67 : wff = 3expia (step 66) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( D ∈ C → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ) ;;
	step 68 : wff = 3jaod (step 18, step 41, step 67) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( ( C ∈ D ∨ C = D ∨ D ∈ C ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ) ;;
	step 69 : wff = syl5 (step 11, step 68) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( ( Ord C ∧ Ord D ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ) ;;
	step 70 : wff = mp2and (step 5, step 10, step 69) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ∈ D ↔ ( F ` C ) ∈ ( F ` D ) ) ) ;;
	qed prop 1 = step 70 ;;
}

/*A strictly monotone ordinal function preserves weak ordering.
       (Contributed by Mario Carneiro, 4-Mar-2013.) */

theorem smoword (A : class, C : class, D : class, F : class)  {
	prop 1 : wff = |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ⊆ D ↔ ( F ` C ) ⊆ ( F ` D ) ) ) ;;
}

proof of smoword {
	step 1 : wff = smoord () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( D ∈ A ∧ C ∈ A ) ) → ( D ∈ C ↔ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 2 : wff = notbid (step 1) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( D ∈ A ∧ C ∈ A ) ) → ( ¬ D ∈ C ↔ ¬ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 3 : wff = ancom2s (step 2) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( ¬ D ∈ C ↔ ¬ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 4 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 5 : wff = adantr (step 4) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord A ) ;;
	step 6 : wff = simprl () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → C ∈ A ) ;;
	step 7 : wff = ordelord () |- ( ( Ord A ∧ C ∈ A ) → Ord C ) ;;
	step 8 : wff = syl2anc (step 5, step 6, step 7) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord C ) ;;
	step 9 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 10 : wff = adantr (step 9) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord A ) ;;
	step 11 : wff = simprr () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → D ∈ A ) ;;
	step 12 : wff = ordelord () |- ( ( Ord A ∧ D ∈ A ) → Ord D ) ;;
	step 13 : wff = syl2anc (step 10, step 11, step 12) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord D ) ;;
	step 14 : wff = ordtri1 () |- ( ( Ord C ∧ Ord D ) → ( C ⊆ D ↔ ¬ D ∈ C ) ) ;;
	step 15 : wff = syl2anc (step 8, step 13, step 14) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ⊆ D ↔ ¬ D ∈ C ) ) ;;
	step 16 : wff = simplr () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Smo F ) ;;
	step 17 : wff = smofvon2 () |- ( Smo F → ( F ` C ) ∈ On ) ;;
	step 18 : wff = eloni () |- ( ( F ` C ) ∈ On → Ord ( F ` C ) ) ;;
	step 19 : wff = 3syl (step 16, step 17, step 18) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord ( F ` C ) ) ;;
	step 20 : wff = simplr () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Smo F ) ;;
	step 21 : wff = smofvon2 () |- ( Smo F → ( F ` D ) ∈ On ) ;;
	step 22 : wff = eloni () |- ( ( F ` D ) ∈ On → Ord ( F ` D ) ) ;;
	step 23 : wff = 3syl (step 20, step 21, step 22) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → Ord ( F ` D ) ) ;;
	step 24 : wff = ordtri1 () |- ( ( Ord ( F ` C ) ∧ Ord ( F ` D ) ) → ( ( F ` C ) ⊆ ( F ` D ) ↔ ¬ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 25 : wff = syl2anc (step 19, step 23, step 24) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( ( F ` C ) ⊆ ( F ` D ) ↔ ¬ ( F ` D ) ∈ ( F ` C ) ) ) ;;
	step 26 : wff = 3bitr4d (step 3, step 15, step 25) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( C ∈ A ∧ D ∈ A ) ) → ( C ⊆ D ↔ ( F ` C ) ⊆ ( F ` D ) ) ) ;;
	qed prop 1 = step 26 ;;
}

/*A strictly monotone ordinal function is greater than or equal to its
       argument.  Exercise 1 in [TakeutiZaring] p. 50.  (Contributed by Andrew
       Salmon, 23-Nov-2011.)  (Revised by Mario Carneiro, 28-Feb-2013.) */

theorem smogt (A : class, C : class, F : class) disjointed(A y x, C x, F y x) {
	prop 1 : wff = |- ( ( F Fn A ∧ Smo F ∧ C ∈ A ) → C ⊆ ( F ` C ) ) ;;
}

proof of smogt {
	var x : set, y : set;;
	step 1 : wff = id () |- ( x = C → x = C ) ;;
	step 2 : wff = fveq2 () |- ( x = C → ( F ` x ) = ( F ` C ) ) ;;
	step 3 : wff = sseq12d (step 1, step 2) |- ( x = C → ( x ⊆ ( F ` x ) ↔ C ⊆ ( F ` C ) ) ) ;;
	step 4 : wff = imbi2d (step 3) |- ( x = C → ( ( ( F Fn A ∧ Smo F ) → x ⊆ ( F ` x ) ) ↔ ( ( F Fn A ∧ Smo F ) → C ⊆ ( F ` C ) ) ) ) ;;
	step 5 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 6 : wff = 3adant3 (step 5) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → Ord A ) ;;
	step 7 : wff = simp3 () |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ∈ A ) ;;
	step 8 : wff = ordelord () |- ( ( Ord A ∧ x ∈ A ) → Ord x ) ;;
	step 9 : wff = syl2anc (step 6, step 7, step 8) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → Ord x ) ;;
	step 10 : wff = vex () |- x ∈ _V ;;
	step 11 : wff = elon (step 10) |- ( x ∈ On ↔ Ord x ) ;;
	step 12 : wff = sylibr (step 9, step 11) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ∈ On ) ;;
	step 13 : wff = eleq1 () |- ( x = y → ( x ∈ A ↔ y ∈ A ) ) ;;
	step 14 : wff = 3anbi3d (step 13) |- ( x = y → ( ( F Fn A ∧ Smo F ∧ x ∈ A ) ↔ ( F Fn A ∧ Smo F ∧ y ∈ A ) ) ) ;;
	step 15 : wff = id () |- ( x = y → x = y ) ;;
	step 16 : wff = fveq2 () |- ( x = y → ( F ` x ) = ( F ` y ) ) ;;
	step 17 : wff = sseq12d (step 15, step 16) |- ( x = y → ( x ⊆ ( F ` x ) ↔ y ⊆ ( F ` y ) ) ) ;;
	step 18 : wff = imbi12d (step 14, step 17) |- ( x = y → ( ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ↔ ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) ) ) ;;
	step 19 : wff = simpl1 () |- ( ( ( F Fn A ∧ Smo F ∧ x ∈ A ) ∧ y ∈ x ) → F Fn A ) ;;
	step 20 : wff = simpl2 () |- ( ( ( F Fn A ∧ Smo F ∧ x ∈ A ) ∧ y ∈ x ) → Smo F ) ;;
	step 21 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 22 : wff = 3adant3 (step 21) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → Ord A ) ;;
	step 23 : wff = simp3 () |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ∈ A ) ;;
	step 24 : wff = ordtr1 () |- ( Ord A → ( ( y ∈ x ∧ x ∈ A ) → y ∈ A ) ) ;;
	step 25 : wff = exp3acom23 (step 24) |- ( Ord A → ( x ∈ A → ( y ∈ x → y ∈ A ) ) ) ;;
	step 26 : wff = sylc (step 22, step 23, step 25) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → ( y ∈ x → y ∈ A ) ) ;;
	step 27 : wff = imp (step 26) |- ( ( ( F Fn A ∧ Smo F ∧ x ∈ A ) ∧ y ∈ x ) → y ∈ A ) ;;
	step 28 : wff = pm2.27 () |- ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → ( ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) → y ⊆ ( F ` y ) ) ) ;;
	step 29 : wff = syl3anc (step 19, step 20, step 27, step 28) |- ( ( ( F Fn A ∧ Smo F ∧ x ∈ A ) ∧ y ∈ x ) → ( ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) → y ⊆ ( F ` y ) ) ) ;;
	step 30 : wff = ralimdva (step 29) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → ( ∀ y ∈ x ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) → ∀ y ∈ x y ⊆ ( F ` y ) ) ) ;;
	step 31 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 32 : wff = 3adant3 (step 31) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → Ord A ) ;;
	step 33 : wff = simp31 () |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → x ∈ A ) ;;
	step 34 : wff = ordelord () |- ( ( Ord A ∧ x ∈ A ) → Ord x ) ;;
	step 35 : wff = syl2anc (step 32, step 33, step 34) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → Ord x ) ;;
	step 36 : wff = simp32 () |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → y ∈ x ) ;;
	step 37 : wff = ordelord () |- ( ( Ord x ∧ y ∈ x ) → Ord y ) ;;
	step 38 : wff = syl2anc (step 35, step 36, step 37) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → Ord y ) ;;
	step 39 : wff = smofvon2 () |- ( Smo F → ( F ` x ) ∈ On ) ;;
	step 40 : wff = 3ad2ant2 (step 39) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → ( F ` x ) ∈ On ) ;;
	step 41 : wff = eloni () |- ( ( F ` x ) ∈ On → Ord ( F ` x ) ) ;;
	step 42 : wff = syl (step 40, step 41) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → Ord ( F ` x ) ) ;;
	step 43 : wff = simp33 () |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → y ⊆ ( F ` y ) ) ;;
	step 44 : wff = smoel2 () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( x ∈ A ∧ y ∈ x ) ) → ( F ` y ) ∈ ( F ` x ) ) ;;
	step 45 : wff = 3adantr3 (step 44) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → ( F ` y ) ∈ ( F ` x ) ) ;;
	step 46 : wff = 3impa (step 45) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → ( F ` y ) ∈ ( F ` x ) ) ;;
	step 47 : wff = ordtr2 () |- ( ( Ord y ∧ Ord ( F ` x ) ) → ( ( y ⊆ ( F ` y ) ∧ ( F ` y ) ∈ ( F ` x ) ) → y ∈ ( F ` x ) ) ) ;;
	step 48 : wff = imp (step 47) |- ( ( ( Ord y ∧ Ord ( F ` x ) ) ∧ ( y ⊆ ( F ` y ) ∧ ( F ` y ) ∈ ( F ` x ) ) ) → y ∈ ( F ` x ) ) ;;
	step 49 : wff = syl22anc (step 38, step 42, step 43, step 46, step 48) |- ( ( F Fn A ∧ Smo F ∧ ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) ) → y ∈ ( F ` x ) ) ;;
	step 50 : wff = 3expia (step 49) |- ( ( F Fn A ∧ Smo F ) → ( ( x ∈ A ∧ y ∈ x ∧ y ⊆ ( F ` y ) ) → y ∈ ( F ` x ) ) ) ;;
	step 51 : wff = 3expd (step 50) |- ( ( F Fn A ∧ Smo F ) → ( x ∈ A → ( y ∈ x → ( y ⊆ ( F ` y ) → y ∈ ( F ` x ) ) ) ) ) ;;
	step 52 : wff = 3impia (step 51) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → ( y ∈ x → ( y ⊆ ( F ` y ) → y ∈ ( F ` x ) ) ) ) ;;
	step 53 : wff = imp (step 52) |- ( ( ( F Fn A ∧ Smo F ∧ x ∈ A ) ∧ y ∈ x ) → ( y ⊆ ( F ` y ) → y ∈ ( F ` x ) ) ) ;;
	step 54 : wff = ralimdva (step 53) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → ( ∀ y ∈ x y ⊆ ( F ` y ) → ∀ y ∈ x y ∈ ( F ` x ) ) ) ;;
	step 55 : wff = dfss3 () |- ( x ⊆ ( F ` x ) ↔ ∀ y ∈ x y ∈ ( F ` x ) ) ;;
	step 56 : wff = syl6ibr (step 54, step 55) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → ( ∀ y ∈ x y ⊆ ( F ` y ) → x ⊆ ( F ` x ) ) ) ;;
	step 57 : wff = syld (step 30, step 56) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → ( ∀ y ∈ x ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) → x ⊆ ( F ` x ) ) ) ;;
	step 58 : wff = com12 (step 57) |- ( ∀ y ∈ x ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) → ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ) ;;
	step 59 : wff = a1i (step 58) |- ( x ∈ On → ( ∀ y ∈ x ( ( F Fn A ∧ Smo F ∧ y ∈ A ) → y ⊆ ( F ` y ) ) → ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ) ) ;;
	step 60 : wff = tfis2 (step 18, step 59) |- ( x ∈ On → ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ) ;;
	step 61 : wff = mpcom (step 12, step 60) |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ;;
	step 62 : wff = 3expia (step 61) |- ( ( F Fn A ∧ Smo F ) → ( x ∈ A → x ⊆ ( F ` x ) ) ) ;;
	step 63 : wff = com12 (step 62) |- ( x ∈ A → ( ( F Fn A ∧ Smo F ) → x ⊆ ( F ` x ) ) ) ;;
	step 64 : wff = vtoclga (step 4, step 63) |- ( C ∈ A → ( ( F Fn A ∧ Smo F ) → C ⊆ ( F ` C ) ) ) ;;
	step 65 : wff = com12 (step 64) |- ( ( F Fn A ∧ Smo F ) → ( C ∈ A → C ⊆ ( F ` C ) ) ) ;;
	step 66 : wff = 3impia (step 65) |- ( ( F Fn A ∧ Smo F ∧ C ∈ A ) → C ⊆ ( F ` C ) ) ;;
	qed prop 1 = step 66 ;;
}

/*The range of a strictly monotone ordinal function dominates the domain.
       (Contributed by Mario Carneiro, 13-Mar-2013.) */

theorem smorndom (A : class, B : class, F : class) disjointed(A x, B x, F x) {
	prop 1 : wff = |- ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) → A ⊆ B ) ;;
}

proof of smorndom {
	var x : set;;
	step 1 : wff = simpl1 () |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → F : A ⟶ B ) ;;
	step 2 : wff = ffn () |- ( F : A ⟶ B → F Fn A ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → F Fn A ) ;;
	step 4 : wff = simpl2 () |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → Smo F ) ;;
	step 5 : wff = smodm2 () |- ( ( F Fn A ∧ Smo F ) → Ord A ) ;;
	step 6 : wff = syl2anc (step 3, step 4, step 5) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → Ord A ) ;;
	step 7 : wff = ordelord () |- ( ( Ord A ∧ x ∈ A ) → Ord x ) ;;
	step 8 : wff = sylancom (step 6, step 7) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → Ord x ) ;;
	step 9 : wff = simpl3 () |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → Ord B ) ;;
	step 10 : wff = simpl1 () |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → F : A ⟶ B ) ;;
	step 11 : wff = ffn () |- ( F : A ⟶ B → F Fn A ) ;;
	step 12 : wff = syl (step 10, step 11) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → F Fn A ) ;;
	step 13 : wff = simpl2 () |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → Smo F ) ;;
	step 14 : wff = simpr () |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → x ∈ A ) ;;
	step 15 : wff = smogt () |- ( ( F Fn A ∧ Smo F ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ;;
	step 16 : wff = syl3anc (step 12, step 13, step 14, step 15) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → x ⊆ ( F ` x ) ) ;;
	step 17 : wff = ffvelrn () |- ( ( F : A ⟶ B ∧ x ∈ A ) → ( F ` x ) ∈ B ) ;;
	step 18 : wff = 3ad2antl1 (step 17) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → ( F ` x ) ∈ B ) ;;
	step 19 : wff = ordtr2 () |- ( ( Ord x ∧ Ord B ) → ( ( x ⊆ ( F ` x ) ∧ ( F ` x ) ∈ B ) → x ∈ B ) ) ;;
	step 20 : wff = imp (step 19) |- ( ( ( Ord x ∧ Ord B ) ∧ ( x ⊆ ( F ` x ) ∧ ( F ` x ) ∈ B ) ) → x ∈ B ) ;;
	step 21 : wff = syl22anc (step 8, step 9, step 16, step 18, step 20) |- ( ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) ∧ x ∈ A ) → x ∈ B ) ;;
	step 22 : wff = ex (step 21) |- ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) → ( x ∈ A → x ∈ B ) ) ;;
	step 23 : wff = ssrdv (step 22) |- ( ( F : A ⟶ B ∧ Smo F ∧ Ord B ) → A ⊆ B ) ;;
	qed prop 1 = step 23 ;;
}

/*The strictly monotone ordinal functions are also epsilon isomorphisms of
       subclasses of ` On ` .  (Contributed by Mario Carneiro, 20-Mar-2013.) */

theorem smoiso2 (A : class, B : class, F : class) disjointed(A x y, B x y, F x y) {
	prop 1 : wff = |- ( ( Ord A ∧ B ⊆ On ) → ( ( F : A ↠ B ∧ Smo F ) ↔ F Isom 𝛜 , 𝛜 ( A , B ) ) ) ;;
}

proof of smoiso2 {
	var x : set, y : set;;
	step 1 : wff = fof () |- ( F : A ↠ B → F : A ⟶ B ) ;;
	step 2 : wff = smo11 () |- ( ( F : A ⟶ B ∧ Smo F ) → F : A ↣ B ) ;;
	step 3 : wff = sylan (step 1, step 2) |- ( ( F : A ↠ B ∧ Smo F ) → F : A ↣ B ) ;;
	step 4 : wff = simpl () |- ( ( F : A ↠ B ∧ Smo F ) → F : A ↠ B ) ;;
	step 5 : wff = df-f1o () |- ( F : A ⤖ B ↔ ( F : A ↣ B ∧ F : A ↠ B ) ) ;;
	step 6 : wff = sylanbrc (step 3, step 4, step 5) |- ( ( F : A ↠ B ∧ Smo F ) → F : A ⤖ B ) ;;
	step 7 : wff = adantl (step 6) |- ( ( ( Ord A ∧ B ⊆ On ) ∧ ( F : A ↠ B ∧ Smo F ) ) → F : A ⤖ B ) ;;
	step 8 : wff = fofn () |- ( F : A ↠ B → F Fn A ) ;;
	step 9 : wff = smoord () |- ( ( ( F Fn A ∧ Smo F ) ∧ ( x ∈ A ∧ y ∈ A ) ) → ( x ∈ y ↔ ( F ` x ) ∈ ( F ` y ) ) ) ;;
	step 10 : wff = epel () |- ( x 𝛜 y ↔ x ∈ y ) ;;
	step 11 : wff = fvex () |- ( F ` y ) ∈ _V ;;
	step 12 : wff = epelc (step 11) |- ( ( F ` x ) 𝛜 ( F ` y ) ↔ ( F ` x ) ∈ ( F ` y ) ) ;;
	step 13 : wff = 3bitr4g (step 9, step 10, step 12) |- ( ( ( F Fn A ∧ Smo F ) ∧ ( x ∈ A ∧ y ∈ A ) ) → ( x 𝛜 y ↔ ( F ` x ) 𝛜 ( F ` y ) ) ) ;;
	step 14 : wff = ralrimivva (step 13) |- ( ( F Fn A ∧ Smo F ) → ∀ x ∈ A ∀ y ∈ A ( x 𝛜 y ↔ ( F ` x ) 𝛜 ( F ` y ) ) ) ;;
	step 15 : wff = sylan (step 8, step 14) |- ( ( F : A ↠ B ∧ Smo F ) → ∀ x ∈ A ∀ y ∈ A ( x 𝛜 y ↔ ( F ` x ) 𝛜 ( F ` y ) ) ) ;;
	step 16 : wff = adantl (step 15) |- ( ( ( Ord A ∧ B ⊆ On ) ∧ ( F : A ↠ B ∧ Smo F ) ) → ∀ x ∈ A ∀ y ∈ A ( x 𝛜 y ↔ ( F ` x ) 𝛜 ( F ` y ) ) ) ;;
	step 17 : wff = df-isom () |- ( F Isom 𝛜 , 𝛜 ( A , B ) ↔ ( F : A ⤖ B ∧ ∀ x ∈ A ∀ y ∈ A ( x 𝛜 y ↔ ( F ` x ) 𝛜 ( F ` y ) ) ) ) ;;
	step 18 : wff = sylanbrc (step 7, step 16, step 17) |- ( ( ( Ord A ∧ B ⊆ On ) ∧ ( F : A ↠ B ∧ Smo F ) ) → F Isom 𝛜 , 𝛜 ( A , B ) ) ;;
	step 19 : wff = ex (step 18) |- ( ( Ord A ∧ B ⊆ On ) → ( ( F : A ↠ B ∧ Smo F ) → F Isom 𝛜 , 𝛜 ( A , B ) ) ) ;;
	step 20 : wff = isof1o () |- ( F Isom 𝛜 , 𝛜 ( A , B ) → F : A ⤖ B ) ;;
	step 21 : wff = f1ofo () |- ( F : A ⤖ B → F : A ↠ B ) ;;
	step 22 : wff = syl (step 20, step 21) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → F : A ↠ B ) ;;
	step 23 : wff = 3ad2ant1 (step 22) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → F : A ↠ B ) ;;
	step 24 : wff = smoiso () |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → Smo F ) ;;
	step 25 : wff = jca (step 23, step 24) |- ( ( F Isom 𝛜 , 𝛜 ( A , B ) ∧ Ord A ∧ B ⊆ On ) → ( F : A ↠ B ∧ Smo F ) ) ;;
	step 26 : wff = 3expib (step 25) |- ( F Isom 𝛜 , 𝛜 ( A , B ) → ( ( Ord A ∧ B ⊆ On ) → ( F : A ↠ B ∧ Smo F ) ) ) ;;
	step 27 : wff = com12 (step 26) |- ( ( Ord A ∧ B ⊆ On ) → ( F Isom 𝛜 , 𝛜 ( A , B ) → ( F : A ↠ B ∧ Smo F ) ) ) ;;
	step 28 : wff = impbid (step 19, step 27) |- ( ( Ord A ∧ B ⊆ On ) → ( ( F : A ↠ B ∧ Smo F ) ↔ F Isom 𝛜 , 𝛜 ( A , B ) ) ) ;;
	qed prop 1 = step 28 ;;
}


