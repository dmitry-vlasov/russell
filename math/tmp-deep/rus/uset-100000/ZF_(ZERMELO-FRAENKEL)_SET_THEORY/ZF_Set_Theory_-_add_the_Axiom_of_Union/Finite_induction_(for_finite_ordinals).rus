import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Union/Peano_s_postulates.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Finite induction (for finite ordinals)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/*The Principle of Finite Induction (mathematical induction).  Corollary
       7.31 of [TakeutiZaring] p. 43.  The simpler hypothesis shown here was
       suggested in an email from "Colin" on 1-Oct-2001.  The hypothesis states
       that ` A ` is a set of natural numbers, zero belongs to ` A ` , and
       given any member of ` A ` the member's successor also belongs to
       ` A ` .  The conclusion is that every natural number is in ` A ` .
       (Contributed by NM, 22-Feb-2004.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) */

theorem find (x : set, A : class) disjointed(x A) {
	hyp 1 : wff = |- ( A ⊆ ω ∧ ∅ ∈ A ∧ ∀ x ∈ A suc x ∈ A ) ;;
	-----------------------
	prop 1 : wff = |- A = ω ;;
}

proof of find {
	step 1 : wff = simp1i (hyp 1) |- A ⊆ ω ;;
	step 2 : wff = 3simpc () |- ( ( A ⊆ ω ∧ ∅ ∈ A ∧ ∀ x ∈ A suc x ∈ A ) → ( ∅ ∈ A ∧ ∀ x ∈ A suc x ∈ A ) ) ;;
	step 3 : wff = ax-mp (hyp 1, step 2) |- ( ∅ ∈ A ∧ ∀ x ∈ A suc x ∈ A ) ;;
	step 4 : wff = df-ral () |- ( ∀ x ∈ A suc x ∈ A ↔ ∀ x ( x ∈ A → suc x ∈ A ) ) ;;
	step 5 : wff = alral () |- ( ∀ x ( x ∈ A → suc x ∈ A ) → ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ;;
	step 6 : wff = sylbi (step 4, step 5) |- ( ∀ x ∈ A suc x ∈ A → ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ;;
	step 7 : wff = anim2i (step 6) |- ( ( ∅ ∈ A ∧ ∀ x ∈ A suc x ∈ A ) → ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ) ;;
	step 8 : wff = ax-mp (step 3, step 7) |- ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ;;
	step 9 : wff = peano5 () |- ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) → ω ⊆ A ) ;;
	step 10 : wff = ax-mp (step 8, step 9) |- ω ⊆ A ;;
	step 11 : wff = eqssi (step 1, step 10) |- A = ω ;;
	qed prop 1 = step 11 ;;
}

/*Substitutions. */

/*Basis. */

/*Induction hypothesis. */

/*Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first four hypotheses establish the substitutions we
       need.  The last two are the basis and the induction hypothesis.  Theorem
       Schema 22 of [Suppes] p. 136.  (Contributed by NM, 14-Apr-1995.) */

theorem finds (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, x : set, y : set, A : class) disjointed(x y, x A, x ps, x ch, x th, x ta, y ph) {
	hyp 1 : wff = |- ( x = ∅ → ( ph ↔ ps ) ) ;;
	hyp 2 : wff = |- ( x = y → ( ph ↔ ch ) ) ;;
	hyp 3 : wff = |- ( x = suc y → ( ph ↔ th ) ) ;;
	hyp 4 : wff = |- ( x = A → ( ph ↔ ta ) ) ;;
	hyp 5 : wff = |- ps ;;
	hyp 6 : wff = |- ( y ∈ ω → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( A ∈ ω → ta ) ;;
}

proof of finds {
	step 1 : wff = 0ex () |- ∅ ∈ _V ;;
	step 2 : wff = elab (step 1, hyp 1) |- ( ∅ ∈ { x | ph } ↔ ps ) ;;
	step 3 : wff = mpbir (hyp 5, step 2) |- ∅ ∈ { x | ph } ;;
	step 4 : wff = vex () |- y ∈ _V ;;
	step 5 : wff = elab (step 4, hyp 2) |- ( y ∈ { x | ph } ↔ ch ) ;;
	step 6 : wff = vex () |- y ∈ _V ;;
	step 7 : wff = sucex (step 6) |- suc y ∈ _V ;;
	step 8 : wff = elab (step 7, hyp 3) |- ( suc y ∈ { x | ph } ↔ th ) ;;
	step 9 : wff = 3imtr4g (hyp 6, step 5, step 8) |- ( y ∈ ω → ( y ∈ { x | ph } → suc y ∈ { x | ph } ) ) ;;
	step 10 : wff = rgen (step 9) |- ∀ y ∈ ω ( y ∈ { x | ph } → suc y ∈ { x | ph } ) ;;
	step 11 : wff = peano5 () |- ( ( ∅ ∈ { x | ph } ∧ ∀ y ∈ ω ( y ∈ { x | ph } → suc y ∈ { x | ph } ) ) → ω ⊆ { x | ph } ) ;;
	step 12 : wff = mp2an (step 3, step 10, step 11) |- ω ⊆ { x | ph } ;;
	step 13 : wff = sseli (step 12) |- ( A ∈ ω → A ∈ { x | ph } ) ;;
	step 14 : wff = elabg (hyp 4) |- ( A ∈ ω → ( A ∈ { x | ph } ↔ ta ) ) ;;
	step 15 : wff = mpbid (step 13, step 14) |- ( A ∈ ω → ta ) ;;
	qed prop 1 = step 15 ;;
}

/*Substitutions. */

/*Basis. */

/*Induction hypothesis. */

/*Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first four hypotheses establish the substitutions we
       need.  The last two are the basis and the induction hypothesis.  The
       basis of this version is an arbitrary natural number ` B ` instead of
       zero.  (Contributed by NM, 16-Sep-1995.) */

theorem findsg (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, x : set, y : set, A : class, B : class) disjointed(x A, x y B, x ps, x ch, x th, x ta, y ph) {
	hyp 1 : wff = |- ( x = B → ( ph ↔ ps ) ) ;;
	hyp 2 : wff = |- ( x = y → ( ph ↔ ch ) ) ;;
	hyp 3 : wff = |- ( x = suc y → ( ph ↔ th ) ) ;;
	hyp 4 : wff = |- ( x = A → ( ph ↔ ta ) ) ;;
	hyp 5 : wff = |- ( B ∈ ω → ps ) ;;
	hyp 6 : wff = |- ( ( ( y ∈ ω ∧ B ∈ ω ) ∧ B ⊆ y ) → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( A ∈ ω ∧ B ∈ ω ) ∧ B ⊆ A ) → ta ) ;;
}

proof of findsg {
	step 1 : wff = sseq2 () |- ( x = ∅ → ( B ⊆ x ↔ B ⊆ ∅ ) ) ;;
	step 2 : wff = adantl (step 1) |- ( ( B = ∅ ∧ x = ∅ ) → ( B ⊆ x ↔ B ⊆ ∅ ) ) ;;
	step 3 : wff = eqeq2 () |- ( B = ∅ → ( x = B ↔ x = ∅ ) ) ;;
	step 4 : wff = syl6bir (step 3, hyp 1) |- ( B = ∅ → ( x = ∅ → ( ph ↔ ps ) ) ) ;;
	step 5 : wff = imp (step 4) |- ( ( B = ∅ ∧ x = ∅ ) → ( ph ↔ ps ) ) ;;
	step 6 : wff = imbi12d (step 2, step 5) |- ( ( B = ∅ ∧ x = ∅ ) → ( ( B ⊆ x → ph ) ↔ ( B ⊆ ∅ → ps ) ) ) ;;
	step 7 : wff = sseq2 () |- ( x = ∅ → ( B ⊆ x ↔ B ⊆ ∅ ) ) ;;
	step 8 : wff = imbi1d (step 7) |- ( x = ∅ → ( ( B ⊆ x → ph ) ↔ ( B ⊆ ∅ → ph ) ) ) ;;
	step 9 : wff = ss0 () |- ( B ⊆ ∅ → B = ∅ ) ;;
	step 10 : wff = con3i (step 9) |- ( ¬ B = ∅ → ¬ B ⊆ ∅ ) ;;
	step 11 : wff = pm2.21d (step 10) |- ( ¬ B = ∅ → ( B ⊆ ∅ → ( ph ↔ ps ) ) ) ;;
	step 12 : wff = pm5.74d (step 11) |- ( ¬ B = ∅ → ( ( B ⊆ ∅ → ph ) ↔ ( B ⊆ ∅ → ps ) ) ) ;;
	step 13 : wff = sylan9bbr (step 8, step 12) |- ( ( ¬ B = ∅ ∧ x = ∅ ) → ( ( B ⊆ x → ph ) ↔ ( B ⊆ ∅ → ps ) ) ) ;;
	step 14 : wff = pm2.61ian (step 6, step 13) |- ( x = ∅ → ( ( B ⊆ x → ph ) ↔ ( B ⊆ ∅ → ps ) ) ) ;;
	step 15 : wff = imbi2d (step 14) |- ( x = ∅ → ( ( B ∈ ω → ( B ⊆ x → ph ) ) ↔ ( B ∈ ω → ( B ⊆ ∅ → ps ) ) ) ) ;;
	step 16 : wff = sseq2 () |- ( x = y → ( B ⊆ x ↔ B ⊆ y ) ) ;;
	step 17 : wff = imbi12d (step 16, hyp 2) |- ( x = y → ( ( B ⊆ x → ph ) ↔ ( B ⊆ y → ch ) ) ) ;;
	step 18 : wff = imbi2d (step 17) |- ( x = y → ( ( B ∈ ω → ( B ⊆ x → ph ) ) ↔ ( B ∈ ω → ( B ⊆ y → ch ) ) ) ) ;;
	step 19 : wff = sseq2 () |- ( x = suc y → ( B ⊆ x ↔ B ⊆ suc y ) ) ;;
	step 20 : wff = imbi12d (step 19, hyp 3) |- ( x = suc y → ( ( B ⊆ x → ph ) ↔ ( B ⊆ suc y → th ) ) ) ;;
	step 21 : wff = imbi2d (step 20) |- ( x = suc y → ( ( B ∈ ω → ( B ⊆ x → ph ) ) ↔ ( B ∈ ω → ( B ⊆ suc y → th ) ) ) ) ;;
	step 22 : wff = sseq2 () |- ( x = A → ( B ⊆ x ↔ B ⊆ A ) ) ;;
	step 23 : wff = imbi12d (step 22, hyp 4) |- ( x = A → ( ( B ⊆ x → ph ) ↔ ( B ⊆ A → ta ) ) ) ;;
	step 24 : wff = imbi2d (step 23) |- ( x = A → ( ( B ∈ ω → ( B ⊆ x → ph ) ) ↔ ( B ∈ ω → ( B ⊆ A → ta ) ) ) ) ;;
	step 25 : wff = a1d (hyp 5) |- ( B ∈ ω → ( B ⊆ ∅ → ps ) ) ;;
	step 26 : wff = vex () |- y ∈ _V ;;
	step 27 : wff = sucex (step 26) |- suc y ∈ _V ;;
	step 28 : wff = eqvinc (step 27) |- ( suc y = B ↔ ∃ x ( x = suc y ∧ x = B ) ) ;;
	step 29 : wff = syl5ibr (hyp 5, hyp 1) |- ( x = B → ( B ∈ ω → ph ) ) ;;
	step 30 : wff = biimpd (hyp 3) |- ( x = suc y → ( ph → th ) ) ;;
	step 31 : wff = sylan9r (step 29, step 30) |- ( ( x = suc y ∧ x = B ) → ( B ∈ ω → th ) ) ;;
	step 32 : wff = exlimiv (step 31) |- ( ∃ x ( x = suc y ∧ x = B ) → ( B ∈ ω → th ) ) ;;
	step 33 : wff = sylbi (step 28, step 32) |- ( suc y = B → ( B ∈ ω → th ) ) ;;
	step 34 : wff = eqcoms (step 33) |- ( B = suc y → ( B ∈ ω → th ) ) ;;
	step 35 : wff = imim2i (step 34) |- ( ( B ⊆ suc y → B = suc y ) → ( B ⊆ suc y → ( B ∈ ω → th ) ) ) ;;
	step 36 : wff = a1d (step 35) |- ( ( B ⊆ suc y → B = suc y ) → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → ( B ∈ ω → th ) ) ) ) ;;
	step 37 : wff = com4r (step 36) |- ( B ∈ ω → ( ( B ⊆ suc y → B = suc y ) → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ) ;;
	step 38 : wff = adantl (step 37) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( ( B ⊆ suc y → B = suc y ) → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ) ;;
	step 39 : wff = df-ne () |- ( B ≠ suc y ↔ ¬ B = suc y ) ;;
	step 40 : wff = anbi2i (step 39) |- ( ( B ⊆ suc y ∧ B ≠ suc y ) ↔ ( B ⊆ suc y ∧ ¬ B = suc y ) ) ;;
	step 41 : wff = annim () |- ( ( B ⊆ suc y ∧ ¬ B = suc y ) ↔ ¬ ( B ⊆ suc y → B = suc y ) ) ;;
	step 42 : wff = bitri (step 40, step 41) |- ( ( B ⊆ suc y ∧ B ≠ suc y ) ↔ ¬ ( B ⊆ suc y → B = suc y ) ) ;;
	step 43 : wff = nnon () |- ( B ∈ ω → B ∈ On ) ;;
	step 44 : wff = nnon () |- ( y ∈ ω → y ∈ On ) ;;
	step 45 : wff = onsssuc () |- ( ( B ∈ On ∧ y ∈ On ) → ( B ⊆ y ↔ B ∈ suc y ) ) ;;
	step 46 : wff = suceloni () |- ( y ∈ On → suc y ∈ On ) ;;
	step 47 : wff = onelpss () |- ( ( B ∈ On ∧ suc y ∈ On ) → ( B ∈ suc y ↔ ( B ⊆ suc y ∧ B ≠ suc y ) ) ) ;;
	step 48 : wff = sylan2 (step 46, step 47) |- ( ( B ∈ On ∧ y ∈ On ) → ( B ∈ suc y ↔ ( B ⊆ suc y ∧ B ≠ suc y ) ) ) ;;
	step 49 : wff = bitrd (step 45, step 48) |- ( ( B ∈ On ∧ y ∈ On ) → ( B ⊆ y ↔ ( B ⊆ suc y ∧ B ≠ suc y ) ) ) ;;
	step 50 : wff = syl2anr (step 43, step 44, step 49) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( B ⊆ y ↔ ( B ⊆ suc y ∧ B ≠ suc y ) ) ) ;;
	step 51 : wff = ex (hyp 6) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( B ⊆ y → ( ch → th ) ) ) ;;
	step 52 : wff = ax-1 () |- ( th → ( B ⊆ suc y → th ) ) ;;
	step 53 : wff = syl8 (step 51, step 52) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( B ⊆ y → ( ch → ( B ⊆ suc y → th ) ) ) ) ;;
	step 54 : wff = a2d (step 53) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( ( B ⊆ y → ch ) → ( B ⊆ y → ( B ⊆ suc y → th ) ) ) ) ;;
	step 55 : wff = com23 (step 54) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( B ⊆ y → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ) ;;
	step 56 : wff = sylbird (step 50, step 55) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( ( B ⊆ suc y ∧ B ≠ suc y ) → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ) ;;
	step 57 : wff = syl5bir (step 42, step 56) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( ¬ ( B ⊆ suc y → B = suc y ) → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ) ;;
	step 58 : wff = pm2.61d (step 38, step 57) |- ( ( y ∈ ω ∧ B ∈ ω ) → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ;;
	step 59 : wff = ex (step 58) |- ( y ∈ ω → ( B ∈ ω → ( ( B ⊆ y → ch ) → ( B ⊆ suc y → th ) ) ) ) ;;
	step 60 : wff = a2d (step 59) |- ( y ∈ ω → ( ( B ∈ ω → ( B ⊆ y → ch ) ) → ( B ∈ ω → ( B ⊆ suc y → th ) ) ) ) ;;
	step 61 : wff = finds (step 15, step 18, step 21, step 24, step 25, step 60) |- ( A ∈ ω → ( B ∈ ω → ( B ⊆ A → ta ) ) ) ;;
	step 62 : wff = imp31 (step 61) |- ( ( ( A ∈ ω ∧ B ∈ ω ) ∧ B ⊆ A ) → ta ) ;;
	qed prop 1 = step 62 ;;
}

/*Substitutions. */

/*Basis. */

/*Induction hypothesis. */

/*Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first three hypotheses establish the substitutions
       we need.  The last two are the basis and the induction hypothesis.
       Theorem Schema 22 of [Suppes] p. 136.  (Contributed by NM,
       29-Nov-2002.) */

theorem finds2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, x : set, y : set) disjointed(x y ta, x ps, x ch, x th, y ph) {
	hyp 1 : wff = |- ( x = ∅ → ( ph ↔ ps ) ) ;;
	hyp 2 : wff = |- ( x = y → ( ph ↔ ch ) ) ;;
	hyp 3 : wff = |- ( x = suc y → ( ph ↔ th ) ) ;;
	hyp 4 : wff = |- ( ta → ps ) ;;
	hyp 5 : wff = |- ( y ∈ ω → ( ta → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( x ∈ ω → ( ta → ph ) ) ;;
}

proof of finds2 {
	step 1 : wff = 0ex () |- ∅ ∈ _V ;;
	step 2 : wff = imbi2d (hyp 1) |- ( x = ∅ → ( ( ta → ph ) ↔ ( ta → ps ) ) ) ;;
	step 3 : wff = elab (step 1, step 2) |- ( ∅ ∈ { x | ( ta → ph ) } ↔ ( ta → ps ) ) ;;
	step 4 : wff = mpbir (hyp 4, step 3) |- ∅ ∈ { x | ( ta → ph ) } ;;
	step 5 : wff = a2d (hyp 5) |- ( y ∈ ω → ( ( ta → ch ) → ( ta → th ) ) ) ;;
	step 6 : wff = vex () |- y ∈ _V ;;
	step 7 : wff = imbi2d (hyp 2) |- ( x = y → ( ( ta → ph ) ↔ ( ta → ch ) ) ) ;;
	step 8 : wff = elab (step 6, step 7) |- ( y ∈ { x | ( ta → ph ) } ↔ ( ta → ch ) ) ;;
	step 9 : wff = vex () |- y ∈ _V ;;
	step 10 : wff = sucex (step 9) |- suc y ∈ _V ;;
	step 11 : wff = imbi2d (hyp 3) |- ( x = suc y → ( ( ta → ph ) ↔ ( ta → th ) ) ) ;;
	step 12 : wff = elab (step 10, step 11) |- ( suc y ∈ { x | ( ta → ph ) } ↔ ( ta → th ) ) ;;
	step 13 : wff = 3imtr4g (step 5, step 8, step 12) |- ( y ∈ ω → ( y ∈ { x | ( ta → ph ) } → suc y ∈ { x | ( ta → ph ) } ) ) ;;
	step 14 : wff = rgen (step 13) |- ∀ y ∈ ω ( y ∈ { x | ( ta → ph ) } → suc y ∈ { x | ( ta → ph ) } ) ;;
	step 15 : wff = peano5 () |- ( ( ∅ ∈ { x | ( ta → ph ) } ∧ ∀ y ∈ ω ( y ∈ { x | ( ta → ph ) } → suc y ∈ { x | ( ta → ph ) } ) ) → ω ⊆ { x | ( ta → ph ) } ) ;;
	step 16 : wff = mp2an (step 4, step 14, step 15) |- ω ⊆ { x | ( ta → ph ) } ;;
	step 17 : wff = sseli (step 16) |- ( x ∈ ω → x ∈ { x | ( ta → ph ) } ) ;;
	step 18 : wff = abid () |- ( x ∈ { x | ( ta → ph ) } ↔ ( ta → ph ) ) ;;
	step 19 : wff = sylib (step 17, step 18) |- ( x ∈ ω → ( ta → ph ) ) ;;
	qed prop 1 = step 19 ;;
}

/*Substitutions. */

/*Basis. */

/*Induction hypothesis. */

/*Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first three hypotheses establish the substitutions
       we need.  The last two are the basis and the induction hypothesis.
       Theorem Schema 22 of [Suppes] p. 136.  (Contributed by NM,
       22-Mar-2006.) */

theorem finds1 (ph : wff, ps : wff, ch : wff, th : wff, x : set, y : set) disjointed(x y, x ps, x ch, x th, y ph) {
	hyp 1 : wff = |- ( x = ∅ → ( ph ↔ ps ) ) ;;
	hyp 2 : wff = |- ( x = y → ( ph ↔ ch ) ) ;;
	hyp 3 : wff = |- ( x = suc y → ( ph ↔ th ) ) ;;
	hyp 4 : wff = |- ps ;;
	hyp 5 : wff = |- ( y ∈ ω → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( x ∈ ω → ph ) ;;
}

proof of finds1 {
	step 1 : wff = eqid () |- ∅ = ∅ ;;
	step 2 : wff = a1i (hyp 4) |- ( ∅ = ∅ → ps ) ;;
	step 3 : wff = a1d (hyp 5) |- ( y ∈ ω → ( ∅ = ∅ → ( ch → th ) ) ) ;;
	step 4 : wff = finds2 (hyp 1, hyp 2, hyp 3, step 2, step 3) |- ( x ∈ ω → ( ∅ = ∅ → ph ) ) ;;
	step 5 : wff = mpi (step 1, step 4) |- ( x ∈ ω → ph ) ;;
	qed prop 1 = step 5 ;;
}

/*Finite induction with explicit substitution.  The first hypothesis is
       the basis and the second is the induction hypothesis.  Theorem Schema 22
       of [Suppes] p. 136.  See ~ tfindes for the transfinite version.
       (Contributed by Raph Levien, 9-Jul-2003.) */

theorem findes (ph : wff, x : set) disjointed(x y z, y z ph) {
	hyp 1 : wff = |- [. ∅ / x ]. ph ;;
	hyp 2 : wff = |- ( x ∈ ω → ( ph → [. suc x / x ]. ph ) ) ;;
	-----------------------
	prop 1 : wff = |- ( x ∈ ω → ph ) ;;
}

proof of findes {
	var y : set, z : set;;
	step 1 : wff = dfsbcq2 () |- ( z = ∅ → ( [ z / x ] ph ↔ [. ∅ / x ]. ph ) ) ;;
	step 2 : wff = sbequ () |- ( z = y → ( [ z / x ] ph ↔ [ y / x ] ph ) ) ;;
	step 3 : wff = dfsbcq2 () |- ( z = suc y → ( [ z / x ] ph ↔ [. suc y / x ]. ph ) ) ;;
	step 4 : wff = sbequ12r () |- ( z = x → ( [ z / x ] ph ↔ ph ) ) ;;
	step 5 : wff = nfv () |- F/ x y ∈ ω ;;
	step 6 : wff = nfs1v () |- F/ x [ y / x ] ph ;;
	step 7 : wff = nfsbc1v () |- F/ x [. suc y / x ]. ph ;;
	step 8 : wff = nfim (step 6, step 7) |- F/ x ( [ y / x ] ph → [. suc y / x ]. ph ) ;;
	step 9 : wff = nfim (step 5, step 8) |- F/ x ( y ∈ ω → ( [ y / x ] ph → [. suc y / x ]. ph ) ) ;;
	step 10 : wff = eleq1 () |- ( x = y → ( x ∈ ω ↔ y ∈ ω ) ) ;;
	step 11 : wff = sbequ12 () |- ( x = y → ( ph ↔ [ y / x ] ph ) ) ;;
	step 12 : wff = suceq () |- ( x = y → suc x = suc y ) ;;
	step 13 : wff = dfsbcq () |- ( suc x = suc y → ( [. suc x / x ]. ph ↔ [. suc y / x ]. ph ) ) ;;
	step 14 : wff = syl (step 12, step 13) |- ( x = y → ( [. suc x / x ]. ph ↔ [. suc y / x ]. ph ) ) ;;
	step 15 : wff = imbi12d (step 11, step 14) |- ( x = y → ( ( ph → [. suc x / x ]. ph ) ↔ ( [ y / x ] ph → [. suc y / x ]. ph ) ) ) ;;
	step 16 : wff = imbi12d (step 10, step 15) |- ( x = y → ( ( x ∈ ω → ( ph → [. suc x / x ]. ph ) ) ↔ ( y ∈ ω → ( [ y / x ] ph → [. suc y / x ]. ph ) ) ) ) ;;
	step 17 : wff = chvar (step 9, step 16, hyp 2) |- ( y ∈ ω → ( [ y / x ] ph → [. suc y / x ]. ph ) ) ;;
	step 18 : wff = finds (step 1, step 2, step 3, step 4, hyp 1, step 17) |- ( x ∈ ω → ph ) ;;
	qed prop 1 = step 18 ;;
}


