import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Union/Iota_properties.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Cantor's Theorem

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* No set ` A ` is equinumerous to its power set (Cantor's theorem), i.e.
       no function can map ` A ` it onto its power set.  Compare Theorem 6B(b)
       of [Enderton] p. 132.  For the equinumerosity version, see ~ canth2 .
       Note that ` A ` must be a set: this theorem does not hold when ` A ` is
       too large to be a set; see ~ ncanth for a counterexample.  (Use ~ nex if
       you want the form ` -. E. f f : A -onto-> ~P A ` .)  (Contributed by NM,
       7-Aug-1994.)  (Proof shortened by Mario Carneiro, 7-Jun-2016.) */

theorem canth (A : class, F : class) disjointed(x y A, x y F) {
	hyp 1 : wff = |- A ∈ _V ;;
	-----------------------
	prop 1 : wff = |- ¬ F : A ↠ Pow A ;;
}

proof of canth {
	var x : set, y : set;;
	step 1 : wff = ssrab2 () |- { x ∈ A | ¬ x ∈ ( F ` x ) } ⊆ A ;;
	step 2 : wff = elpw2 (hyp 1) |- ( { x ∈ A | ¬ x ∈ ( F ` x ) } ∈ Pow A ↔ { x ∈ A | ¬ x ∈ ( F ` x ) } ⊆ A ) ;;
	step 3 : wff = mpbir (step 1, step 2) |- { x ∈ A | ¬ x ∈ ( F ` x ) } ∈ Pow A ;;
	step 4 : wff = forn () |- ( F : A ↠ Pow A → ran F = Pow A ) ;;
	step 5 : wff = syl5eleqr (step 3, step 4) |- ( F : A ↠ Pow A → { x ∈ A | ¬ x ∈ ( F ` x ) } ∈ ran F ) ;;
	step 6 : wff = id () |- ( x = y → x = y ) ;;
	step 7 : wff = fveq2 () |- ( x = y → ( F ` x ) = ( F ` y ) ) ;;
	step 8 : wff = eleq12d (step 6, step 7) |- ( x = y → ( x ∈ ( F ` x ) ↔ y ∈ ( F ` y ) ) ) ;;
	step 9 : wff = notbid (step 8) |- ( x = y → ( ¬ x ∈ ( F ` x ) ↔ ¬ y ∈ ( F ` y ) ) ) ;;
	step 10 : wff = elrab (step 9) |- ( y ∈ { x ∈ A | ¬ x ∈ ( F ` x ) } ↔ ( y ∈ A ∧ ¬ y ∈ ( F ` y ) ) ) ;;
	step 11 : wff = baibr (step 10) |- ( y ∈ A → ( ¬ y ∈ ( F ` y ) ↔ y ∈ { x ∈ A | ¬ x ∈ ( F ` x ) } ) ) ;;
	step 12 : wff = nbbn () |- ( ( ¬ y ∈ ( F ` y ) ↔ y ∈ { x ∈ A | ¬ x ∈ ( F ` x ) } ) ↔ ¬ ( y ∈ ( F ` y ) ↔ y ∈ { x ∈ A | ¬ x ∈ ( F ` x ) } ) ) ;;
	step 13 : wff = sylib (step 11, step 12) |- ( y ∈ A → ¬ ( y ∈ ( F ` y ) ↔ y ∈ { x ∈ A | ¬ x ∈ ( F ` x ) } ) ) ;;
	step 14 : wff = eleq2 () |- ( ( F ` y ) = { x ∈ A | ¬ x ∈ ( F ` x ) } → ( y ∈ ( F ` y ) ↔ y ∈ { x ∈ A | ¬ x ∈ ( F ` x ) } ) ) ;;
	step 15 : wff = nsyl (step 13, step 14) |- ( y ∈ A → ¬ ( F ` y ) = { x ∈ A | ¬ x ∈ ( F ` x ) } ) ;;
	step 16 : wff = nrex (step 15) |- ¬ ∃ y ∈ A ( F ` y ) = { x ∈ A | ¬ x ∈ ( F ` x ) } ;;
	step 17 : wff = fofn () |- ( F : A ↠ Pow A → F Fn A ) ;;
	step 18 : wff = fvelrnb () |- ( F Fn A → ( { x ∈ A | ¬ x ∈ ( F ` x ) } ∈ ran F ↔ ∃ y ∈ A ( F ` y ) = { x ∈ A | ¬ x ∈ ( F ` x ) } ) ) ;;
	step 19 : wff = syl (step 17, step 18) |- ( F : A ↠ Pow A → ( { x ∈ A | ¬ x ∈ ( F ` x ) } ∈ ran F ↔ ∃ y ∈ A ( F ` y ) = { x ∈ A | ¬ x ∈ ( F ` x ) } ) ) ;;
	step 20 : wff = mtbiri (step 16, step 19) |- ( F : A ↠ Pow A → ¬ { x ∈ A | ¬ x ∈ ( F ` x ) } ∈ ran F ) ;;
	step 21 : wff = pm2.65i (step 5, step 20) |- ¬ F : A ↠ Pow A ;;
	qed prop 1 = step 21 ;;
}

/* Cantor's theorem fails for the universal class (which is not a set but a
     proper class by ~ vprc ).  Specifically, the identity function maps the
     universe onto its power class.  Compare ~ canth that works for sets.  See
     also the remark in ~ ru about NF, in which Cantor's theorem fails for sets
     that are "too large."  This theorem gives some intuition behind that
     failure: in NF the universal class is a set, and it equals its own power
     set.  (Contributed by NM, 29-Jun-2004.) */

theorem ncanth ()  {
	prop 1 : wff = |- _I : _V ↠ Pow _V ;;
}

proof of ncanth {
	step 1 : wff = f1ovi () |- _I : _V ⤖ _V ;;
	step 2 : wff = pwv () |- Pow _V = _V ;;
	step 3 : wff = f1oeq3 () |- ( Pow _V = _V → ( _I : _V ⤖ Pow _V ↔ _I : _V ⤖ _V ) ) ;;
	step 4 : wff = ax-mp (step 2, step 3) |- ( _I : _V ⤖ Pow _V ↔ _I : _V ⤖ _V ) ;;
	step 5 : wff = mpbir (step 1, step 4) |- _I : _V ⤖ Pow _V ;;
	step 6 : wff = f1ofo () |- ( _I : _V ⤖ Pow _V → _I : _V ↠ Pow _V ) ;;
	step 7 : wff = ax-mp (step 5, step 6) |- _I : _V ↠ Pow _V ;;
	qed prop 1 = step 7 ;;
}


