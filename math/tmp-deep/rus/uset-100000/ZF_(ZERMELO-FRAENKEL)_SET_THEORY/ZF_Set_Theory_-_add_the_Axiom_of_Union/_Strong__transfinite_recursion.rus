import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Union/Functions_on_ordinals__strictly_monotone_ordinal_functions.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    "Strong" transfinite recursion

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

constant {
	symbol recs ;;
}

/*Notation for a function defined by strong transfinite recursion. */

rule crecs (F : class) {
	term : class = # recs ( F ) ;;
}

/*Define a function ` recs ( F ) ` on ` On ` , the class of ordinal
       numbers, by transfinite recursion given a rule ` F ` which sets the next
       value given all values so far.  See ~ df-rdg for more details on why
       this definition is desirable.  Unlike ~ df-rdg which restricts the
       update rule to use only the previous value, this version allows the
       update rule to use _all_ previous values, which is why it is described
       as "strong", although it is actually more primitive.  See ~ recsfnon and
       ~ recsval for the primary contract of this definition.

       _EDITORIAL_: there are several existing versions of this construction
       without the definition, notably in ~ ordtype , ~ zorn2 , and
       ~ dfac8alem .  (Contributed by Stefan O'Rear, 18-Jan-2015.)
       (New usage is discouraged.) */

definition df-recs (x : set, y : set, f : set, F : class) disjointed(F f x y) {
	defiendum : class = # recs ( F ) ;;
	definiens : class = # ⋃ { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } ;;
	-----------------------
	prop : wff = |- defiendum = definiens ;;
}

/*Equality theorem for ` recs ` .  (Contributed by Stefan O'Rear,
       18-Jan-2015.) */

theorem recseq (F : class, G : class) disjointed(F a b c, G a b c, a b c) {
	prop 1 : wff = |- ( F = G → recs ( F ) = recs ( G ) ) ;;
}

proof of recseq {
	var a : set, b : set, c : set;;
	step 1 : wff = fveq1 () |- ( F = G → ( F ` ( a ↾ c ) ) = ( G ` ( a ↾ c ) ) ) ;;
	step 2 : wff = eqeq2d (step 1) |- ( F = G → ( ( a ` c ) = ( F ` ( a ↾ c ) ) ↔ ( a ` c ) = ( G ` ( a ↾ c ) ) ) ) ;;
	step 3 : wff = ralbidv (step 2) |- ( F = G → ( ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ↔ ∀ c ∈ b ( a ` c ) = ( G ` ( a ↾ c ) ) ) ) ;;
	step 4 : wff = anbi2d (step 3) |- ( F = G → ( ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) ↔ ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( G ` ( a ↾ c ) ) ) ) ) ;;
	step 5 : wff = rexbidv (step 4) |- ( F = G → ( ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) ↔ ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( G ` ( a ↾ c ) ) ) ) ) ;;
	step 6 : wff = abbidv (step 5) |- ( F = G → { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) } = { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( G ` ( a ↾ c ) ) ) } ) ;;
	step 7 : wff = unieqd (step 6) |- ( F = G → ⋃ { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) } = ⋃ { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( G ` ( a ↾ c ) ) ) } ) ;;
	step 8 : wff = df-recs () |- recs ( F ) = ⋃ { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) } ;;
	step 9 : wff = df-recs () |- recs ( G ) = ⋃ { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( G ` ( a ↾ c ) ) ) } ;;
	step 10 : wff = 3eqtr4g (step 7, step 8, step 9) |- ( F = G → recs ( F ) = recs ( G ) ) ;;
	qed prop 1 = step 10 ;;
}

/*Bound-variable hypothesis builder for ` recs ` .  (Contributed by Stefan
       O'Rear, 18-Jan-2015.) */

theorem nfrecs (x : set, F : class) disjointed(F a b c, a b c, x a b c) {
	hyp 1 : wff = |- F/_ x F ;;
	-----------------------
	prop 1 : wff = |- F/_ x recs ( F ) ;;
}

proof of nfrecs {
	var a : set, b : set, c : set;;
	step 1 : wff = df-recs () |- recs ( F ) = ⋃ { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) } ;;
	step 2 : wff = nfcv () |- F/_ x On ;;
	step 3 : wff = nfv () |- F/ x a Fn b ;;
	step 4 : wff = nfcv () |- F/_ x b ;;
	step 5 : wff = nfcv () |- F/_ x ( a ↾ c ) ;;
	step 6 : wff = nffv (hyp 1, step 5) |- F/_ x ( F ` ( a ↾ c ) ) ;;
	step 7 : wff = nfeq2 (step 6) |- F/ x ( a ` c ) = ( F ` ( a ↾ c ) ) ;;
	step 8 : wff = nfral (step 4, step 7) |- F/ x ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ;;
	step 9 : wff = nfan (step 3, step 8) |- F/ x ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) ;;
	step 10 : wff = nfrex (step 2, step 9) |- F/ x ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) ;;
	step 11 : wff = nfab (step 10) |- F/_ x { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) } ;;
	step 12 : wff = nfuni (step 11) |- F/_ x ⋃ { a | ∃ b ∈ On ( a Fn b ∧ ∀ c ∈ b ( a ` c ) = ( F ` ( a ↾ c ) ) ) } ;;
	step 13 : wff = nfcxfr (step 1, step 12) |- F/_ x recs ( F ) ;;
	qed prop 1 = step 13 ;;
}

/*A technical lemma for transfinite recursion.  Compare Lemma 1 of
       [TakeutiZaring] p. 47.  (Contributed by NM, 23-Mar-1995.)  (Revised by
       David Abernethy, 19-Jun-2012.) */

theorem tfrlem1 (x : set, A : class, B : class, F : class, G : class) disjointed(x y z A, y z B, x y z w F, x y z w G) {
	prop 1 : wff = |- ( A ∈ On → ( ( F Fn A ∧ G Fn A ) → ( ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ) ;;
}

proof of tfrlem1 {
	var y : set, z : set, w : set;;
	step 1 : wff = ssid () |- A ⊆ A ;;
	step 2 : wff = sseq1 () |- ( y = A → ( y ⊆ A ↔ A ⊆ A ) ) ;;
	step 3 : wff = raleq () |- ( y = A → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ↔ ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ;;
	step 4 : wff = raleq () |- ( y = A → ( ∀ x ∈ y ( F ` x ) = ( G ` x ) ↔ ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ;;
	step 5 : wff = imbi12d (step 3, step 4) |- ( y = A → ( ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ↔ ( ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 6 : wff = imbi12d (step 2, step 5) |- ( y = A → ( ( y ⊆ A → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ↔ ( A ⊆ A → ( ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 7 : wff = imbi2d (step 6) |- ( y = A → ( ( ( F Fn A ∧ G Fn A ) → ( y ⊆ A → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ↔ ( ( F Fn A ∧ G Fn A ) → ( A ⊆ A → ( ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ) ) ) ;;
	step 8 : wff = sseq1 () |- ( y = z → ( y ⊆ A ↔ z ⊆ A ) ) ;;
	step 9 : wff = anbi2d (step 8) |- ( y = z → ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ↔ ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ) ) ;;
	step 10 : wff = raleq () |- ( y = z → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ↔ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ;;
	step 11 : wff = anbi12d (step 9, step 10) |- ( y = z → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ↔ ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ) ;;
	step 12 : wff = raleq () |- ( y = z → ( ∀ x ∈ y ( F ` x ) = ( G ` x ) ↔ ∀ x ∈ z ( F ` x ) = ( G ` x ) ) ) ;;
	step 13 : wff = imbi12d (step 11, step 12) |- ( y = z → ( ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ↔ ( ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ z ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 14 : wff = ralim () |- ( ∀ z ∈ y ( ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ z ( F ` x ) = ( G ` x ) ) → ( ∀ z ∈ y ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) ) ) ;;
	step 15 : wff = onelss () |- ( y ∈ On → ( z ∈ y → z ⊆ y ) ) ;;
	step 16 : wff = sstr2 () |- ( z ⊆ y → ( y ⊆ A → z ⊆ A ) ) ;;
	step 17 : wff = anim2d (step 16) |- ( z ⊆ y → ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) → ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ) ) ;;
	step 18 : wff = ssralv () |- ( z ⊆ y → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ;;
	step 19 : wff = anim12d (step 17, step 18) |- ( z ⊆ y → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ) ;;
	step 20 : wff = syl6 (step 15, step 19) |- ( y ∈ On → ( z ∈ y → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ) ) ;;
	step 21 : wff = com23 (step 20) |- ( y ∈ On → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ( z ∈ y → ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ) ) ;;
	step 22 : wff = ralrimdv (step 21) |- ( y ∈ On → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ z ∈ y ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) ) ) ;;
	step 23 : wff = nfra1 () |- F/ x ∀ x ∈ z ( F ` x ) = ( G ` x ) ;;
	step 24 : wff = nfv () |- F/ z ∀ w ∈ x ( F ` w ) = ( G ` w ) ;;
	step 25 : wff = fveq2 () |- ( x = w → ( F ` x ) = ( F ` w ) ) ;;
	step 26 : wff = fveq2 () |- ( x = w → ( G ` x ) = ( G ` w ) ) ;;
	step 27 : wff = eqeq12d (step 25, step 26) |- ( x = w → ( ( F ` x ) = ( G ` x ) ↔ ( F ` w ) = ( G ` w ) ) ) ;;
	step 28 : wff = cbvralv (step 27) |- ( ∀ x ∈ z ( F ` x ) = ( G ` x ) ↔ ∀ w ∈ z ( F ` w ) = ( G ` w ) ) ;;
	step 29 : wff = raleq () |- ( z = x → ( ∀ w ∈ z ( F ` w ) = ( G ` w ) ↔ ∀ w ∈ x ( F ` w ) = ( G ` w ) ) ) ;;
	step 30 : wff = syl5bb (step 28, step 29) |- ( z = x → ( ∀ x ∈ z ( F ` x ) = ( G ` x ) ↔ ∀ w ∈ x ( F ` w ) = ( G ` w ) ) ) ;;
	step 31 : wff = cbvral (step 23, step 24, step 30) |- ( ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) ↔ ∀ x ∈ y ∀ w ∈ x ( F ` w ) = ( G ` w ) ) ;;
	step 32 : wff = onelss () |- ( y ∈ On → ( x ∈ y → x ⊆ y ) ) ;;
	step 33 : wff = sstr2 () |- ( x ⊆ y → ( y ⊆ A → x ⊆ A ) ) ;;
	step 34 : wff = fvreseq () |- ( ( ( F Fn A ∧ G Fn A ) ∧ x ⊆ A ) → ( ( F ↾ x ) = ( G ↾ x ) ↔ ∀ w ∈ x ( F ` w ) = ( G ` w ) ) ) ;;
	step 35 : wff = biimpar (step 34) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ x ⊆ A ) ∧ ∀ w ∈ x ( F ` w ) = ( G ` w ) ) → ( F ↾ x ) = ( G ↾ x ) ) ;;
	step 36 : wff = fveq2d (step 35) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ x ⊆ A ) ∧ ∀ w ∈ x ( F ` w ) = ( G ` w ) ) → ( B ` ( F ↾ x ) ) = ( B ` ( G ↾ x ) ) ) ;;
	step 37 : wff = eqeq12 () |- ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( ( F ` x ) = ( G ` x ) ↔ ( B ` ( F ↾ x ) ) = ( B ` ( G ↾ x ) ) ) ) ;;
	step 38 : wff = syl5ibr (step 36, step 37) |- ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ x ⊆ A ) ∧ ∀ w ∈ x ( F ` w ) = ( G ` w ) ) → ( F ` x ) = ( G ` x ) ) ) ;;
	step 39 : wff = exp4c (step 38) |- ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( ( F Fn A ∧ G Fn A ) → ( x ⊆ A → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 40 : wff = com4l (step 39) |- ( ( F Fn A ∧ G Fn A ) → ( x ⊆ A → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 41 : wff = syl9 (step 33, step 40) |- ( x ⊆ y → ( ( F Fn A ∧ G Fn A ) → ( y ⊆ A → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ) ) ;;
	step 42 : wff = syl6 (step 32, step 41) |- ( y ∈ On → ( x ∈ y → ( ( F Fn A ∧ G Fn A ) → ( y ⊆ A → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ) ) ) ;;
	step 43 : wff = imp4a (step 42) |- ( y ∈ On → ( x ∈ y → ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ) ) ;;
	step 44 : wff = com23 (step 43) |- ( y ∈ On → ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) → ( x ∈ y → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ) ) ;;
	step 45 : wff = imp31 (step 44) |- ( ( ( y ∈ On ∧ ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ) ∧ x ∈ y ) → ( ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 46 : wff = ralimdva (step 45) |- ( ( y ∈ On ∧ ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ) → ( ∀ x ∈ y ∀ w ∈ x ( F ` w ) = ( G ` w ) → ∀ x ∈ y ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 47 : wff = ralim () |- ( ∀ x ∈ y ( ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ( F ` x ) = ( G ` x ) ) → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ;;
	step 48 : wff = syl6 (step 46, step 47) |- ( ( y ∈ On ∧ ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ) → ( ∀ x ∈ y ∀ w ∈ x ( F ` w ) = ( G ` w ) → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 49 : wff = syl5bi (step 31, step 48) |- ( ( y ∈ On ∧ ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ) → ( ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 50 : wff = ex (step 49) |- ( y ∈ On → ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) → ( ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 51 : wff = com23 (step 50) |- ( y ∈ On → ( ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) → ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 52 : wff = imp4a (step 51) |- ( y ∈ On → ( ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 53 : wff = imim12d (step 22, step 52) |- ( y ∈ On → ( ( ∀ z ∈ y ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ z ∈ y ∀ x ∈ z ( F ` x ) = ( G ` x ) ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 54 : wff = pm2.43 () |- ( ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ;;
	step 55 : wff = syl56 (step 14, step 53, step 54) |- ( y ∈ On → ( ∀ z ∈ y ( ( ( ( F Fn A ∧ G Fn A ) ∧ z ⊆ A ) ∧ ∀ x ∈ z ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ z ( F ` x ) = ( G ` x ) ) → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ;;
	step 56 : wff = tfis2 (step 13, step 55) |- ( y ∈ On → ( ( ( ( F Fn A ∧ G Fn A ) ∧ y ⊆ A ) ∧ ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ;;
	step 57 : wff = exp4c (step 56) |- ( y ∈ On → ( ( F Fn A ∧ G Fn A ) → ( y ⊆ A → ( ∀ x ∈ y ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ y ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 58 : wff = vtoclga (step 7, step 57) |- ( A ∈ On → ( ( F Fn A ∧ G Fn A ) → ( A ⊆ A → ( ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ) ) ;;
	step 59 : wff = mpii (step 1, step 58) |- ( A ∈ On → ( ( F Fn A ∧ G Fn A ) → ( ∀ x ∈ A ( ( F ` x ) = ( B ` ( F ↾ x ) ) ∧ ( G ` x ) = ( B ` ( G ↾ x ) ) ) → ∀ x ∈ A ( F ` x ) = ( G ` x ) ) ) ) ;;
	qed prop 1 = step 59 ;;
}

/*Lemma for transfinite recursion.  This provides some messy details
       needed to link ~ tfrlem1 into the main proof.  (Contributed by NM,
       23-Mar-1995.)  (Revised by David Abernethy, 19-Jun-2012.) */

theorem tfrlem2 (x : set, y : set, z : set, w : set, A : class, B : class, F : class, G : class) disjointed(w A, w F, w G, w x) {
	prop 1 : wff = |- ( ( F Fn A ∧ G Fn A ) → ( ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) → ( A ∈ On → ( ∀ w ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) → y = z ) ) ) ) ;;
}

proof of tfrlem2 {
	step 1 : wff = abai () |- ( ( A ∈ On ∧ ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ↔ ( A ∈ On ∧ ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ w ( A ∈ On ∧ ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ↔ ∀ w ( A ∈ On ∧ ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ) ;;
	step 3 : wff = 19.28v () |- ( ∀ w ( A ∈ On ∧ ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ↔ ( A ∈ On ∧ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ;;
	step 4 : wff = 19.28v () |- ( ∀ w ( A ∈ On ∧ ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ↔ ( A ∈ On ∧ ∀ w ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ) ;;
	step 5 : wff = 3bitr3ri (step 2, step 3, step 4) |- ( ( A ∈ On ∧ ∀ w ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ↔ ( A ∈ On ∧ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ;;
	step 6 : wff = df-ral () |- ( ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ↔ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ;;
	step 7 : wff = anbi2i (step 6) |- ( ( A ∈ On ∧ ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ↔ ( A ∈ On ∧ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ;;
	step 8 : wff = fnop () |- ( ( F Fn A ∧ 〈 x , y 〉 ∈ F ) → x ∈ A ) ;;
	step 9 : wff = adantlr (step 8) |- ( ( ( F Fn A ∧ G Fn A ) ∧ 〈 x , y 〉 ∈ F ) → x ∈ A ) ;;
	step 10 : wff = tfrlem1 () |- ( A ∈ On → ( ( F Fn A ∧ G Fn A ) → ( ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) → ∀ w ∈ A ( F ` w ) = ( G ` w ) ) ) ) ;;
	step 11 : wff = com12 (step 10) |- ( ( F Fn A ∧ G Fn A ) → ( A ∈ On → ( ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) → ∀ w ∈ A ( F ` w ) = ( G ` w ) ) ) ) ;;
	step 12 : wff = imp3a (step 11) |- ( ( F Fn A ∧ G Fn A ) → ( ( A ∈ On ∧ ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) → ∀ w ∈ A ( F ` w ) = ( G ` w ) ) ) ;;
	step 13 : wff = adantr (step 12) |- ( ( ( F Fn A ∧ G Fn A ) ∧ 〈 x , y 〉 ∈ F ) → ( ( A ∈ On ∧ ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) → ∀ w ∈ A ( F ` w ) = ( G ` w ) ) ) ;;
	step 14 : wff = fveq2 () |- ( w = x → ( F ` w ) = ( F ` x ) ) ;;
	step 15 : wff = fveq2 () |- ( w = x → ( G ` w ) = ( G ` x ) ) ;;
	step 16 : wff = eqeq12d (step 14, step 15) |- ( w = x → ( ( F ` w ) = ( G ` w ) ↔ ( F ` x ) = ( G ` x ) ) ) ;;
	step 17 : wff = rspcv (step 16) |- ( x ∈ A → ( ∀ w ∈ A ( F ` w ) = ( G ` w ) → ( F ` x ) = ( G ` x ) ) ) ;;
	step 18 : wff = sylsyld (step 9, step 13, step 17) |- ( ( ( F Fn A ∧ G Fn A ) ∧ 〈 x , y 〉 ∈ F ) → ( ( A ∈ On ∧ ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) → ( F ` x ) = ( G ` x ) ) ) ;;
	step 19 : wff = imp (step 18) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ 〈 x , y 〉 ∈ F ) ∧ ( A ∈ On ∧ ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) → ( F ` x ) = ( G ` x ) ) ;;
	step 20 : wff = adantlrr (step 19) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) ∧ ( A ∈ On ∧ ∀ w ∈ A ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) → ( F ` x ) = ( G ` x ) ) ;;
	step 21 : wff = sylan2br (step 7, step 20) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) ∧ ( A ∈ On ∧ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) → ( F ` x ) = ( G ` x ) ) ;;
	step 22 : wff = fnfun () |- ( F Fn A → Fun F ) ;;
	step 23 : wff = fnfun () |- ( G Fn A → Fun G ) ;;
	step 24 : wff = anim12i (step 22, step 23) |- ( ( F Fn A ∧ G Fn A ) → ( Fun F ∧ Fun G ) ) ;;
	step 25 : wff = funopfv () |- ( Fun F → ( 〈 x , y 〉 ∈ F → ( F ` x ) = y ) ) ;;
	step 26 : wff = imp (step 25) |- ( ( Fun F ∧ 〈 x , y 〉 ∈ F ) → ( F ` x ) = y ) ;;
	step 27 : wff = funopfv () |- ( Fun G → ( 〈 x , z 〉 ∈ G → ( G ` x ) = z ) ) ;;
	step 28 : wff = imp (step 27) |- ( ( Fun G ∧ 〈 x , z 〉 ∈ G ) → ( G ` x ) = z ) ;;
	step 29 : wff = anim12i (step 26, step 28) |- ( ( ( Fun F ∧ 〈 x , y 〉 ∈ F ) ∧ ( Fun G ∧ 〈 x , z 〉 ∈ G ) ) → ( ( F ` x ) = y ∧ ( G ` x ) = z ) ) ;;
	step 30 : wff = an4s (step 29) |- ( ( ( Fun F ∧ Fun G ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) → ( ( F ` x ) = y ∧ ( G ` x ) = z ) ) ;;
	step 31 : wff = sylan (step 24, step 30) |- ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) → ( ( F ` x ) = y ∧ ( G ` x ) = z ) ) ;;
	step 32 : wff = eqeq12 () |- ( ( ( F ` x ) = y ∧ ( G ` x ) = z ) → ( ( F ` x ) = ( G ` x ) ↔ y = z ) ) ;;
	step 33 : wff = syl (step 31, step 32) |- ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) → ( ( F ` x ) = ( G ` x ) ↔ y = z ) ) ;;
	step 34 : wff = adantr (step 33) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) ∧ ( A ∈ On ∧ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) → ( ( F ` x ) = ( G ` x ) ↔ y = z ) ) ;;
	step 35 : wff = mpbid (step 21, step 34) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) ∧ ( A ∈ On ∧ ∀ w ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) → y = z ) ;;
	step 36 : wff = sylan2b (step 5, step 35) |- ( ( ( ( F Fn A ∧ G Fn A ) ∧ ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) ) ∧ ( A ∈ On ∧ ∀ w ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) ) ) → y = z ) ;;
	step 37 : wff = exp43 (step 36) |- ( ( F Fn A ∧ G Fn A ) → ( ( 〈 x , y 〉 ∈ F ∧ 〈 x , z 〉 ∈ G ) → ( A ∈ On → ( ∀ w ( A ∈ On → ( w ∈ A → ( ( F ` w ) = ( B ` ( F ↾ w ) ) ∧ ( G ` w ) = ( B ` ( G ↾ w ) ) ) ) ) → y = z ) ) ) ) ;;
	qed prop 1 = step 37 ;;
}

/*Lemma for transfinite recursion.  Let ` A ` be the class of "acceptable"
       functions.  The final thing we're interested in is the union of all
       these acceptable functions.  This lemma just changes some bound
       variables in ` A ` for later use.  (Contributed by NM, 9-Apr-1995.) */

theorem tfrlem3 (x : set, y : set, z : set, A : class, f : set, g : set, F : class) disjointed(x y f g, x y z, g z, f g F, x z F) {
	hyp 1 : wff = |- A = { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } ;;
	-----------------------
	prop 1 : wff = |- A = { g | ∃ z ∈ On ( g Fn z ∧ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) } ;;
}

proof of tfrlem3 {
	step 1 : wff = vex () |- g ∈ _V ;;
	step 2 : wff = fneq1 () |- ( f = g → ( f Fn x ↔ g Fn x ) ) ;;
	step 3 : wff = fveq1 () |- ( f = g → ( f ` y ) = ( g ` y ) ) ;;
	step 4 : wff = reseq1 () |- ( f = g → ( f ↾ y ) = ( g ↾ y ) ) ;;
	step 5 : wff = fveq2d (step 4) |- ( f = g → ( F ` ( f ↾ y ) ) = ( F ` ( g ↾ y ) ) ) ;;
	step 6 : wff = eqeq12d (step 3, step 5) |- ( f = g → ( ( f ` y ) = ( F ` ( f ↾ y ) ) ↔ ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 7 : wff = ralbidv (step 6) |- ( f = g → ( ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ↔ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 8 : wff = anbi12d (step 2, step 7) |- ( f = g → ( ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) ↔ ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ) ;;
	step 9 : wff = rexbidv (step 8) |- ( f = g → ( ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) ↔ ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ) ;;
	step 10 : wff = elab (step 1, step 9) |- ( g ∈ { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } ↔ ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 11 : wff = fneq2 () |- ( x = z → ( g Fn x ↔ g Fn z ) ) ;;
	step 12 : wff = raleq () |- ( x = z → ( ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ↔ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 13 : wff = anbi12d (step 11, step 12) |- ( x = z → ( ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ↔ ( g Fn z ∧ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ) ;;
	step 14 : wff = cbvrexv (step 13) |- ( ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ↔ ∃ z ∈ On ( g Fn z ∧ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 15 : wff = bitri (step 10, step 14) |- ( g ∈ { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } ↔ ∃ z ∈ On ( g Fn z ∧ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 16 : wff = abbi2i (step 15) |- { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } = { g | ∃ z ∈ On ( g Fn z ∧ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) } ;;
	step 17 : wff = eqtri (hyp 1, step 16) |- A = { g | ∃ z ∈ On ( g Fn z ∧ ∀ y ∈ z ( g ` y ) = ( F ` ( g ↾ y ) ) ) } ;;
	qed prop 1 = step 17 ;;
}

/*Lemma for transfinite recursion.  Let ` A ` be the class of "acceptable"
       functions.  The final thing we're interested in is the union of all
       these acceptable functions.  This lemma just changes some bound
       variables in ` A ` for later use.  (Contributed by NM, 22-Jul-2012.) */

theorem tfrlem3a (x : set, y : set, A : class, f : set, g : set, F : class) disjointed(x y f g, f g F) {
	hyp 1 : wff = |- A = { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } ;;
	-----------------------
	prop 1 : wff = |- A = { g | ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) } ;;
}

proof of tfrlem3a {
	step 1 : wff = fneq1 () |- ( f = g → ( f Fn x ↔ g Fn x ) ) ;;
	step 2 : wff = fveq1 () |- ( f = g → ( f ` y ) = ( g ` y ) ) ;;
	step 3 : wff = reseq1 () |- ( f = g → ( f ↾ y ) = ( g ↾ y ) ) ;;
	step 4 : wff = fveq2d (step 3) |- ( f = g → ( F ` ( f ↾ y ) ) = ( F ` ( g ↾ y ) ) ) ;;
	step 5 : wff = eqeq12d (step 2, step 4) |- ( f = g → ( ( f ` y ) = ( F ` ( f ↾ y ) ) ↔ ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 6 : wff = ralbidv (step 5) |- ( f = g → ( ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ↔ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ;;
	step 7 : wff = anbi12d (step 1, step 6) |- ( f = g → ( ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) ↔ ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ) ;;
	step 8 : wff = rexbidv (step 7) |- ( f = g → ( ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) ↔ ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) ) ) ;;
	step 9 : wff = cbvabv (step 8) |- { f | ∃ x ∈ On ( f Fn x ∧ ∀ y ∈ x ( f ` y ) = ( F ` ( f ↾ y ) ) ) } = { g | ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) } ;;
	step 10 : wff = eqtri (hyp 1, step 9) |- A = { g | ∃ x ∈ On ( g Fn x ∧ ∀ y ∈ x ( g ` y ) = ( F ` ( g ↾ y ) ) ) } ;;
	qed prop 1 = step 10 ;;
}


