import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Union/Transfinite_induction.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        The natural numbers (i.e. finite ordinals)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Declare new symbol. */

constant {
	symbol ω ;;
	ascii om ;;
	latex \omega ;;
}

/* Greek letter omega */

/* Extend class notation to include the class of natural numbers. */

rule com () {
	term : class = # ω ;;
}

/* Define the class of natural numbers, which are all ordinal numbers that
       are less than every limit ordinal, i.e. all finite ordinals.  Our
       definition is a variant of the Definition of N of [BellMachover]
       p. 471.  See ~ dfom2 for an alternate definition.  Later, when we assume
       the Axiom of Infinity, we show ` om ` is a set in ~ omex , and ` om `
       can then be defined per ~ dfom3 (the smallest inductive set) and
       ~ dfom4 .

       _Note_: the natural numbers ` om ` are a subset of the ordinal numbers
       ~ df-on .  They are completely different from the natural numbers ` NN `
       ( ~ df-nn ) that are a subset of the complex numbers defined much later
       in our development, although the two sets have analogous properties and
       operations defined on them.  (Contributed by NM, 15-May-1994.) */

definition df-om (x : set, y : set) disjointed(x y) {
	defiendum : class = # ω ;;
	definiens : class = # { x ∈ On | ∀ y ( Lim y → x ∈ y ) } ;;
	-----------------------
	prop : wff = |- defiendum = definiens ;;
}

/* An alternate definition of the set of natural numbers ` om ` .
       Definition 7.28 of [TakeutiZaring] p. 42, who use the symbol K_I for the
       inner class builder of non-limit ordinal numbers (see ~ nlimon ).
       (Contributed by NM, 1-Nov-2004.) */

theorem dfom2 (x : set, y : set) disjointed(x z, y z) {
	prop 1 : wff = |- ω = { x ∈ On | suc x ⊆ { y ∈ On | ¬ Lim y } } ;;
}

proof of dfom2 {
	var z : set;;
	step 1 : wff = df-om () |- ω = { x ∈ On | ∀ z ( Lim z → x ∈ z ) } ;;
	step 2 : wff = onsssuc () |- ( ( z ∈ On ∧ x ∈ On ) → ( z ⊆ x ↔ z ∈ suc x ) ) ;;
	step 3 : wff = ontri1 () |- ( ( z ∈ On ∧ x ∈ On ) → ( z ⊆ x ↔ ¬ x ∈ z ) ) ;;
	step 4 : wff = bitr3d (step 2, step 3) |- ( ( z ∈ On ∧ x ∈ On ) → ( z ∈ suc x ↔ ¬ x ∈ z ) ) ;;
	step 5 : wff = ancoms (step 4) |- ( ( x ∈ On ∧ z ∈ On ) → ( z ∈ suc x ↔ ¬ x ∈ z ) ) ;;
	step 6 : wff = limeq () |- ( y = z → ( Lim y ↔ Lim z ) ) ;;
	step 7 : wff = notbid (step 6) |- ( y = z → ( ¬ Lim y ↔ ¬ Lim z ) ) ;;
	step 8 : wff = elrab (step 7) |- ( z ∈ { y ∈ On | ¬ Lim y } ↔ ( z ∈ On ∧ ¬ Lim z ) ) ;;
	step 9 : wff = a1i (step 8) |- ( ( x ∈ On ∧ z ∈ On ) → ( z ∈ { y ∈ On | ¬ Lim y } ↔ ( z ∈ On ∧ ¬ Lim z ) ) ) ;;
	step 10 : wff = imbi12d (step 5, step 9) |- ( ( x ∈ On ∧ z ∈ On ) → ( ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ↔ ( ¬ x ∈ z → ( z ∈ On ∧ ¬ Lim z ) ) ) ) ;;
	step 11 : wff = pm5.74da (step 10) |- ( x ∈ On → ( ( z ∈ On → ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ↔ ( z ∈ On → ( ¬ x ∈ z → ( z ∈ On ∧ ¬ Lim z ) ) ) ) ) ;;
	step 12 : wff = vex () |- z ∈ _V ;;
	step 13 : wff = limelon () |- ( ( z ∈ _V ∧ Lim z ) → z ∈ On ) ;;
	step 14 : wff = mpan (step 12, step 13) |- ( Lim z → z ∈ On ) ;;
	step 15 : wff = pm4.71ri (step 14) |- ( Lim z ↔ ( z ∈ On ∧ Lim z ) ) ;;
	step 16 : wff = imbi1i (step 15) |- ( ( Lim z → x ∈ z ) ↔ ( ( z ∈ On ∧ Lim z ) → x ∈ z ) ) ;;
	step 17 : wff = impexp () |- ( ( ( z ∈ On ∧ Lim z ) → x ∈ z ) ↔ ( z ∈ On → ( Lim z → x ∈ z ) ) ) ;;
	step 18 : wff = con34b () |- ( ( Lim z → x ∈ z ) ↔ ( ¬ x ∈ z → ¬ Lim z ) ) ;;
	step 19 : wff = ibar () |- ( z ∈ On → ( ¬ Lim z ↔ ( z ∈ On ∧ ¬ Lim z ) ) ) ;;
	step 20 : wff = imbi2d (step 19) |- ( z ∈ On → ( ( ¬ x ∈ z → ¬ Lim z ) ↔ ( ¬ x ∈ z → ( z ∈ On ∧ ¬ Lim z ) ) ) ) ;;
	step 21 : wff = syl5bb (step 18, step 20) |- ( z ∈ On → ( ( Lim z → x ∈ z ) ↔ ( ¬ x ∈ z → ( z ∈ On ∧ ¬ Lim z ) ) ) ) ;;
	step 22 : wff = pm5.74i (step 21) |- ( ( z ∈ On → ( Lim z → x ∈ z ) ) ↔ ( z ∈ On → ( ¬ x ∈ z → ( z ∈ On ∧ ¬ Lim z ) ) ) ) ;;
	step 23 : wff = 3bitri (step 16, step 17, step 22) |- ( ( Lim z → x ∈ z ) ↔ ( z ∈ On → ( ¬ x ∈ z → ( z ∈ On ∧ ¬ Lim z ) ) ) ) ;;
	step 24 : wff = syl6rbbr (step 11, step 23) |- ( x ∈ On → ( ( Lim z → x ∈ z ) ↔ ( z ∈ On → ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ) ) ;;
	step 25 : wff = impexp () |- ( ( ( z ∈ On ∧ z ∈ suc x ) → z ∈ { y ∈ On | ¬ Lim y } ) ↔ ( z ∈ On → ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ) ;;
	step 26 : wff = simpr () |- ( ( z ∈ On ∧ z ∈ suc x ) → z ∈ suc x ) ;;
	step 27 : wff = suceloni () |- ( x ∈ On → suc x ∈ On ) ;;
	step 28 : wff = onelon () |- ( ( suc x ∈ On ∧ z ∈ suc x ) → z ∈ On ) ;;
	step 29 : wff = ex (step 28) |- ( suc x ∈ On → ( z ∈ suc x → z ∈ On ) ) ;;
	step 30 : wff = syl (step 27, step 29) |- ( x ∈ On → ( z ∈ suc x → z ∈ On ) ) ;;
	step 31 : wff = ancrd (step 30) |- ( x ∈ On → ( z ∈ suc x → ( z ∈ On ∧ z ∈ suc x ) ) ) ;;
	step 32 : wff = impbid2 (step 26, step 31) |- ( x ∈ On → ( ( z ∈ On ∧ z ∈ suc x ) ↔ z ∈ suc x ) ) ;;
	step 33 : wff = imbi1d (step 32) |- ( x ∈ On → ( ( ( z ∈ On ∧ z ∈ suc x ) → z ∈ { y ∈ On | ¬ Lim y } ) ↔ ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ) ;;
	step 34 : wff = syl5bbr (step 25, step 33) |- ( x ∈ On → ( ( z ∈ On → ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ↔ ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ) ;;
	step 35 : wff = bitrd (step 24, step 34) |- ( x ∈ On → ( ( Lim z → x ∈ z ) ↔ ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ) ;;
	step 36 : wff = albidv (step 35) |- ( x ∈ On → ( ∀ z ( Lim z → x ∈ z ) ↔ ∀ z ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ) ;;
	step 37 : wff = dfss2 () |- ( suc x ⊆ { y ∈ On | ¬ Lim y } ↔ ∀ z ( z ∈ suc x → z ∈ { y ∈ On | ¬ Lim y } ) ) ;;
	step 38 : wff = syl6bbr (step 36, step 37) |- ( x ∈ On → ( ∀ z ( Lim z → x ∈ z ) ↔ suc x ⊆ { y ∈ On | ¬ Lim y } ) ) ;;
	step 39 : wff = rabbiia (step 38) |- { x ∈ On | ∀ z ( Lim z → x ∈ z ) } = { x ∈ On | suc x ⊆ { y ∈ On | ¬ Lim y } } ;;
	step 40 : wff = eqtri (step 1, step 39) |- ω = { x ∈ On | suc x ⊆ { y ∈ On | ¬ Lim y } } ;;
	qed prop 1 = step 40 ;;
}

/* Membership in omega.  The left conjunct can be eliminated if we assume
       the Axiom of Infinity; see ~ elom3 .  (Contributed by NM,
       15-May-1994.) */

theorem elom (x : set, A : class) disjointed(A x y) {
	prop 1 : wff = |- ( A ∈ ω ↔ ( A ∈ On ∧ ∀ x ( Lim x → A ∈ x ) ) ) ;;
}

proof of elom {
	var y : set;;
	step 1 : wff = eleq1 () |- ( y = A → ( y ∈ x ↔ A ∈ x ) ) ;;
	step 2 : wff = imbi2d (step 1) |- ( y = A → ( ( Lim x → y ∈ x ) ↔ ( Lim x → A ∈ x ) ) ) ;;
	step 3 : wff = albidv (step 2) |- ( y = A → ( ∀ x ( Lim x → y ∈ x ) ↔ ∀ x ( Lim x → A ∈ x ) ) ) ;;
	step 4 : wff = df-om () |- ω = { y ∈ On | ∀ x ( Lim x → y ∈ x ) } ;;
	step 5 : wff = elrab2 (step 3, step 4) |- ( A ∈ ω ↔ ( A ∈ On ∧ ∀ x ( Lim x → A ∈ x ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Omega is a subset of ` On ` .  (Contributed by NM, 13-Jun-1994.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) */

theorem omsson () disjointed(x y) {
	prop 1 : wff = |- ω ⊆ On ;;
}

proof of omsson {
	var x : set, y : set;;
	step 1 : wff = dfom2 () |- ω = { x ∈ On | suc x ⊆ { y ∈ On | ¬ Lim y } } ;;
	step 2 : wff = ssrab2 () |- { x ∈ On | suc x ⊆ { y ∈ On | ¬ Lim y } } ⊆ On ;;
	step 3 : wff = eqsstri (step 1, step 2) |- ω ⊆ On ;;
	qed prop 1 = step 3 ;;
}

/* The class of natural numbers is a subclass of any (infinite) limit
       ordinal.  Exercise 1 of [TakeutiZaring] p. 44.  Remarkably, our proof
       does not require the Axiom of Infinity.  (Contributed by NM,
       30-Oct-2003.) */

theorem limomss (A : class) disjointed(x y A) {
	prop 1 : wff = |- ( Lim A → ω ⊆ A ) ;;
}

proof of limomss {
	var x : set, y : set;;
	step 1 : wff = limord () |- ( Lim A → Ord A ) ;;
	step 2 : wff = ordeleqon () |- ( Ord A ↔ ( A ∈ On ∨ A = On ) ) ;;
	step 3 : wff = elom () |- ( x ∈ ω ↔ ( x ∈ On ∧ ∀ y ( Lim y → x ∈ y ) ) ) ;;
	step 4 : wff = simprbi (step 3) |- ( x ∈ ω → ∀ y ( Lim y → x ∈ y ) ) ;;
	step 5 : wff = limeq () |- ( y = A → ( Lim y ↔ Lim A ) ) ;;
	step 6 : wff = eleq2 () |- ( y = A → ( x ∈ y ↔ x ∈ A ) ) ;;
	step 7 : wff = imbi12d (step 5, step 6) |- ( y = A → ( ( Lim y → x ∈ y ) ↔ ( Lim A → x ∈ A ) ) ) ;;
	step 8 : wff = spcgv (step 7) |- ( A ∈ On → ( ∀ y ( Lim y → x ∈ y ) → ( Lim A → x ∈ A ) ) ) ;;
	step 9 : wff = syl5 (step 4, step 8) |- ( A ∈ On → ( x ∈ ω → ( Lim A → x ∈ A ) ) ) ;;
	step 10 : wff = com23 (step 9) |- ( A ∈ On → ( Lim A → ( x ∈ ω → x ∈ A ) ) ) ;;
	step 11 : wff = imp (step 10) |- ( ( A ∈ On ∧ Lim A ) → ( x ∈ ω → x ∈ A ) ) ;;
	step 12 : wff = ssrdv (step 11) |- ( ( A ∈ On ∧ Lim A ) → ω ⊆ A ) ;;
	step 13 : wff = ex (step 12) |- ( A ∈ On → ( Lim A → ω ⊆ A ) ) ;;
	step 14 : wff = omsson () |- ω ⊆ On ;;
	step 15 : wff = sseq2 () |- ( A = On → ( ω ⊆ A ↔ ω ⊆ On ) ) ;;
	step 16 : wff = mpbiri (step 14, step 15) |- ( A = On → ω ⊆ A ) ;;
	step 17 : wff = a1d (step 16) |- ( A = On → ( Lim A → ω ⊆ A ) ) ;;
	step 18 : wff = jaoi (step 13, step 17) |- ( ( A ∈ On ∨ A = On ) → ( Lim A → ω ⊆ A ) ) ;;
	step 19 : wff = sylbi (step 2, step 18) |- ( Ord A → ( Lim A → ω ⊆ A ) ) ;;
	step 20 : wff = mpcom (step 1, step 19) |- ( Lim A → ω ⊆ A ) ;;
	qed prop 1 = step 20 ;;
}

/* A natural number is an ordinal number.  (Contributed by NM,
     27-Jun-1994.) */

theorem nnon (A : class)  {
	prop 1 : wff = |- ( A ∈ ω → A ∈ On ) ;;
}

proof of nnon {
	step 1 : wff = omsson () |- ω ⊆ On ;;
	step 2 : wff = sseli (step 1) |- ( A ∈ ω → A ∈ On ) ;;
	qed prop 1 = step 2 ;;
}

/* A natural number is an ordinal number.  (Contributed by NM,
       27-Jun-1994.) */

theorem nnoni (A : class)  {
	hyp 1 : wff = |- A ∈ ω ;;
	-----------------------
	prop 1 : wff = |- A ∈ On ;;
}

proof of nnoni {
	step 1 : wff = nnon () |- ( A ∈ ω → A ∈ On ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- A ∈ On ;;
	qed prop 1 = step 2 ;;
}

/* A natural number is ordinal.  (Contributed by NM, 17-Oct-1995.) */

theorem nnord (A : class)  {
	prop 1 : wff = |- ( A ∈ ω → Ord A ) ;;
}

proof of nnord {
	step 1 : wff = nnon () |- ( A ∈ ω → A ∈ On ) ;;
	step 2 : wff = eloni () |- ( A ∈ On → Ord A ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( A ∈ ω → Ord A ) ;;
	qed prop 1 = step 3 ;;
}

/* Omega is ordinal.  Theorem 7.32 of [TakeutiZaring] p. 43.  (Contributed
       by NM, 18-Oct-1995.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) */

theorem ordom () disjointed(x y z) {
	prop 1 : wff = |- Ord ω ;;
}

proof of ordom {
	var x : set, y : set, z : set;;
	step 1 : wff = dftr2 () |- ( Tr ω ↔ ∀ y ∀ x ( ( y ∈ x ∧ x ∈ ω ) → y ∈ ω ) ) ;;
	step 2 : wff = onelon () |- ( ( x ∈ On ∧ y ∈ x ) → y ∈ On ) ;;
	step 3 : wff = expcom (step 2) |- ( y ∈ x → ( x ∈ On → y ∈ On ) ) ;;
	step 4 : wff = limord () |- ( Lim z → Ord z ) ;;
	step 5 : wff = ordtr () |- ( Ord z → Tr z ) ;;
	step 6 : wff = trel () |- ( Tr z → ( ( y ∈ x ∧ x ∈ z ) → y ∈ z ) ) ;;
	step 7 : wff = 3syl (step 4, step 5, step 6) |- ( Lim z → ( ( y ∈ x ∧ x ∈ z ) → y ∈ z ) ) ;;
	step 8 : wff = exp3a (step 7) |- ( Lim z → ( y ∈ x → ( x ∈ z → y ∈ z ) ) ) ;;
	step 9 : wff = com12 (step 8) |- ( y ∈ x → ( Lim z → ( x ∈ z → y ∈ z ) ) ) ;;
	step 10 : wff = a2d (step 9) |- ( y ∈ x → ( ( Lim z → x ∈ z ) → ( Lim z → y ∈ z ) ) ) ;;
	step 11 : wff = alimdv (step 10) |- ( y ∈ x → ( ∀ z ( Lim z → x ∈ z ) → ∀ z ( Lim z → y ∈ z ) ) ) ;;
	step 12 : wff = anim12d (step 3, step 11) |- ( y ∈ x → ( ( x ∈ On ∧ ∀ z ( Lim z → x ∈ z ) ) → ( y ∈ On ∧ ∀ z ( Lim z → y ∈ z ) ) ) ) ;;
	step 13 : wff = elom () |- ( x ∈ ω ↔ ( x ∈ On ∧ ∀ z ( Lim z → x ∈ z ) ) ) ;;
	step 14 : wff = elom () |- ( y ∈ ω ↔ ( y ∈ On ∧ ∀ z ( Lim z → y ∈ z ) ) ) ;;
	step 15 : wff = 3imtr4g (step 12, step 13, step 14) |- ( y ∈ x → ( x ∈ ω → y ∈ ω ) ) ;;
	step 16 : wff = imp (step 15) |- ( ( y ∈ x ∧ x ∈ ω ) → y ∈ ω ) ;;
	step 17 : wff = ax-gen (step 16) |- ∀ x ( ( y ∈ x ∧ x ∈ ω ) → y ∈ ω ) ;;
	step 18 : wff = mpgbir (step 1, step 17) |- Tr ω ;;
	step 19 : wff = omsson () |- ω ⊆ On ;;
	step 20 : wff = ordon () |- Ord On ;;
	step 21 : wff = trssord () |- ( ( Tr ω ∧ ω ⊆ On ∧ Ord On ) → Ord ω ) ;;
	step 22 : wff = mp3an (step 18, step 19, step 20, step 21) |- Ord ω ;;
	qed prop 1 = step 22 ;;
}

/* A member of a natural number is a natural number.  (Contributed by NM,
     21-Jun-1998.) */

theorem elnn (A : class, B : class)  {
	prop 1 : wff = |- ( ( A ∈ B ∧ B ∈ ω ) → A ∈ ω ) ;;
}

proof of elnn {
	step 1 : wff = ordom () |- Ord ω ;;
	step 2 : wff = ordtr () |- ( Ord ω → Tr ω ) ;;
	step 3 : wff = trel () |- ( Tr ω → ( ( A ∈ B ∧ B ∈ ω ) → A ∈ ω ) ) ;;
	step 4 : wff = mp2b (step 1, step 2, step 3) |- ( ( A ∈ B ∧ B ∈ ω ) → A ∈ ω ) ;;
	qed prop 1 = step 4 ;;
}

/* The class of natural numbers ` om ` is either an ordinal number (if we
     accept the Axiom of Infinity) or the proper class of all ordinal numbers
     (if we deny the Axiom of Infinity).  Remark in [TakeutiZaring] p. 43.
     (Contributed by NM, 10-May-1998.) */

theorem omon ()  {
	prop 1 : wff = |- ( ω ∈ On ∨ ω = On ) ;;
}

proof of omon {
	step 1 : wff = ordom () |- Ord ω ;;
	step 2 : wff = ordeleqon () |- ( Ord ω ↔ ( ω ∈ On ∨ ω = On ) ) ;;
	step 3 : wff = mpbi (step 1, step 2) |- ( ω ∈ On ∨ ω = On ) ;;
	qed prop 1 = step 3 ;;
}

/* Omega is an ordinal number.  (Contributed by Mario Carneiro,
       30-Jan-2013.) */

theorem omelon2 ()  {
	prop 1 : wff = |- ( ω ∈ _V → ω ∈ On ) ;;
}

proof of omelon2 {
	step 1 : wff = omon () |- ( ω ∈ On ∨ ω = On ) ;;
	step 2 : wff = ori (step 1) |- ( ¬ ω ∈ On → ω = On ) ;;
	step 3 : wff = onprc () |- ¬ On ∈ _V ;;
	step 4 : wff = eleq1 () |- ( ω = On → ( ω ∈ _V ↔ On ∈ _V ) ) ;;
	step 5 : wff = mtbiri (step 3, step 4) |- ( ω = On → ¬ ω ∈ _V ) ;;
	step 6 : wff = syl (step 2, step 5) |- ( ¬ ω ∈ On → ¬ ω ∈ _V ) ;;
	step 7 : wff = con4i (step 6) |- ( ω ∈ _V → ω ∈ On ) ;;
	qed prop 1 = step 7 ;;
}

/* A natural number is not a limit ordinal.  (Contributed by NM,
       18-Oct-1995.) */

theorem nnlim (A : class) disjointed(x A) {
	prop 1 : wff = |- ( A ∈ ω → ¬ Lim A ) ;;
}

proof of nnlim {
	var x : set;;
	step 1 : wff = nnord () |- ( A ∈ ω → Ord A ) ;;
	step 2 : wff = ordirr () |- ( Ord A → ¬ A ∈ A ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( A ∈ ω → ¬ A ∈ A ) ;;
	step 4 : wff = elom () |- ( A ∈ ω ↔ ( A ∈ On ∧ ∀ x ( Lim x → A ∈ x ) ) ) ;;
	step 5 : wff = simprbi (step 4) |- ( A ∈ ω → ∀ x ( Lim x → A ∈ x ) ) ;;
	step 6 : wff = limeq () |- ( x = A → ( Lim x ↔ Lim A ) ) ;;
	step 7 : wff = eleq2 () |- ( x = A → ( A ∈ x ↔ A ∈ A ) ) ;;
	step 8 : wff = imbi12d (step 6, step 7) |- ( x = A → ( ( Lim x → A ∈ x ) ↔ ( Lim A → A ∈ A ) ) ) ;;
	step 9 : wff = spcgv (step 8) |- ( A ∈ ω → ( ∀ x ( Lim x → A ∈ x ) → ( Lim A → A ∈ A ) ) ) ;;
	step 10 : wff = mpd (step 5, step 9) |- ( A ∈ ω → ( Lim A → A ∈ A ) ) ;;
	step 11 : wff = mtod (step 3, step 10) |- ( A ∈ ω → ¬ Lim A ) ;;
	qed prop 1 = step 11 ;;
}

/* The class of natural numbers is a subclass of the class of non-limit
       ordinal numbers.  Exercise 4 of [TakeutiZaring] p. 42.  (Contributed by
       NM, 2-Nov-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) */

theorem omssnlim (x : set)  {
	prop 1 : wff = |- ω ⊆ { x ∈ On | ¬ Lim x } ;;
}

proof of omssnlim {
	step 1 : wff = omsson () |- ω ⊆ On ;;
	step 2 : wff = nnlim () |- ( x ∈ ω → ¬ Lim x ) ;;
	step 3 : wff = rgen (step 2) |- ∀ x ∈ ω ¬ Lim x ;;
	step 4 : wff = ssrab () |- ( ω ⊆ { x ∈ On | ¬ Lim x } ↔ ( ω ⊆ On ∧ ∀ x ∈ ω ¬ Lim x ) ) ;;
	step 5 : wff = mpbir2an (step 1, step 3, step 4) |- ω ⊆ { x ∈ On | ¬ Lim x } ;;
	qed prop 1 = step 5 ;;
}

/* Omega is a limit ordinal.  Theorem 2.8 of [BellMachover] p. 473.  Our
     proof, however, does not require the Axiom of Infinity.  (Contributed by
     NM, 26-Mar-1995.)  (Proof shortened by Mario Carneiro, 2-Sep-2015.) */

theorem limom ()  {
	prop 1 : wff = |- Lim ω ;;
}

proof of limom {
	var x : set;;
	step 1 : wff = ordom () |- Ord ω ;;
	step 2 : wff = ordeleqon () |- ( Ord ω ↔ ( ω ∈ On ∨ ω = On ) ) ;;
	step 3 : wff = ordom () |- Ord ω ;;
	step 4 : wff = ordirr () |- ( Ord ω → ¬ ω ∈ ω ) ;;
	step 5 : wff = ax-mp (step 3, step 4) |- ¬ ω ∈ ω ;;
	step 6 : wff = elom () |- ( ω ∈ ω ↔ ( ω ∈ On ∧ ∀ x ( Lim x → ω ∈ x ) ) ) ;;
	step 7 : wff = baib (step 6) |- ( ω ∈ On → ( ω ∈ ω ↔ ∀ x ( Lim x → ω ∈ x ) ) ) ;;
	step 8 : wff = mtbii (step 5, step 7) |- ( ω ∈ On → ¬ ∀ x ( Lim x → ω ∈ x ) ) ;;
	step 9 : wff = limomss () |- ( Lim x → ω ⊆ x ) ;;
	step 10 : wff = ordom () |- Ord ω ;;
	step 11 : wff = limord () |- ( Lim x → Ord x ) ;;
	step 12 : wff = ordsseleq () |- ( ( Ord ω ∧ Ord x ) → ( ω ⊆ x ↔ ( ω ∈ x ∨ ω = x ) ) ) ;;
	step 13 : wff = sylancr (step 10, step 11, step 12) |- ( Lim x → ( ω ⊆ x ↔ ( ω ∈ x ∨ ω = x ) ) ) ;;
	step 14 : wff = mpbid (step 9, step 13) |- ( Lim x → ( ω ∈ x ∨ ω = x ) ) ;;
	step 15 : wff = ord (step 14) |- ( Lim x → ( ¬ ω ∈ x → ω = x ) ) ;;
	step 16 : wff = limeq () |- ( ω = x → ( Lim ω ↔ Lim x ) ) ;;
	step 17 : wff = biimprcd (step 16) |- ( Lim x → ( ω = x → Lim ω ) ) ;;
	step 18 : wff = syld (step 15, step 17) |- ( Lim x → ( ¬ ω ∈ x → Lim ω ) ) ;;
	step 19 : wff = con1d (step 18) |- ( Lim x → ( ¬ Lim ω → ω ∈ x ) ) ;;
	step 20 : wff = com12 (step 19) |- ( ¬ Lim ω → ( Lim x → ω ∈ x ) ) ;;
	step 21 : wff = alrimiv (step 20) |- ( ¬ Lim ω → ∀ x ( Lim x → ω ∈ x ) ) ;;
	step 22 : wff = nsyl2 (step 8, step 21) |- ( ω ∈ On → Lim ω ) ;;
	step 23 : wff = limon () |- Lim On ;;
	step 24 : wff = limeq () |- ( ω = On → ( Lim ω ↔ Lim On ) ) ;;
	step 25 : wff = mpbiri (step 23, step 24) |- ( ω = On → Lim ω ) ;;
	step 26 : wff = jaoi (step 22, step 25) |- ( ( ω ∈ On ∨ ω = On ) → Lim ω ) ;;
	step 27 : wff = sylbi (step 2, step 26) |- ( Ord ω → Lim ω ) ;;
	step 28 : wff = ax-mp (step 1, step 27) |- Lim ω ;;
	qed prop 1 = step 28 ;;
}

/* A class belongs to omega iff its successor does.  (Contributed by NM,
     3-Dec-1995.) */

theorem peano2b (A : class)  {
	prop 1 : wff = |- ( A ∈ ω ↔ suc A ∈ ω ) ;;
}

proof of peano2b {
	step 1 : wff = limom () |- Lim ω ;;
	step 2 : wff = limsuc () |- ( Lim ω → ( A ∈ ω ↔ suc A ∈ ω ) ) ;;
	step 3 : wff = ax-mp (step 1, step 2) |- ( A ∈ ω ↔ suc A ∈ ω ) ;;
	qed prop 1 = step 3 ;;
}

/* A nonzero natural number is a successor.  (Contributed by NM,
       18-Feb-2004.) */

theorem nnsuc (x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ∃ x ∈ ω A = suc x ) ;;
}

proof of nnsuc {
	step 1 : wff = nnlim () |- ( A ∈ ω → ¬ Lim A ) ;;
	step 2 : wff = adantr (step 1) |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ¬ Lim A ) ;;
	step 3 : wff = nnord () |- ( A ∈ ω → Ord A ) ;;
	step 4 : wff = orduninsuc () |- ( Ord A → ( A = ⋃ A ↔ ¬ ∃ x ∈ On A = suc x ) ) ;;
	step 5 : wff = adantr (step 4) |- ( ( Ord A ∧ A ≠ ∅ ) → ( A = ⋃ A ↔ ¬ ∃ x ∈ On A = suc x ) ) ;;
	step 6 : wff = df-lim () |- ( Lim A ↔ ( Ord A ∧ A ≠ ∅ ∧ A = ⋃ A ) ) ;;
	step 7 : wff = biimpri (step 6) |- ( ( Ord A ∧ A ≠ ∅ ∧ A = ⋃ A ) → Lim A ) ;;
	step 8 : wff = 3expia (step 7) |- ( ( Ord A ∧ A ≠ ∅ ) → ( A = ⋃ A → Lim A ) ) ;;
	step 9 : wff = sylbird (step 5, step 8) |- ( ( Ord A ∧ A ≠ ∅ ) → ( ¬ ∃ x ∈ On A = suc x → Lim A ) ) ;;
	step 10 : wff = sylan (step 3, step 9) |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ( ¬ ∃ x ∈ On A = suc x → Lim A ) ) ;;
	step 11 : wff = mt3d (step 2, step 10) |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ∃ x ∈ On A = suc x ) ;;
	step 12 : wff = eleq1 () |- ( A = suc x → ( A ∈ ω ↔ suc x ∈ ω ) ) ;;
	step 13 : wff = biimpcd (step 12) |- ( A ∈ ω → ( A = suc x → suc x ∈ ω ) ) ;;
	step 14 : wff = peano2b () |- ( x ∈ ω ↔ suc x ∈ ω ) ;;
	step 15 : wff = syl6ibr (step 13, step 14) |- ( A ∈ ω → ( A = suc x → x ∈ ω ) ) ;;
	step 16 : wff = ancrd (step 15) |- ( A ∈ ω → ( A = suc x → ( x ∈ ω ∧ A = suc x ) ) ) ;;
	step 17 : wff = adantld (step 16) |- ( A ∈ ω → ( ( x ∈ On ∧ A = suc x ) → ( x ∈ ω ∧ A = suc x ) ) ) ;;
	step 18 : wff = reximdv2 (step 17) |- ( A ∈ ω → ( ∃ x ∈ On A = suc x → ∃ x ∈ ω A = suc x ) ) ;;
	step 19 : wff = adantr (step 18) |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ( ∃ x ∈ On A = suc x → ∃ x ∈ ω A = suc x ) ) ;;
	step 20 : wff = mpd (step 11, step 19) |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ∃ x ∈ ω A = suc x ) ;;
	qed prop 1 = step 20 ;;
}

/* An ordinal subclass of non-limit ordinals is a class of natural
       numbers.  Exercise 7 of [TakeutiZaring] p. 42.  (Contributed by NM,
       2-Nov-2004.) */

theorem ssnlim (x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- ( ( Ord A ∧ A ⊆ { x ∈ On | ¬ Lim x } ) → A ⊆ ω ) ;;
}

proof of ssnlim {
	step 1 : wff = limom () |- Lim ω ;;
	step 2 : wff = ssel () |- ( A ⊆ { x ∈ On | ¬ Lim x } → ( ω ∈ A → ω ∈ { x ∈ On | ¬ Lim x } ) ) ;;
	step 3 : wff = limeq () |- ( x = ω → ( Lim x ↔ Lim ω ) ) ;;
	step 4 : wff = notbid (step 3) |- ( x = ω → ( ¬ Lim x ↔ ¬ Lim ω ) ) ;;
	step 5 : wff = elrab (step 4) |- ( ω ∈ { x ∈ On | ¬ Lim x } ↔ ( ω ∈ On ∧ ¬ Lim ω ) ) ;;
	step 6 : wff = simprbi (step 5) |- ( ω ∈ { x ∈ On | ¬ Lim x } → ¬ Lim ω ) ;;
	step 7 : wff = syl6 (step 2, step 6) |- ( A ⊆ { x ∈ On | ¬ Lim x } → ( ω ∈ A → ¬ Lim ω ) ) ;;
	step 8 : wff = mt2i (step 1, step 7) |- ( A ⊆ { x ∈ On | ¬ Lim x } → ¬ ω ∈ A ) ;;
	step 9 : wff = adantl (step 8) |- ( ( Ord A ∧ A ⊆ { x ∈ On | ¬ Lim x } ) → ¬ ω ∈ A ) ;;
	step 10 : wff = ordom () |- Ord ω ;;
	step 11 : wff = ordtri1 () |- ( ( Ord A ∧ Ord ω ) → ( A ⊆ ω ↔ ¬ ω ∈ A ) ) ;;
	step 12 : wff = mpan2 (step 10, step 11) |- ( Ord A → ( A ⊆ ω ↔ ¬ ω ∈ A ) ) ;;
	step 13 : wff = adantr (step 12) |- ( ( Ord A ∧ A ⊆ { x ∈ On | ¬ Lim x } ) → ( A ⊆ ω ↔ ¬ ω ∈ A ) ) ;;
	step 14 : wff = mpbird (step 9, step 13) |- ( ( Ord A ∧ A ⊆ { x ∈ On | ¬ Lim x } ) → A ⊆ ω ) ;;
	qed prop 1 = step 14 ;;
}


