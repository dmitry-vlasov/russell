import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Union/The_natural_numbers_(i_e__finite_ordinals).rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                 Peano's postulates

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Zero is a natural number.  One of Peano's 5 postulates for arithmetic.
     Proposition 7.30(1) of [TakeutiZaring] p. 42.  Note:  Unlike most
     textbooks, our proofs of ~ peano1 through ~ peano5 do not use the Axiom of
     Infinity.  Unlike Takeuti and Zaring, they also do not use the Axiom of
     Regularity.  (Contributed by NM, 15-May-1994.) */

theorem peano1 ()  {
	prop 1 : wff = |- ∅ ∈ ω ;;
}

proof of peano1 {
	step 1 : wff = limom () |- Lim ω ;;
	step 2 : wff = 0ellim () |- ( Lim ω → ∅ ∈ ω ) ;;
	step 3 : wff = ax-mp (step 1, step 2) |- ∅ ∈ ω ;;
	qed prop 1 = step 3 ;;
}

/* The successor of any natural number is a natural number.  One of Peano's 5
     postulates for arithmetic.  Proposition 7.30(2) of [TakeutiZaring] p. 42.
     (Contributed by NM, 3-Sep-2003.) */

theorem peano2 (A : class)  {
	prop 1 : wff = |- ( A ∈ ω → suc A ∈ ω ) ;;
}

proof of peano2 {
	step 1 : wff = peano2b () |- ( A ∈ ω ↔ suc A ∈ ω ) ;;
	step 2 : wff = biimpi (step 1) |- ( A ∈ ω → suc A ∈ ω ) ;;
	qed prop 1 = step 2 ;;
}

/* The successor of any natural number is not zero.  One of Peano's 5
     postulates for arithmetic.  Proposition 7.30(3) of [TakeutiZaring] p. 42.
     (Contributed by NM, 3-Sep-2003.) */

theorem peano3 (A : class)  {
	prop 1 : wff = |- ( A ∈ ω → suc A ≠ ∅ ) ;;
}

proof of peano3 {
	step 1 : wff = nsuceq0 () |- suc A ≠ ∅ ;;
	step 2 : wff = a1i (step 1) |- ( A ∈ ω → suc A ≠ ∅ ) ;;
	qed prop 1 = step 2 ;;
}

/* Two natural numbers are equal iff their successors are equal, i.e. the
     successor function is one-to-one.  One of Peano's 5 postulates for
     arithmetic.  Proposition 7.30(4) of [TakeutiZaring] p. 43.  (Contributed
     by NM, 3-Sep-2003.) */

theorem peano4 (A : class, B : class)  {
	prop 1 : wff = |- ( ( A ∈ ω ∧ B ∈ ω ) → ( suc A = suc B ↔ A = B ) ) ;;
}

proof of peano4 {
	step 1 : wff = nnon () |- ( A ∈ ω → A ∈ On ) ;;
	step 2 : wff = nnon () |- ( B ∈ ω → B ∈ On ) ;;
	step 3 : wff = suc11 () |- ( ( A ∈ On ∧ B ∈ On ) → ( suc A = suc B ↔ A = B ) ) ;;
	step 4 : wff = syl2an (step 1, step 2, step 3) |- ( ( A ∈ ω ∧ B ∈ ω ) → ( suc A = suc B ↔ A = B ) ) ;;
	qed prop 1 = step 4 ;;
}

/* The induction postulate: any class containing zero and closed under the
       successor operation contains all natural numbers.  One of Peano's 5
       postulates for arithmetic.  Proposition 7.30(5) of [TakeutiZaring]
       p. 43, except our proof does not require the Axiom of Infinity.  The
       more traditional statement of mathematical induction as a theorem
       schema, with a basis and an induction hypothesis, is derived from this
       theorem as theorem ~ findes .  (Contributed by NM, 18-Feb-2004.) */

theorem peano5 (x : set, A : class) disjointed(x y A) {
	prop 1 : wff = |- ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) → ω ⊆ A ) ;;
}

proof of peano5 {
	var y : set;;
	step 1 : wff = eldifn () |- ( y ∈ ( ω ∖ A ) → ¬ y ∈ A ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ∧ y ∈ ( ω ∖ A ) ) → ¬ y ∈ A ) ;;
	step 3 : wff = eldifi () |- ( y ∈ ( ω ∖ A ) → y ∈ ω ) ;;
	step 4 : wff = adantl (step 3) |- ( ( ∅ ∈ A ∧ y ∈ ( ω ∖ A ) ) → y ∈ ω ) ;;
	step 5 : wff = elndif () |- ( ∅ ∈ A → ¬ ∅ ∈ ( ω ∖ A ) ) ;;
	step 6 : wff = eleq1 () |- ( y = ∅ → ( y ∈ ( ω ∖ A ) ↔ ∅ ∈ ( ω ∖ A ) ) ) ;;
	step 7 : wff = biimpcd (step 6) |- ( y ∈ ( ω ∖ A ) → ( y = ∅ → ∅ ∈ ( ω ∖ A ) ) ) ;;
	step 8 : wff = necon3bd (step 7) |- ( y ∈ ( ω ∖ A ) → ( ¬ ∅ ∈ ( ω ∖ A ) → y ≠ ∅ ) ) ;;
	step 9 : wff = mpan9 (step 5, step 8) |- ( ( ∅ ∈ A ∧ y ∈ ( ω ∖ A ) ) → y ≠ ∅ ) ;;
	step 10 : wff = nnsuc () |- ( ( y ∈ ω ∧ y ≠ ∅ ) → ∃ x ∈ ω y = suc x ) ;;
	step 11 : wff = syl2anc (step 4, step 9, step 10) |- ( ( ∅ ∈ A ∧ y ∈ ( ω ∖ A ) ) → ∃ x ∈ ω y = suc x ) ;;
	step 12 : wff = adantlr (step 11) |- ( ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ∧ y ∈ ( ω ∖ A ) ) → ∃ x ∈ ω y = suc x ) ;;
	step 13 : wff = adantr (step 12) |- ( ( ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ∧ y ∈ ( ω ∖ A ) ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → ∃ x ∈ ω y = suc x ) ;;
	step 14 : wff = nfra1 () |- F/ x ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ;;
	step 15 : wff = nfv () |- F/ x ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) ;;
	step 16 : wff = nfan (step 14, step 15) |- F/ x ( ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ∧ ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) ) ;;
	step 17 : wff = nfv () |- F/ x y ∈ A ;;
	step 18 : wff = rsp () |- ( ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) → ( x ∈ ω → ( x ∈ A → suc x ∈ A ) ) ) ;;
	step 19 : wff = eldifi () |- ( y ∈ ( ω ∖ A ) → y ∈ ω ) ;;
	step 20 : wff = vex () |- x ∈ _V ;;
	step 21 : wff = sucid (step 20) |- x ∈ suc x ;;
	step 22 : wff = eleq2 () |- ( y = suc x → ( x ∈ y ↔ x ∈ suc x ) ) ;;
	step 23 : wff = mpbiri (step 21, step 22) |- ( y = suc x → x ∈ y ) ;;
	step 24 : wff = eleq1 () |- ( y = suc x → ( y ∈ ω ↔ suc x ∈ ω ) ) ;;
	step 25 : wff = peano2b () |- ( x ∈ ω ↔ suc x ∈ ω ) ;;
	step 26 : wff = syl6bbr (step 24, step 25) |- ( y = suc x → ( y ∈ ω ↔ x ∈ ω ) ) ;;
	step 27 : wff = minel () |- ( ( x ∈ y ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → ¬ x ∈ ( ω ∖ A ) ) ;;
	step 28 : wff = neldif () |- ( ( x ∈ ω ∧ ¬ x ∈ ( ω ∖ A ) ) → x ∈ A ) ;;
	step 29 : wff = sylan2 (step 27, step 28) |- ( ( x ∈ ω ∧ ( x ∈ y ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) ) → x ∈ A ) ;;
	step 30 : wff = exp32 (step 29) |- ( x ∈ ω → ( x ∈ y → ( ( ( ω ∖ A ) ∩ y ) = ∅ → x ∈ A ) ) ) ;;
	step 31 : wff = syl6bi (step 26, step 30) |- ( y = suc x → ( y ∈ ω → ( x ∈ y → ( ( ( ω ∖ A ) ∩ y ) = ∅ → x ∈ A ) ) ) ) ;;
	step 32 : wff = mpid (step 23, step 31) |- ( y = suc x → ( y ∈ ω → ( ( ( ω ∖ A ) ∩ y ) = ∅ → x ∈ A ) ) ) ;;
	step 33 : wff = syl5 (step 19, step 32) |- ( y = suc x → ( y ∈ ( ω ∖ A ) → ( ( ( ω ∖ A ) ∩ y ) = ∅ → x ∈ A ) ) ) ;;
	step 34 : wff = imp3a (step 33) |- ( y = suc x → ( ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → x ∈ A ) ) ;;
	step 35 : wff = eleq1a () |- ( suc x ∈ A → ( y = suc x → y ∈ A ) ) ;;
	step 36 : wff = com12 (step 35) |- ( y = suc x → ( suc x ∈ A → y ∈ A ) ) ;;
	step 37 : wff = imim12d (step 34, step 36) |- ( y = suc x → ( ( x ∈ A → suc x ∈ A ) → ( ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → y ∈ A ) ) ) ;;
	step 38 : wff = com13 (step 37) |- ( ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → ( ( x ∈ A → suc x ∈ A ) → ( y = suc x → y ∈ A ) ) ) ;;
	step 39 : wff = sylan9 (step 18, step 38) |- ( ( ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ∧ ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) ) → ( x ∈ ω → ( y = suc x → y ∈ A ) ) ) ;;
	step 40 : wff = rexlimd (step 16, step 17, step 39) |- ( ( ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ∧ ( y ∈ ( ω ∖ A ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) ) → ( ∃ x ∈ ω y = suc x → y ∈ A ) ) ;;
	step 41 : wff = exp32 (step 40) |- ( ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) → ( y ∈ ( ω ∖ A ) → ( ( ( ω ∖ A ) ∩ y ) = ∅ → ( ∃ x ∈ ω y = suc x → y ∈ A ) ) ) ) ;;
	step 42 : wff = a1i (step 41) |- ( ∅ ∈ A → ( ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) → ( y ∈ ( ω ∖ A ) → ( ( ( ω ∖ A ) ∩ y ) = ∅ → ( ∃ x ∈ ω y = suc x → y ∈ A ) ) ) ) ) ;;
	step 43 : wff = imp41 (step 42) |- ( ( ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ∧ y ∈ ( ω ∖ A ) ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → ( ∃ x ∈ ω y = suc x → y ∈ A ) ) ;;
	step 44 : wff = mpd (step 13, step 43) |- ( ( ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ∧ y ∈ ( ω ∖ A ) ) ∧ ( ( ω ∖ A ) ∩ y ) = ∅ ) → y ∈ A ) ;;
	step 45 : wff = mtand (step 2, step 44) |- ( ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) ∧ y ∈ ( ω ∖ A ) ) → ¬ ( ( ω ∖ A ) ∩ y ) = ∅ ) ;;
	step 46 : wff = nrexdv (step 45) |- ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) → ¬ ∃ y ∈ ( ω ∖ A ) ( ( ω ∖ A ) ∩ y ) = ∅ ) ;;
	step 47 : wff = ordom () |- Ord ω ;;
	step 48 : wff = difss () |- ( ω ∖ A ) ⊆ ω ;;
	step 49 : wff = tz7.5 () |- ( ( Ord ω ∧ ( ω ∖ A ) ⊆ ω ∧ ( ω ∖ A ) ≠ ∅ ) → ∃ y ∈ ( ω ∖ A ) ( ( ω ∖ A ) ∩ y ) = ∅ ) ;;
	step 50 : wff = mp3an12 (step 47, step 48, step 49) |- ( ( ω ∖ A ) ≠ ∅ → ∃ y ∈ ( ω ∖ A ) ( ( ω ∖ A ) ∩ y ) = ∅ ) ;;
	step 51 : wff = necon1bi (step 50) |- ( ¬ ∃ y ∈ ( ω ∖ A ) ( ( ω ∖ A ) ∩ y ) = ∅ → ( ω ∖ A ) = ∅ ) ;;
	step 52 : wff = syl (step 46, step 51) |- ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) → ( ω ∖ A ) = ∅ ) ;;
	step 53 : wff = ssdif0 () |- ( ω ⊆ A ↔ ( ω ∖ A ) = ∅ ) ;;
	step 54 : wff = sylibr (step 52, step 53) |- ( ( ∅ ∈ A ∧ ∀ x ∈ ω ( x ∈ A → suc x ∈ A ) ) → ω ⊆ A ) ;;
	qed prop 1 = step 54 ;;
}

/* A natural number is either 0 or a successor.  (Contributed by NM,
       27-May-1998.) */

theorem nn0suc (x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- ( A ∈ ω → ( A = ∅ ∨ ∃ x ∈ ω A = suc x ) ) ;;
}

proof of nn0suc {
	step 1 : wff = df-ne () |- ( A ≠ ∅ ↔ ¬ A = ∅ ) ;;
	step 2 : wff = nnsuc () |- ( ( A ∈ ω ∧ A ≠ ∅ ) → ∃ x ∈ ω A = suc x ) ;;
	step 3 : wff = sylan2br (step 1, step 2) |- ( ( A ∈ ω ∧ ¬ A = ∅ ) → ∃ x ∈ ω A = suc x ) ;;
	step 4 : wff = ex (step 3) |- ( A ∈ ω → ( ¬ A = ∅ → ∃ x ∈ ω A = suc x ) ) ;;
	step 5 : wff = orrd (step 4) |- ( A ∈ ω → ( A = ∅ ∨ ∃ x ∈ ω A = suc x ) ) ;;
	qed prop 1 = step 5 ;;
}


