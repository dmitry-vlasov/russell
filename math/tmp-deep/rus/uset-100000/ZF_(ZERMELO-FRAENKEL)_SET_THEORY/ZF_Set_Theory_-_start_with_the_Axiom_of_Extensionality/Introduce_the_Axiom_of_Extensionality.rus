import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Introduce the Axiom of Extensionality

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Axiom of Extensionality.  An axiom of Zermelo-Fraenkel set theory.  It
       states that two sets are identical if they contain the same elements.
       Axiom Ext of [BellMachover] p. 461.

       Set theory can also be formulated with a _single_ primitive predicate
       ` e. ` on top of traditional predicate calculus _without_ equality.  In
       that case the Axiom of Extensionality becomes
       ` ( A. w ( w e. x <-> w e. y ) -> ( x e. z -> y e. z ) ) ` , and
       equality ` x = y ` is _defined_ as ` A. w ( w e. x <-> w e. y ) ` .  All
       of the usual axioms of equality then become theorems of set theory.
       See, for example, Axiom 1 of [TakeutiZaring] p. 8.

       To use the above "equality-free" version of Extensionality with
       Metamath's logical axioms, we would rewrite ~ ax-8 through ~ ax-16 with
       equality expanded according to the above definition.  Some of those
       axioms could be proved from set theory and would be redundant.  Not all
       of them are redundant, since our axioms of predicate calculus make
       essential use of equality for the proper substitution that is a
       primitive notion in traditional predicate calculus.  A study of such an
       axiomatization would be an interesting project for someone exploring the
       foundations of logic.

       _General remarks_:  Our set theory axioms are presented using defined
       connectives ( ` <-> ` , ` E. ` , etc.) for convenience.  However, it is
       implicitly understood that the actual axioms use only the primitive
       connectives ` -> ` , ` -. ` , ` A. ` , ` = ` , and ` e. ` .  It is
       straightforward to establish the equivalence between the actual axioms
       and the ones we display, and we will not do so.

       It is important to understand that strictly speaking, all of our set
       theory axioms are really schemes that represent an infinite number of
       actual axioms.  This is inherent in the design of Metamath
       ("metavariable math"), which manipulates only metavariables.  For
       example, the metavariable ` x ` in ~ ax-ext can represent any actual
       variable _v1_, _v2_, _v3_,... .  Distinct variable restrictions ($d)
       prevent us from substituting say _v1_ for both ` x ` and ` z ` .  This
       is in contrast to typical textbook presentations that present actual
       axioms (except for Replacement ~ ax-rep , which involves a wff
       metavariable).  In practice, though, the theorems and proofs are
       essentially the same.  The $d restrictions make each of the infinite
       axioms generated by the ~ ax-ext scheme exactly logically equivalent to
       each other and in particular to the actual axiom of the textbook
       version.  (Contributed by NM, 5-Aug-1993.) */

axiom ax-ext (x : set, y : set, z : set) disjointed(x y z) {
	prop 1 : wff = |- ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
}

/* The Axiom of Extensionality ( ~ ax-ext ) restated so that it postulates
       the existence of a set ` z ` given two arbitrary sets ` x ` and ` y ` .
       This way to express it follows the general idea of the other ZFC axioms,
       which is to postulate the existence of sets given other sets.
       (Contributed by NM, 28-Sep-2003.) */

theorem axext2 (x : set, y : set, z : set) disjointed(x y z) {
	prop 1 : wff = |- ∃ z ( ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
}

proof of axext2 {
	step 1 : wff = ax-ext () |- ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
	step 2 : wff = 19.36v () |- ( ∃ z ( ( z ∈ x ↔ z ∈ y ) → x = y ) ↔ ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ) ;;
	step 3 : wff = mpbir (step 1, step 2) |- ∃ z ( ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
	qed prop 1 = step 3 ;;
}

/* A generalization of the Axiom of Extensionality in which ` x ` and ` y `
       need not be distinct.  (Contributed by NM, 15-Sep-1993.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.) */

theorem axext3 (x : set, y : set, z : set) disjointed(z x w, z y w) {
	prop 1 : wff = |- ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
}

proof of axext3 {
	var w : set;;
	step 1 : wff = elequ2 () |- ( w = x → ( z ∈ w ↔ z ∈ x ) ) ;;
	step 2 : wff = bibi1d (step 1) |- ( w = x → ( ( z ∈ w ↔ z ∈ y ) ↔ ( z ∈ x ↔ z ∈ y ) ) ) ;;
	step 3 : wff = albidv (step 2) |- ( w = x → ( ∀ z ( z ∈ w ↔ z ∈ y ) ↔ ∀ z ( z ∈ x ↔ z ∈ y ) ) ) ;;
	step 4 : wff = equequ1 () |- ( w = x → ( w = y ↔ x = y ) ) ;;
	step 5 : wff = imbi12d (step 3, step 4) |- ( w = x → ( ( ∀ z ( z ∈ w ↔ z ∈ y ) → w = y ) ↔ ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ) ) ;;
	step 6 : wff = ax-ext () |- ( ∀ z ( z ∈ w ↔ z ∈ y ) → w = y ) ;;
	step 7 : wff = chvarv (step 5, step 6) |- ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
	qed prop 1 = step 7 ;;
}

/* A bidirectional version of Extensionality.  Although this theorem
       "looks" like it is just a definition of equality, it requires the Axiom
       of Extensionality for its proof under our axiomatization.  See the
       comments for ~ ax-ext and ~ df-cleq .  (Contributed by NM,
       14-Nov-2008.) */

theorem axext4 (x : set, y : set, z : set) disjointed(z x, z y) {
	prop 1 : wff = |- ( x = y ↔ ∀ z ( z ∈ x ↔ z ∈ y ) ) ;;
}

proof of axext4 {
	step 1 : wff = elequ2 () |- ( x = y → ( z ∈ x ↔ z ∈ y ) ) ;;
	step 2 : wff = alrimiv (step 1) |- ( x = y → ∀ z ( z ∈ x ↔ z ∈ y ) ) ;;
	step 3 : wff = axext3 () |- ( ∀ z ( z ∈ x ↔ z ∈ y ) → x = y ) ;;
	step 4 : wff = impbii (step 2, step 3) |- ( x = y ↔ ∀ z ( z ∈ x ↔ z ∈ y ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Any set defined by a property is the only set defined by that property.
       Theorem 1.1 of [BellMachover] p. 462.  (Contributed by NM,
       30-Jun-1994.) */

theorem bm1.1 (ph : wff, x : set, y : set) disjointed(x y z, ph z) {
	hyp 1 : wff = |- F/ x ph ;;
	-----------------------
	prop 1 : wff = |- ( ∃ x ∀ y ( y ∈ x ↔ ph ) → ∃! x ∀ y ( y ∈ x ↔ ph ) ) ;;
}

proof of bm1.1 {
	var z : set;;
	step 1 : wff = nfv () |- F/ x y ∈ z ;;
	step 2 : wff = nfbi (step 1, hyp 1) |- F/ x ( y ∈ z ↔ ph ) ;;
	step 3 : wff = nfal (step 2) |- F/ x ∀ y ( y ∈ z ↔ ph ) ;;
	step 4 : wff = elequ2 () |- ( x = z → ( y ∈ x ↔ y ∈ z ) ) ;;
	step 5 : wff = bibi1d (step 4) |- ( x = z → ( ( y ∈ x ↔ ph ) ↔ ( y ∈ z ↔ ph ) ) ) ;;
	step 6 : wff = albidv (step 5) |- ( x = z → ( ∀ y ( y ∈ x ↔ ph ) ↔ ∀ y ( y ∈ z ↔ ph ) ) ) ;;
	step 7 : wff = sbie (step 3, step 6) |- ( [ z / x ] ∀ y ( y ∈ x ↔ ph ) ↔ ∀ y ( y ∈ z ↔ ph ) ) ;;
	step 8 : wff = 19.26 () |- ( ∀ y ( ( y ∈ x ↔ ph ) ∧ ( y ∈ z ↔ ph ) ) ↔ ( ∀ y ( y ∈ x ↔ ph ) ∧ ∀ y ( y ∈ z ↔ ph ) ) ) ;;
	step 9 : wff = biantr () |- ( ( ( y ∈ x ↔ ph ) ∧ ( y ∈ z ↔ ph ) ) → ( y ∈ x ↔ y ∈ z ) ) ;;
	step 10 : wff = alimi (step 9) |- ( ∀ y ( ( y ∈ x ↔ ph ) ∧ ( y ∈ z ↔ ph ) ) → ∀ y ( y ∈ x ↔ y ∈ z ) ) ;;
	step 11 : wff = ax-ext () |- ( ∀ y ( y ∈ x ↔ y ∈ z ) → x = z ) ;;
	step 12 : wff = syl (step 10, step 11) |- ( ∀ y ( ( y ∈ x ↔ ph ) ∧ ( y ∈ z ↔ ph ) ) → x = z ) ;;
	step 13 : wff = sylbir (step 8, step 12) |- ( ( ∀ y ( y ∈ x ↔ ph ) ∧ ∀ y ( y ∈ z ↔ ph ) ) → x = z ) ;;
	step 14 : wff = sylan2b (step 7, step 13) |- ( ( ∀ y ( y ∈ x ↔ ph ) ∧ [ z / x ] ∀ y ( y ∈ x ↔ ph ) ) → x = z ) ;;
	step 15 : wff = gen2 (step 14) |- ∀ x ∀ z ( ( ∀ y ( y ∈ x ↔ ph ) ∧ [ z / x ] ∀ y ( y ∈ x ↔ ph ) ) → x = z ) ;;
	step 16 : wff = jctr (step 15) |- ( ∃ x ∀ y ( y ∈ x ↔ ph ) → ( ∃ x ∀ y ( y ∈ x ↔ ph ) ∧ ∀ x ∀ z ( ( ∀ y ( y ∈ x ↔ ph ) ∧ [ z / x ] ∀ y ( y ∈ x ↔ ph ) ) → x = z ) ) ) ;;
	step 17 : wff = nfv () |- F/ z ∀ y ( y ∈ x ↔ ph ) ;;
	step 18 : wff = eu2 (step 17) |- ( ∃! x ∀ y ( y ∈ x ↔ ph ) ↔ ( ∃ x ∀ y ( y ∈ x ↔ ph ) ∧ ∀ x ∀ z ( ( ∀ y ( y ∈ x ↔ ph ) ∧ [ z / x ] ∀ y ( y ∈ x ↔ ph ) ) → x = z ) ) ) ;;
	step 19 : wff = sylibr (step 16, step 18) |- ( ∃ x ∀ y ( y ∈ x ↔ ph ) → ∃! x ∀ y ( y ∈ x ↔ ph ) ) ;;
	qed prop 1 = step 19 ;;
}


