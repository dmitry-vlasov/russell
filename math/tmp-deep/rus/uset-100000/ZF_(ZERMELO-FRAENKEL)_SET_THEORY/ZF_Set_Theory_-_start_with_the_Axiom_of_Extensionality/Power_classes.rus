import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_start_with_the_Axiom_of_Extensionality/_Weak_deduction_theorem__for_set_theory.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                          Power classes

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Declare the symbol for power class. */

constant {
	symbol Pow ;;
	ascii ~P ;;
	latex \cal{P} ;;
}

/* Calligraphic P */

/* Extend class notation to include power class.  (The tilde in the Metamath
     token is meant to suggest the calligraphic font of the P.) */

rule cpw (A : class) {
	term : class = # Pow A ;;
}

/* Soundness justification theorem for ~ df-pw .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) */

theorem pwjust (x : set, y : set, A : class) disjointed(x A, y A, z x, z y, z A) {
	prop 1 : wff = |- { x | x ⊆ A } = { y | y ⊆ A } ;;
}

proof of pwjust {
	var z : set;;
	step 1 : wff = sseq1 () |- ( x = z → ( x ⊆ A ↔ z ⊆ A ) ) ;;
	step 2 : wff = cbvabv (step 1) |- { x | x ⊆ A } = { z | z ⊆ A } ;;
	step 3 : wff = sseq1 () |- ( z = y → ( z ⊆ A ↔ y ⊆ A ) ) ;;
	step 4 : wff = cbvabv (step 3) |- { z | z ⊆ A } = { y | y ⊆ A } ;;
	step 5 : wff = eqtri (step 2, step 4) |- { x | x ⊆ A } = { y | y ⊆ A } ;;
	qed prop 1 = step 5 ;;
}

/* Define power class.  Definition 5.10 of [TakeutiZaring] p. 17, but we
       also let it apply to proper classes, i.e. those that are not members of
       ` _V ` .  When applied to a set, this produces its power set.  A power
       set of S is the set of all subsets of S, including the empty set and S
       itself.  For example, if ` A = { 3 , 5 , 7 } ` , then
       ` ~P A = { (/) , { 3 } , { 5 } , { 7 } , { 3 , 5 } , `
       ` { 3 , 7 } , { 5 , 7 } , { 3 , 5 , 7 } } ` ( ~ ex-pw ).  We will later
       introduce the Axiom of Power Sets ~ ax-pow , which can be expressed in
       class notation per ~ pwexg .  Still later we will prove, in ~ hashpw ,
       that the size of the power set of a finite set is 2 raised to the power
       of the size of the set.  (Contributed by NM, 5-Aug-1993.) */

definition df-pw (x : set, A : class) disjointed(x A) {
	defiendum : class = # Pow A ;;
	definiens : class = # { x | x ⊆ A } ;;
	-----------------------
	prop : wff = |- defiendum = definiens ;;
}

/* Equality theorem for power class.  (Contributed by NM, 5-Aug-1993.) */

theorem pweq (A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A = B → Pow A = Pow B ) ;;
}

proof of pweq {
	var x : set;;
	step 1 : wff = sseq2 () |- ( A = B → ( x ⊆ A ↔ x ⊆ B ) ) ;;
	step 2 : wff = abbidv (step 1) |- ( A = B → { x | x ⊆ A } = { x | x ⊆ B } ) ;;
	step 3 : wff = df-pw () |- Pow A = { x | x ⊆ A } ;;
	step 4 : wff = df-pw () |- Pow B = { x | x ⊆ B } ;;
	step 5 : wff = 3eqtr4g (step 2, step 3, step 4) |- ( A = B → Pow A = Pow B ) ;;
	qed prop 1 = step 5 ;;
}

/* Equality inference for power class.  (Contributed by NM,
       27-Nov-2013.) */

theorem pweqi (A : class, B : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- Pow A = Pow B ;;
}

proof of pweqi {
	step 1 : wff = pweq () |- ( A = B → Pow A = Pow B ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- Pow A = Pow B ;;
	qed prop 1 = step 2 ;;
}

/* Equality deduction for power class.  (Contributed by NM,
       27-Nov-2013.) */

theorem pweqd (ph : wff, A : class, B : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → Pow A = Pow B ) ;;
}

proof of pweqd {
	step 1 : wff = pweq () |- ( A = B → Pow A = Pow B ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → Pow A = Pow B ) ;;
	qed prop 1 = step 2 ;;
}

/* Membership in a power class.  Theorem 86 of [Suppes] p. 47.
         (Contributed by NM, 31-Dec-1993.) */

theorem elpw (A : class, B : class) disjointed(A x, B x) {
	hyp 1 : wff = |- A ∈ _V ;;
	-----------------------
	prop 1 : wff = |- ( A ∈ Pow B ↔ A ⊆ B ) ;;
}

proof of elpw {
	var x : set;;
	step 1 : wff = sseq1 () |- ( x = A → ( x ⊆ B ↔ A ⊆ B ) ) ;;
	step 2 : wff = df-pw () |- Pow B = { x | x ⊆ B } ;;
	step 3 : wff = elab2 (hyp 1, step 1, step 2) |- ( A ∈ Pow B ↔ A ⊆ B ) ;;
	qed prop 1 = step 3 ;;
}

/* Membership in a power class.  Theorem 86 of [Suppes] p. 47.  See also
       ~ elpw2g .  (Contributed by NM, 6-Aug-2000.) */

theorem elpwg (A : class, B : class, V : class) disjointed(A x, B x) {
	prop 1 : wff = |- ( A ∈ V → ( A ∈ Pow B ↔ A ⊆ B ) ) ;;
}

proof of elpwg {
	var x : set;;
	step 1 : wff = eleq1 () |- ( x = A → ( x ∈ Pow B ↔ A ∈ Pow B ) ) ;;
	step 2 : wff = sseq1 () |- ( x = A → ( x ⊆ B ↔ A ⊆ B ) ) ;;
	step 3 : wff = vex () |- x ∈ _V ;;
	step 4 : wff = elpw (step 3) |- ( x ∈ Pow B ↔ x ⊆ B ) ;;
	step 5 : wff = vtoclbg (step 1, step 2, step 4) |- ( A ∈ V → ( A ∈ Pow B ↔ A ⊆ B ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Subset relation implied by membership in a power class.  (Contributed by
     NM, 17-Feb-2007.) */

theorem elpwi (A : class, B : class)  {
	prop 1 : wff = |- ( A ∈ Pow B → A ⊆ B ) ;;
}

proof of elpwi {
	step 1 : wff = elpwg () |- ( A ∈ Pow B → ( A ∈ Pow B ↔ A ⊆ B ) ) ;;
	step 2 : wff = ibi (step 1) |- ( A ∈ Pow B → A ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* An element of a power class is a subclass.  Deduction form of ~ elpwi .
       (Contributed by David Moews, 1-May-2017.) */

theorem elpwid (ph : wff, A : class, B : class)  {
	hyp 1 : wff = |- ( ph → A ∈ Pow B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ B ) ;;
}

proof of elpwid {
	step 1 : wff = elpwi () |- ( A ∈ Pow B → A ⊆ B ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → A ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* If ` A ` belongs to a part of ` C ` then ` A ` belongs to ` C ` .
     (Contributed by FL, 3-Aug-2009.) */

theorem elelpwi (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ∈ B ∧ B ∈ Pow C ) → A ∈ C ) ;;
}

proof of elelpwi {
	step 1 : wff = elpwi () |- ( B ∈ Pow C → B ⊆ C ) ;;
	step 2 : wff = sseld (step 1) |- ( B ∈ Pow C → ( A ∈ B → A ∈ C ) ) ;;
	step 3 : wff = impcom (step 2) |- ( ( A ∈ B ∧ B ∈ Pow C ) → A ∈ C ) ;;
	qed prop 1 = step 3 ;;
}

/* Bound-variable hypothesis builder for power class.  (Contributed by NM,
       28-Oct-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) */

theorem nfpw (x : set, A : class) disjointed(y A, x y) {
	hyp 1 : wff = |- F/_ x A ;;
	-----------------------
	prop 1 : wff = |- F/_ x Pow A ;;
}

proof of nfpw {
	var y : set;;
	step 1 : wff = df-pw () |- Pow A = { y | y ⊆ A } ;;
	step 2 : wff = nfcv () |- F/_ x y ;;
	step 3 : wff = nfss (step 2, hyp 1) |- F/ x y ⊆ A ;;
	step 4 : wff = nfab (step 3) |- F/_ x { y | y ⊆ A } ;;
	step 5 : wff = nfcxfr (step 1, step 4) |- F/_ x Pow A ;;
	qed prop 1 = step 5 ;;
}

/* Membership of the original in a power set.  (Contributed by Stefan O'Rear,
     1-Feb-2015.) */

theorem pwidg (A : class, V : class)  {
	prop 1 : wff = |- ( A ∈ V → A ∈ Pow A ) ;;
}

proof of pwidg {
	step 1 : wff = ssid () |- A ⊆ A ;;
	step 2 : wff = elpwg () |- ( A ∈ V → ( A ∈ Pow A ↔ A ⊆ A ) ) ;;
	step 3 : wff = mpbiri (step 1, step 2) |- ( A ∈ V → A ∈ Pow A ) ;;
	qed prop 1 = step 3 ;;
}

/* A set is a member of its power class.  Theorem 87 of [Suppes] p. 47.
       (Contributed by NM, 5-Aug-1993.) */

theorem pwid (A : class)  {
	hyp 1 : wff = |- A ∈ _V ;;
	-----------------------
	prop 1 : wff = |- A ∈ Pow A ;;
}

proof of pwid {
	step 1 : wff = pwidg () |- ( A ∈ _V → A ∈ Pow A ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- A ∈ Pow A ;;
	qed prop 1 = step 2 ;;
}

/* Subclass relationship for power class.  (Contributed by NM,
       21-Jun-2009.) */

theorem pwss (x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( Pow A ⊆ B ↔ ∀ x ( x ⊆ A → x ∈ B ) ) ;;
}

proof of pwss {
	step 1 : wff = dfss2 () |- ( Pow A ⊆ B ↔ ∀ x ( x ∈ Pow A → x ∈ B ) ) ;;
	step 2 : wff = df-pw () |- Pow A = { x | x ⊆ A } ;;
	step 3 : wff = abeq2i (step 2) |- ( x ∈ Pow A ↔ x ⊆ A ) ;;
	step 4 : wff = imbi1i (step 3) |- ( ( x ∈ Pow A → x ∈ B ) ↔ ( x ⊆ A → x ∈ B ) ) ;;
	step 5 : wff = albii (step 4) |- ( ∀ x ( x ∈ Pow A → x ∈ B ) ↔ ∀ x ( x ⊆ A → x ∈ B ) ) ;;
	step 6 : wff = bitri (step 1, step 5) |- ( Pow A ⊆ B ↔ ∀ x ( x ⊆ A → x ∈ B ) ) ;;
	qed prop 1 = step 6 ;;
}


