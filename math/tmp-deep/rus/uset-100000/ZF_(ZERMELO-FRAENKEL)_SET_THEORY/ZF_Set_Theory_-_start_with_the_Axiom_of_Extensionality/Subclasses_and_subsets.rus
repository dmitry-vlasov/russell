import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_start_with_the_Axiom_of_Extensionality/Define_basic_set_operations_and_relations.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Subclasses and subsets

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Define the subclass relationship.  Exercise 9 of [TakeutiZaring] p. 18.
     For example, ` { 1 , 2 } C_ { 1 , 2 , 3 } ` ( ~ ex-ss ).  Note that
     ` A C_ A ` (proved in ~ ssid ).  Contrast this relationship with the
     relationship ` A C. B ` (as will be defined in ~ df-pss ).  For a more
     traditional definition, but requiring a dummy variable, see ~ dfss2 .
     Other possible definitions are given by ~ dfss3 , ~ dfss4 , ~ sspss ,
     ~ ssequn1 , ~ ssequn2 , ~ sseqin2 , and ~ ssdif0 .  (Contributed by NM,
     27-Apr-1994.) */

definition df-ss (A : class, B : class)  {
	defiendum : wff = # A ⊆ B ;;
	definiens : wff = # ( A ∩ B ) = A ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/* Variant of subclass definition ~ df-ss .  (Contributed by NM,
     3-Sep-2004.) */

theorem dfss (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊆ B ↔ A = ( A ∩ B ) ) ;;
}

proof of dfss {
	step 1 : wff = df-ss () |- ( A ⊆ B ↔ ( A ∩ B ) = A ) ;;
	step 2 : wff = eqcom () |- ( ( A ∩ B ) = A ↔ A = ( A ∩ B ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( A ⊆ B ↔ A = ( A ∩ B ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Define proper subclass relationship between two classes.  Definition 5.9
     of [TakeutiZaring] p. 17.  For example, ` { 1 , 2 } C. { 1 , 2 , 3 } `
     ( ~ ex-pss ).  Note that ` -. A C. A ` (proved in ~ pssirr ).  Contrast
     this relationship with the relationship ` A C_ B ` (as defined in
     ~ df-ss ).  Other possible definitions are given by ~ dfpss2 and
     ~ dfpss3 .  (Contributed by NM, 7-Feb-1996.) */

definition df-pss (A : class, B : class)  {
	defiendum : wff = # A ⊂ B ;;
	definiens : wff = # ( A ⊆ B ∧ A ≠ B ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/* Alternate definition of the subclass relationship between two classes.
       Definition 5.9 of [TakeutiZaring] p. 17.  (Contributed by NM,
       8-Jan-2002.) */

theorem dfss2 (x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
}

proof of dfss2 {
	step 1 : wff = dfss () |- ( A ⊆ B ↔ A = ( A ∩ B ) ) ;;
	step 2 : wff = df-in () |- ( A ∩ B ) = { x | ( x ∈ A ∧ x ∈ B ) } ;;
	step 3 : wff = eqeq2i (step 2) |- ( A = ( A ∩ B ) ↔ A = { x | ( x ∈ A ∧ x ∈ B ) } ) ;;
	step 4 : wff = abeq2 () |- ( A = { x | ( x ∈ A ∧ x ∈ B ) } ↔ ∀ x ( x ∈ A ↔ ( x ∈ A ∧ x ∈ B ) ) ) ;;
	step 5 : wff = 3bitri (step 1, step 3, step 4) |- ( A ⊆ B ↔ ∀ x ( x ∈ A ↔ ( x ∈ A ∧ x ∈ B ) ) ) ;;
	step 6 : wff = pm4.71 () |- ( ( x ∈ A → x ∈ B ) ↔ ( x ∈ A ↔ ( x ∈ A ∧ x ∈ B ) ) ) ;;
	step 7 : wff = albii (step 6) |- ( ∀ x ( x ∈ A → x ∈ B ) ↔ ∀ x ( x ∈ A ↔ ( x ∈ A ∧ x ∈ B ) ) ) ;;
	step 8 : wff = bitr4i (step 5, step 7) |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Alternate definition of subclass relationship.  (Contributed by NM,
       14-Oct-1999.) */

theorem dfss3 (x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A ⊆ B ↔ ∀ x ∈ A x ∈ B ) ;;
}

proof of dfss3 {
	step 1 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = df-ral () |- ( ∀ x ∈ A x ∈ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( A ⊆ B ↔ ∀ x ∈ A x ∈ B ) ;;
	qed prop 1 = step 3 ;;
}

/* Equivalence for subclass relation, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       3-Jul-1994.)  (Revised by Andrew Salmon, 27-Aug-2011.) */

theorem dfss2f (x : set, A : class, B : class) disjointed(z A, z B, x z) {
	hyp 1 : wff = |- F/_ x A ;;
	hyp 2 : wff = |- F/_ x B ;;
	-----------------------
	prop 1 : wff = |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
}

proof of dfss2f {
	var z : set;;
	step 1 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ z ( z ∈ A → z ∈ B ) ) ;;
	step 2 : wff = nfcri (hyp 1) |- F/ x z ∈ A ;;
	step 3 : wff = nfcri (hyp 2) |- F/ x z ∈ B ;;
	step 4 : wff = nfim (step 2, step 3) |- F/ x ( z ∈ A → z ∈ B ) ;;
	step 5 : wff = nfv () |- F/ z ( x ∈ A → x ∈ B ) ;;
	step 6 : wff = eleq1 () |- ( z = x → ( z ∈ A ↔ x ∈ A ) ) ;;
	step 7 : wff = eleq1 () |- ( z = x → ( z ∈ B ↔ x ∈ B ) ) ;;
	step 8 : wff = imbi12d (step 6, step 7) |- ( z = x → ( ( z ∈ A → z ∈ B ) ↔ ( x ∈ A → x ∈ B ) ) ) ;;
	step 9 : wff = cbval (step 4, step 5, step 8) |- ( ∀ z ( z ∈ A → z ∈ B ) ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 10 : wff = bitri (step 1, step 9) |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	qed prop 1 = step 10 ;;
}

/* Equivalence for subclass relation, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       20-Mar-2004.) */

theorem dfss3f (x : set, A : class, B : class)  {
	hyp 1 : wff = |- F/_ x A ;;
	hyp 2 : wff = |- F/_ x B ;;
	-----------------------
	prop 1 : wff = |- ( A ⊆ B ↔ ∀ x ∈ A x ∈ B ) ;;
}

proof of dfss3f {
	step 1 : wff = dfss2f (hyp 1, hyp 2) |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = df-ral () |- ( ∀ x ∈ A x ∈ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( A ⊆ B ↔ ∀ x ∈ A x ∈ B ) ;;
	qed prop 1 = step 3 ;;
}

/* If ` x ` is not free in ` A ` and ` B ` , it is not free in
       ` A C_ B ` .  (Contributed by NM, 27-Dec-1996.) */

theorem nfss (x : set, A : class, B : class)  {
	hyp 1 : wff = |- F/_ x A ;;
	hyp 2 : wff = |- F/_ x B ;;
	-----------------------
	prop 1 : wff = |- F/ x A ⊆ B ;;
}

proof of nfss {
	step 1 : wff = dfss3f (hyp 1, hyp 2) |- ( A ⊆ B ↔ ∀ x ∈ A x ∈ B ) ;;
	step 2 : wff = nfra1 () |- F/ x ∀ x ∈ A x ∈ B ;;
	step 3 : wff = nfxfr (step 1, step 2) |- F/ x A ⊆ B ;;
	qed prop 1 = step 3 ;;
}

/* Membership relationships follow from a subclass relationship.
       (Contributed by NM, 5-Aug-1993.) */

theorem ssel (A : class, B : class, C : class) disjointed(x A, x B, x C) {
	prop 1 : wff = |- ( A ⊆ B → ( C ∈ A → C ∈ B ) ) ;;
}

proof of ssel {
	var x : set;;
	step 1 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( A ⊆ B → ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 3 : wff = 19.21bi (step 2) |- ( A ⊆ B → ( x ∈ A → x ∈ B ) ) ;;
	step 4 : wff = anim2d (step 3) |- ( A ⊆ B → ( ( x = C ∧ x ∈ A ) → ( x = C ∧ x ∈ B ) ) ) ;;
	step 5 : wff = eximdv (step 4) |- ( A ⊆ B → ( ∃ x ( x = C ∧ x ∈ A ) → ∃ x ( x = C ∧ x ∈ B ) ) ) ;;
	step 6 : wff = df-clel () |- ( C ∈ A ↔ ∃ x ( x = C ∧ x ∈ A ) ) ;;
	step 7 : wff = df-clel () |- ( C ∈ B ↔ ∃ x ( x = C ∧ x ∈ B ) ) ;;
	step 8 : wff = 3imtr4g (step 5, step 6, step 7) |- ( A ⊆ B → ( C ∈ A → C ∈ B ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Membership relationships follow from a subclass relationship.
     (Contributed by NM, 7-Jun-2004.) */

theorem ssel2 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊆ B ∧ C ∈ A ) → C ∈ B ) ;;
}

proof of ssel2 {
	step 1 : wff = ssel () |- ( A ⊆ B → ( C ∈ A → C ∈ B ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( A ⊆ B ∧ C ∈ A ) → C ∈ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Membership inference from subclass relationship.  (Contributed by NM,
       5-Aug-1993.) */

theorem sseli (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	-----------------------
	prop 1 : wff = |- ( C ∈ A → C ∈ B ) ;;
}

proof of sseli {
	step 1 : wff = ssel () |- ( A ⊆ B → ( C ∈ A → C ∈ B ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( C ∈ A → C ∈ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Membership inference from subclass relationship.  (Contributed by NM,
         31-May-1999.) */

theorem sselii (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- C ∈ A ;;
	-----------------------
	prop 1 : wff = |- C ∈ B ;;
}

proof of sselii {
	step 1 : wff = sseli (hyp 1) |- ( C ∈ A → C ∈ B ) ;;
	step 2 : wff = ax-mp (hyp 2, step 1) |- C ∈ B ;;
	qed prop 1 = step 2 ;;
}

/* Membership inference from subclass relationship.  (Contributed by NM,
         25-Jun-2014.) */

theorem sseldi (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- ( ph → C ∈ A ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → C ∈ B ) ;;
}

proof of sseldi {
	step 1 : wff = sseli (hyp 1) |- ( C ∈ A → C ∈ B ) ;;
	step 2 : wff = syl (hyp 2, step 1) |- ( ph → C ∈ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Membership deduction from subclass relationship.  (Contributed by NM,
       15-Nov-1995.) */

theorem sseld (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( C ∈ A → C ∈ B ) ) ;;
}

proof of sseld {
	step 1 : wff = ssel () |- ( A ⊆ B → ( C ∈ A → C ∈ B ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( C ∈ A → C ∈ B ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Membership deduction from subclass relationship.  (Contributed by NM,
       26-Jun-2014.) */

theorem sselda (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ C ∈ A ) → C ∈ B ) ;;
}

proof of sselda {
	step 1 : wff = sseld (hyp 1) |- ( ph → ( C ∈ A → C ∈ B ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ C ∈ A ) → C ∈ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Membership inference from subclass relationship.  (Contributed by NM,
         14-Dec-2004.) */

theorem sseldd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → C ∈ A ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → C ∈ B ) ;;
}

proof of sseldd {
	step 1 : wff = sseld (hyp 1) |- ( ph → ( C ∈ A → C ∈ B ) ) ;;
	step 2 : wff = mpd (hyp 2, step 1) |- ( ph → C ∈ B ) ;;
	qed prop 1 = step 2 ;;
}

/* If a class is not in another class, it is also not in a subclass of that
       class.  Deduction form.  (Contributed by David Moews, 1-May-2017.) */

theorem ssneld (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ¬ C ∈ B → ¬ C ∈ A ) ) ;;
}

proof of ssneld {
	step 1 : wff = sseld (hyp 1) |- ( ph → ( C ∈ A → C ∈ B ) ) ;;
	step 2 : wff = con3d (step 1) |- ( ph → ( ¬ C ∈ B → ¬ C ∈ A ) ) ;;
	qed prop 1 = step 2 ;;
}

/* If an element is not in a class, it is also not in a subclass of that
       class.  Deduction form.  (Contributed by David Moews, 1-May-2017.) */

theorem ssneldd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → ¬ C ∈ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ C ∈ A ) ;;
}

proof of ssneldd {
	step 1 : wff = ssneld (hyp 1) |- ( ph → ( ¬ C ∈ B → ¬ C ∈ A ) ) ;;
	step 2 : wff = mpd (hyp 2, step 1) |- ( ph → ¬ C ∈ A ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference rule based on subclass definition.  (Contributed by NM,
       5-Aug-1993.) */

theorem ssriv (x : set, A : class, B : class) disjointed(x A, x B) {
	hyp 1 : wff = |- ( x ∈ A → x ∈ B ) ;;
	-----------------------
	prop 1 : wff = |- A ⊆ B ;;
}

proof of ssriv {
	step 1 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = mpgbir (step 1, hyp 1) |- A ⊆ B ;;
	qed prop 1 = step 2 ;;
}

/* Deduction rule based on subclass definition.  (Contributed by NM,
       15-Nov-1995.) */

theorem ssrdv (ph : wff, x : set, A : class, B : class) disjointed(x A, x B, x ph) {
	hyp 1 : wff = |- ( ph → ( x ∈ A → x ∈ B ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ B ) ;;
}

proof of ssrdv {
	step 1 : wff = alrimiv (hyp 1) |- ( ph → ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → A ⊆ B ) ;;
	qed prop 1 = step 3 ;;
}

/* Transitivity of subclasses.  Exercise 5 of [TakeutiZaring] p. 17.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.) */

theorem sstr2 (A : class, B : class, C : class) disjointed(x A, x B, x C) {
	prop 1 : wff = |- ( A ⊆ B → ( B ⊆ C → A ⊆ C ) ) ;;
}

proof of sstr2 {
	var x : set;;
	step 1 : wff = ssel () |- ( A ⊆ B → ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = imim1d (step 1) |- ( A ⊆ B → ( ( x ∈ B → x ∈ C ) → ( x ∈ A → x ∈ C ) ) ) ;;
	step 3 : wff = alimdv (step 2) |- ( A ⊆ B → ( ∀ x ( x ∈ B → x ∈ C ) → ∀ x ( x ∈ A → x ∈ C ) ) ) ;;
	step 4 : wff = dfss2 () |- ( B ⊆ C ↔ ∀ x ( x ∈ B → x ∈ C ) ) ;;
	step 5 : wff = dfss2 () |- ( A ⊆ C ↔ ∀ x ( x ∈ A → x ∈ C ) ) ;;
	step 6 : wff = 3imtr4g (step 3, step 4, step 5) |- ( A ⊆ B → ( B ⊆ C → A ⊆ C ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Transitivity of subclasses.  Theorem 6 of [Suppes] p. 23.  (Contributed by
     NM, 5-Sep-2003.) */

theorem sstr (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊆ B ∧ B ⊆ C ) → A ⊆ C ) ;;
}

proof of sstr {
	step 1 : wff = sstr2 () |- ( A ⊆ B → ( B ⊆ C → A ⊆ C ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( A ⊆ B ∧ B ⊆ C ) → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Subclass transitivity inference.  (Contributed by NM, 5-May-2000.) */

theorem sstri (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- B ⊆ C ;;
	-----------------------
	prop 1 : wff = |- A ⊆ C ;;
}

proof of sstri {
	step 1 : wff = sstr2 () |- ( A ⊆ B → ( B ⊆ C → A ⊆ C ) ) ;;
	step 2 : wff = mp2 (hyp 1, hyp 2, step 1) |- A ⊆ C ;;
	qed prop 1 = step 2 ;;
}

/* Subclass transitivity deduction.  (Contributed by NM, 2-Jun-2004.) */

theorem sstrd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of sstrd {
	step 1 : wff = sstr () |- ( ( A ⊆ B ∧ B ⊆ C ) → A ⊆ C ) ;;
	step 2 : wff = syl2anc (hyp 1, hyp 2, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Subclass transitivity deduction.  (Contributed by NM, 6-Feb-2014.) */

theorem syl5ss (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl5ss {
	step 1 : wff = a1i (hyp 1) |- ( ph → A ⊆ B ) ;;
	step 2 : wff = sstrd (step 1, hyp 2) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) */

theorem syl6ss (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- B ⊆ C ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl6ss {
	step 1 : wff = a1i (hyp 2) |- ( ph → B ⊆ C ) ;;
	step 2 : wff = sstrd (hyp 1, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A subclass transitivity deduction.  (Contributed by NM, 27-Sep-2004.)
       (Proof shortened by Andrew Salmon, 14-Jun-2011.) */

theorem sylan9ss (ph : wff, ps : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ps → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → A ⊆ C ) ;;
}

proof of sylan9ss {
	step 1 : wff = sstr () |- ( ( A ⊆ B ∧ B ⊆ C ) → A ⊆ C ) ;;
	step 2 : wff = syl2an (hyp 1, hyp 2, step 1) |- ( ( ph ∧ ps ) → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A subclass transitivity deduction.  (Contributed by NM, 27-Sep-2004.) */

theorem sylan9ssr (ph : wff, ps : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ps → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → A ⊆ C ) ;;
}

proof of sylan9ssr {
	step 1 : wff = sylan9ss (hyp 1, hyp 2) |- ( ( ph ∧ ps ) → A ⊆ C ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ps ∧ ph ) → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* The subclass relationship is antisymmetric.  Compare Theorem 4 of
       [Suppes] p. 22.  (Contributed by NM, 5-Aug-1993.) */

theorem eqss (A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
}

proof of eqss {
	var x : set;;
	step 1 : wff = albiim () |- ( ∀ x ( x ∈ A ↔ x ∈ B ) ↔ ( ∀ x ( x ∈ A → x ∈ B ) ∧ ∀ x ( x ∈ B → x ∈ A ) ) ) ;;
	step 2 : wff = dfcleq () |- ( A = B ↔ ∀ x ( x ∈ A ↔ x ∈ B ) ) ;;
	step 3 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 4 : wff = dfss2 () |- ( B ⊆ A ↔ ∀ x ( x ∈ B → x ∈ A ) ) ;;
	step 5 : wff = anbi12i (step 3, step 4) |- ( ( A ⊆ B ∧ B ⊆ A ) ↔ ( ∀ x ( x ∈ A → x ∈ B ) ∧ ∀ x ( x ∈ B → x ∈ A ) ) ) ;;
	step 6 : wff = 3bitr4i (step 1, step 2, step 5) |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Infer equality from two subclass relationships.  Compare Theorem 4 of
       [Suppes] p. 22.  (Contributed by NM, 9-Sep-1993.) */

theorem eqssi (A : class, B : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- B ⊆ A ;;
	-----------------------
	prop 1 : wff = |- A = B ;;
}

proof of eqssi {
	step 1 : wff = eqss () |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	step 2 : wff = mpbir2an (hyp 1, hyp 2, step 1) |- A = B ;;
	qed prop 1 = step 2 ;;
}

/* Equality deduction from two subclass relationships.  Compare Theorem 4
       of [Suppes] p. 22.  (Contributed by NM, 27-Jun-2004.) */

theorem eqssd (ph : wff, A : class, B : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → B ⊆ A ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A = B ) ;;
}

proof of eqssd {
	step 1 : wff = eqss () |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	step 2 : wff = sylanbrc (hyp 1, hyp 2, step 1) |- ( ph → A = B ) ;;
	qed prop 1 = step 2 ;;
}

/* Any class is a subclass of itself.  Exercise 10 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
       Salmon, 14-Jun-2011.) */

theorem ssid (A : class) disjointed(A x) {
	prop 1 : wff = |- A ⊆ A ;;
}

proof of ssid {
	var x : set;;
	step 1 : wff = id () |- ( x ∈ A → x ∈ A ) ;;
	step 2 : wff = ssriv (step 1) |- A ⊆ A ;;
	qed prop 1 = step 2 ;;
}

/* Any class is a subclass of the universal class.  (Contributed by NM,
       31-Oct-1995.) */

theorem ssv (A : class) disjointed(A x) {
	prop 1 : wff = |- A ⊆ _V ;;
}

proof of ssv {
	var x : set;;
	step 1 : wff = elex () |- ( x ∈ A → x ∈ _V ) ;;
	step 2 : wff = ssriv (step 1) |- A ⊆ _V ;;
	qed prop 1 = step 2 ;;
}

/* Equality theorem for subclasses.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Andrew Salmon, 21-Jun-2011.) */

theorem sseq1 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
}

proof of sseq1 {
	step 1 : wff = eqss () |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	step 2 : wff = sstr2 () |- ( B ⊆ A → ( A ⊆ C → B ⊆ C ) ) ;;
	step 3 : wff = adantl (step 2) |- ( ( A ⊆ B ∧ B ⊆ A ) → ( A ⊆ C → B ⊆ C ) ) ;;
	step 4 : wff = sstr2 () |- ( A ⊆ B → ( B ⊆ C → A ⊆ C ) ) ;;
	step 5 : wff = adantr (step 4) |- ( ( A ⊆ B ∧ B ⊆ A ) → ( B ⊆ C → A ⊆ C ) ) ;;
	step 6 : wff = impbid (step 3, step 5) |- ( ( A ⊆ B ∧ B ⊆ A ) → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 7 : wff = sylbi (step 1, step 6) |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Equality theorem for the subclass relationship.  (Contributed by NM,
     25-Jun-1998.) */

theorem sseq2 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( A = B → ( C ⊆ A ↔ C ⊆ B ) ) ;;
}

proof of sseq2 {
	step 1 : wff = sstr2 () |- ( C ⊆ A → ( A ⊆ B → C ⊆ B ) ) ;;
	step 2 : wff = com12 (step 1) |- ( A ⊆ B → ( C ⊆ A → C ⊆ B ) ) ;;
	step 3 : wff = sstr2 () |- ( C ⊆ B → ( B ⊆ A → C ⊆ A ) ) ;;
	step 4 : wff = com12 (step 3) |- ( B ⊆ A → ( C ⊆ B → C ⊆ A ) ) ;;
	step 5 : wff = anim12i (step 2, step 4) |- ( ( A ⊆ B ∧ B ⊆ A ) → ( ( C ⊆ A → C ⊆ B ) ∧ ( C ⊆ B → C ⊆ A ) ) ) ;;
	step 6 : wff = eqss () |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	step 7 : wff = dfbi2 () |- ( ( C ⊆ A ↔ C ⊆ B ) ↔ ( ( C ⊆ A → C ⊆ B ) ∧ ( C ⊆ B → C ⊆ A ) ) ) ;;
	step 8 : wff = 3imtr4i (step 5, step 6, step 7) |- ( A = B → ( C ⊆ A ↔ C ⊆ B ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Equality theorem for the subclass relationship.  (Contributed by NM,
     31-May-1999.) */

theorem sseq12 (A : class, B : class, C : class, D : class)  {
	prop 1 : wff = |- ( ( A = B ∧ C = D ) → ( A ⊆ C ↔ B ⊆ D ) ) ;;
}

proof of sseq12 {
	step 1 : wff = sseq1 () |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = sseq2 () |- ( C = D → ( B ⊆ C ↔ B ⊆ D ) ) ;;
	step 3 : wff = sylan9bb (step 1, step 2) |- ( ( A = B ∧ C = D ) → ( A ⊆ C ↔ B ⊆ D ) ) ;;
	qed prop 1 = step 3 ;;
}

/* An equality inference for the subclass relationship.  (Contributed by
       NM, 18-Aug-1993.) */

theorem sseq1i (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- ( A ⊆ C ↔ B ⊆ C ) ;;
}

proof of sseq1i {
	step 1 : wff = sseq1 () |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( A ⊆ C ↔ B ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality inference for the subclass relationship.  (Contributed by
       NM, 30-Aug-1993.) */

theorem sseq2i (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- ( C ⊆ A ↔ C ⊆ B ) ;;
}

proof of sseq2i {
	step 1 : wff = sseq2 () |- ( A = B → ( C ⊆ A ↔ C ⊆ B ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( C ⊆ A ↔ C ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality inference for the subclass relationship.  (Contributed by
         NM, 31-May-1999.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) */

theorem sseq12i (A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- A = B ;;
	hyp 2 : wff = |- C = D ;;
	-----------------------
	prop 1 : wff = |- ( A ⊆ C ↔ B ⊆ D ) ;;
}

proof of sseq12i {
	step 1 : wff = sseq12 () |- ( ( A = B ∧ C = D ) → ( A ⊆ C ↔ B ⊆ D ) ) ;;
	step 2 : wff = mp2an (hyp 1, hyp 2, step 1) |- ( A ⊆ C ↔ B ⊆ D ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality deduction for the subclass relationship.  (Contributed by
       NM, 14-Aug-1994.) */

theorem sseq1d (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( A ⊆ C ↔ B ⊆ C ) ) ;;
}

proof of sseq1d {
	step 1 : wff = sseq1 () |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality deduction for the subclass relationship.  (Contributed by
       NM, 14-Aug-1994.) */

theorem sseq2d (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( C ⊆ A ↔ C ⊆ B ) ) ;;
}

proof of sseq2d {
	step 1 : wff = sseq2 () |- ( A = B → ( C ⊆ A ↔ C ⊆ B ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( C ⊆ A ↔ C ⊆ B ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality deduction for the subclass relationship.  (Contributed by
         NM, 31-May-1999.) */

theorem sseq12d (ph : wff, A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	hyp 2 : wff = |- ( ph → C = D ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( A ⊆ C ↔ B ⊆ D ) ) ;;
}

proof of sseq12d {
	step 1 : wff = sseq1d (hyp 1) |- ( ph → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = sseq2d (hyp 2) |- ( ph → ( B ⊆ C ↔ B ⊆ D ) ) ;;
	step 3 : wff = bitrd (step 1, step 2) |- ( ph → ( A ⊆ C ↔ B ⊆ D ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 16-Jul-1995.) */

theorem eqsstri (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A = B ;;
	hyp 2 : wff = |- B ⊆ C ;;
	-----------------------
	prop 1 : wff = |- A ⊆ C ;;
}

proof of eqsstri {
	step 1 : wff = sseq1i (hyp 1) |- ( A ⊆ C ↔ B ⊆ C ) ;;
	step 2 : wff = mpbir (hyp 2, step 1) |- A ⊆ C ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 19-Oct-1999.) */

theorem eqsstr3i (A : class, B : class, C : class)  {
	hyp 1 : wff = |- B = A ;;
	hyp 2 : wff = |- B ⊆ C ;;
	-----------------------
	prop 1 : wff = |- A ⊆ C ;;
}

proof of eqsstr3i {
	step 1 : wff = eqcomi (hyp 1) |- A = B ;;
	step 2 : wff = eqsstri (step 1, hyp 2) |- A ⊆ C ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 28-Jul-1995.) */

theorem sseqtri (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- B = C ;;
	-----------------------
	prop 1 : wff = |- A ⊆ C ;;
}

proof of sseqtri {
	step 1 : wff = sseq2i (hyp 2) |- ( A ⊆ B ↔ A ⊆ C ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- A ⊆ C ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 4-Apr-1995.) */

theorem sseqtr4i (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- C = B ;;
	-----------------------
	prop 1 : wff = |- A ⊆ C ;;
}

proof of sseqtr4i {
	step 1 : wff = eqcomi (hyp 2) |- B = C ;;
	step 2 : wff = sseqtri (hyp 1, step 1) |- A ⊆ C ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) */

theorem eqsstrd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of eqsstrd {
	step 1 : wff = sseq1d (hyp 1) |- ( ph → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = mpbird (hyp 2, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) */

theorem eqsstr3d (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → B = A ) ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of eqsstr3d {
	step 1 : wff = eqcomd (hyp 1) |- ( ph → A = B ) ;;
	step 2 : wff = eqsstrd (step 1, hyp 2) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) */

theorem sseqtrd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → B = C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of sseqtrd {
	step 1 : wff = sseq2d (hyp 2) |- ( ph → ( A ⊆ B ↔ A ⊆ C ) ) ;;
	step 2 : wff = mpbid (hyp 1, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) */

theorem sseqtr4d (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → C = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of sseqtr4d {
	step 1 : wff = eqcomd (hyp 2) |- ( ph → B = C ) ;;
	step 2 : wff = sseqtrd (hyp 1, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality in both sides of a subclass relationship.
       (Contributed by NM, 13-Jan-1996.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) */

theorem 3sstr3i (A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- A = C ;;
	hyp 3 : wff = |- B = D ;;
	-----------------------
	prop 1 : wff = |- C ⊆ D ;;
}

proof of 3sstr3i {
	step 1 : wff = sseq12i (hyp 2, hyp 3) |- ( A ⊆ B ↔ C ⊆ D ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- C ⊆ D ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality in both sides of a subclass relationship.
       (Contributed by NM, 13-Jan-1996.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) */

theorem 3sstr4i (A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- A ⊆ B ;;
	hyp 2 : wff = |- C = A ;;
	hyp 3 : wff = |- D = B ;;
	-----------------------
	prop 1 : wff = |- C ⊆ D ;;
}

proof of 3sstr4i {
	step 1 : wff = sseq12i (hyp 2, hyp 3) |- ( C ⊆ D ↔ A ⊆ B ) ;;
	step 2 : wff = mpbir (hyp 1, step 1) |- C ⊆ D ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 1-Oct-2000.) */

theorem 3sstr3g (ph : wff, A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- A = C ;;
	hyp 3 : wff = |- B = D ;;
	-----------------------
	prop 1 : wff = |- ( ph → C ⊆ D ) ;;
}

proof of 3sstr3g {
	step 1 : wff = sseq12i (hyp 2, hyp 3) |- ( A ⊆ B ↔ C ⊆ D ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → C ⊆ D ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 16-Aug-1994.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) */

theorem 3sstr4g (ph : wff, A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- C = A ;;
	hyp 3 : wff = |- D = B ;;
	-----------------------
	prop 1 : wff = |- ( ph → C ⊆ D ) ;;
}

proof of 3sstr4g {
	step 1 : wff = sseq12i (hyp 2, hyp 3) |- ( C ⊆ D ↔ A ⊆ B ) ;;
	step 2 : wff = sylibr (hyp 1, step 1) |- ( ph → C ⊆ D ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 1-Oct-2000.) */

theorem 3sstr3d (ph : wff, A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → A = C ) ;;
	hyp 3 : wff = |- ( ph → B = D ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → C ⊆ D ) ;;
}

proof of 3sstr3d {
	step 1 : wff = sseq12d (hyp 2, hyp 3) |- ( ph → ( A ⊆ B ↔ C ⊆ D ) ) ;;
	step 2 : wff = mpbid (hyp 1, step 1) |- ( ph → C ⊆ D ) ;;
	qed prop 1 = step 2 ;;
}

/* Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 30-Nov-1995.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) */

theorem 3sstr4d (ph : wff, A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → C = A ) ;;
	hyp 3 : wff = |- ( ph → D = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → C ⊆ D ) ;;
}

proof of 3sstr4d {
	step 1 : wff = sseq12d (hyp 2, hyp 3) |- ( ph → ( C ⊆ D ↔ A ⊆ B ) ) ;;
	step 2 : wff = mpbird (hyp 1, step 1) |- ( ph → C ⊆ D ) ;;
	qed prop 1 = step 2 ;;
}

/* B chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) */

theorem syl5eqss (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- A = B ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl5eqss {
	step 1 : wff = sseq1i (hyp 1) |- ( A ⊆ C ↔ B ⊆ C ) ;;
	step 2 : wff = sylibr (hyp 2, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* B chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) */

theorem syl5eqssr (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- B = A ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl5eqssr {
	step 1 : wff = eqcomi (hyp 1) |- A = B ;;
	step 2 : wff = syl5eqss (step 1, hyp 2) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) */

theorem syl6sseq (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- B = C ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl6sseq {
	step 1 : wff = sseq2i (hyp 2) |- ( A ⊆ B ↔ A ⊆ C ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) */

theorem syl6sseqr (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- C = B ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl6sseqr {
	step 1 : wff = eqcomi (hyp 2) |- B = C ;;
	step 2 : wff = syl6sseq (hyp 1, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) */

theorem syl5sseq (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- B ⊆ A ;;
	hyp 2 : wff = |- ( ph → A = C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → B ⊆ C ) ;;
}

proof of syl5sseq {
	step 1 : wff = sseq2 () |- ( A = C → ( B ⊆ A ↔ B ⊆ C ) ) ;;
	step 2 : wff = biimpa (step 1) |- ( ( A = C ∧ B ⊆ A ) → B ⊆ C ) ;;
	step 3 : wff = sylancl (hyp 2, hyp 1, step 2) |- ( ph → B ⊆ C ) ;;
	qed prop 1 = step 3 ;;
}

/* Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) */

theorem syl5sseqr (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- B ⊆ A ;;
	hyp 2 : wff = |- ( ph → C = A ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → B ⊆ C ) ;;
}

proof of syl5sseqr {
	step 1 : wff = a1i (hyp 1) |- ( ph → B ⊆ A ) ;;
	step 2 : wff = sseqtr4d (step 1, hyp 2) |- ( ph → B ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A chained subclass and equality deduction.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) */

theorem syl6eqss (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	hyp 2 : wff = |- B ⊆ C ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl6eqss {
	step 1 : wff = a1i (hyp 2) |- ( ph → B ⊆ C ) ;;
	step 2 : wff = eqsstrd (hyp 1, step 1) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A chained subclass and equality deduction.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) */

theorem syl6eqssr (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → B = A ) ;;
	hyp 2 : wff = |- B ⊆ C ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ C ) ;;
}

proof of syl6eqssr {
	step 1 : wff = eqcomd (hyp 1) |- ( ph → A = B ) ;;
	step 2 : wff = syl6eqss (step 1, hyp 2) |- ( ph → A ⊆ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Equality implies the subclass relation.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Andrew Salmon, 21-Jun-2011.) */

theorem eqimss (A : class, B : class)  {
	prop 1 : wff = |- ( A = B → A ⊆ B ) ;;
}

proof of eqimss {
	step 1 : wff = eqss () |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	step 2 : wff = simplbi (step 1) |- ( A = B → A ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Equality implies the subclass relation.  (Contributed by NM,
     23-Nov-2003.) */

theorem eqimss2 (A : class, B : class)  {
	prop 1 : wff = |- ( B = A → A ⊆ B ) ;;
}

proof of eqimss2 {
	step 1 : wff = eqimss () |- ( A = B → A ⊆ B ) ;;
	step 2 : wff = eqcoms (step 1) |- ( B = A → A ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Infer subclass relationship from equality.  (Contributed by NM,
       6-Jan-2007.) */

theorem eqimssi (A : class, B : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- A ⊆ B ;;
}

proof of eqimssi {
	step 1 : wff = ssid () |- A ⊆ A ;;
	step 2 : wff = sseqtri (step 1, hyp 1) |- A ⊆ B ;;
	qed prop 1 = step 2 ;;
}

/* Infer subclass relationship from equality.  (Contributed by NM,
       7-Jan-2007.) */

theorem eqimss2i (A : class, B : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- B ⊆ A ;;
}

proof of eqimss2i {
	step 1 : wff = ssid () |- B ⊆ B ;;
	step 2 : wff = sseqtr4i (step 1, hyp 1) |- B ⊆ A ;;
	qed prop 1 = step 2 ;;
}

/* Two classes are different if they don't include the same class.
     (Contributed by NM, 23-Apr-2015.) */

theorem nssne1 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊆ B ∧ ¬ A ⊆ C ) → B ≠ C ) ;;
}

proof of nssne1 {
	step 1 : wff = sseq2 () |- ( B = C → ( A ⊆ B ↔ A ⊆ C ) ) ;;
	step 2 : wff = biimpcd (step 1) |- ( A ⊆ B → ( B = C → A ⊆ C ) ) ;;
	step 3 : wff = necon3bd (step 2) |- ( A ⊆ B → ( ¬ A ⊆ C → B ≠ C ) ) ;;
	step 4 : wff = imp (step 3) |- ( ( A ⊆ B ∧ ¬ A ⊆ C ) → B ≠ C ) ;;
	qed prop 1 = step 4 ;;
}

/* Two classes are different if they are not subclasses of the same class.
     (Contributed by NM, 23-Apr-2015.) */

theorem nssne2 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊆ C ∧ ¬ B ⊆ C ) → A ≠ B ) ;;
}

proof of nssne2 {
	step 1 : wff = sseq1 () |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = biimpcd (step 1) |- ( A ⊆ C → ( A = B → B ⊆ C ) ) ;;
	step 3 : wff = necon3bd (step 2) |- ( A ⊆ C → ( ¬ B ⊆ C → A ≠ B ) ) ;;
	step 4 : wff = imp (step 3) |- ( ( A ⊆ C ∧ ¬ B ⊆ C ) → A ≠ B ) ;;
	qed prop 1 = step 4 ;;
}

/* Negation of subclass relationship.  Exercise 13 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 25-Feb-1996.)  (Proof shortened by Andrew
       Salmon, 21-Jun-2011.) */

theorem nss (x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( ¬ A ⊆ B ↔ ∃ x ( x ∈ A ∧ ¬ x ∈ B ) ) ;;
}

proof of nss {
	step 1 : wff = exanali () |- ( ∃ x ( x ∈ A ∧ ¬ x ∈ B ) ↔ ¬ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 3 : wff = xchbinxr (step 1, step 2) |- ( ∃ x ( x ∈ A ∧ ¬ x ∈ B ) ↔ ¬ A ⊆ B ) ;;
	step 4 : wff = bicomi (step 3) |- ( ¬ A ⊆ B ↔ ∃ x ( x ∈ A ∧ ¬ x ∈ B ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Quantification restricted to a subclass.  (Contributed by NM,
       11-Mar-2006.) */

theorem ssralv (ph : wff, x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A ⊆ B → ( ∀ x ∈ B ph → ∀ x ∈ A ph ) ) ;;
}

proof of ssralv {
	step 1 : wff = ssel () |- ( A ⊆ B → ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = imim1d (step 1) |- ( A ⊆ B → ( ( x ∈ B → ph ) → ( x ∈ A → ph ) ) ) ;;
	step 3 : wff = ralimdv2 (step 2) |- ( A ⊆ B → ( ∀ x ∈ B ph → ∀ x ∈ A ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Existential quantification restricted to a subclass.  (Contributed by
       NM, 11-Jan-2007.) */

theorem ssrexv (ph : wff, x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A ⊆ B → ( ∃ x ∈ A ph → ∃ x ∈ B ph ) ) ;;
}

proof of ssrexv {
	step 1 : wff = ssel () |- ( A ⊆ B → ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = anim1d (step 1) |- ( A ⊆ B → ( ( x ∈ A ∧ ph ) → ( x ∈ B ∧ ph ) ) ) ;;
	step 3 : wff = reximdv2 (step 2) |- ( A ⊆ B → ( ∃ x ∈ A ph → ∃ x ∈ B ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Restricted universal quantification on a subset in terms of superset.
       (Contributed by Stefan O'Rear, 3-Apr-2015.) */

theorem ralss (ph : wff, x : set, A : class, B : class) disjointed(A x, B x) {
	prop 1 : wff = |- ( A ⊆ B → ( ∀ x ∈ A ph ↔ ∀ x ∈ B ( x ∈ A → ph ) ) ) ;;
}

proof of ralss {
	step 1 : wff = ssel () |- ( A ⊆ B → ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = pm4.71rd (step 1) |- ( A ⊆ B → ( x ∈ A ↔ ( x ∈ B ∧ x ∈ A ) ) ) ;;
	step 3 : wff = imbi1d (step 2) |- ( A ⊆ B → ( ( x ∈ A → ph ) ↔ ( ( x ∈ B ∧ x ∈ A ) → ph ) ) ) ;;
	step 4 : wff = impexp () |- ( ( ( x ∈ B ∧ x ∈ A ) → ph ) ↔ ( x ∈ B → ( x ∈ A → ph ) ) ) ;;
	step 5 : wff = syl6bb (step 3, step 4) |- ( A ⊆ B → ( ( x ∈ A → ph ) ↔ ( x ∈ B → ( x ∈ A → ph ) ) ) ) ;;
	step 6 : wff = ralbidv2 (step 5) |- ( A ⊆ B → ( ∀ x ∈ A ph ↔ ∀ x ∈ B ( x ∈ A → ph ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Restricted existential quantification on a subset in terms of superset.
       (Contributed by Stefan O'Rear, 3-Apr-2015.) */

theorem rexss (ph : wff, x : set, A : class, B : class) disjointed(A x, B x) {
	prop 1 : wff = |- ( A ⊆ B → ( ∃ x ∈ A ph ↔ ∃ x ∈ B ( x ∈ A ∧ ph ) ) ) ;;
}

proof of rexss {
	step 1 : wff = ssel () |- ( A ⊆ B → ( x ∈ A → x ∈ B ) ) ;;
	step 2 : wff = pm4.71rd (step 1) |- ( A ⊆ B → ( x ∈ A ↔ ( x ∈ B ∧ x ∈ A ) ) ) ;;
	step 3 : wff = anbi1d (step 2) |- ( A ⊆ B → ( ( x ∈ A ∧ ph ) ↔ ( ( x ∈ B ∧ x ∈ A ) ∧ ph ) ) ) ;;
	step 4 : wff = anass () |- ( ( ( x ∈ B ∧ x ∈ A ) ∧ ph ) ↔ ( x ∈ B ∧ ( x ∈ A ∧ ph ) ) ) ;;
	step 5 : wff = syl6bb (step 3, step 4) |- ( A ⊆ B → ( ( x ∈ A ∧ ph ) ↔ ( x ∈ B ∧ ( x ∈ A ∧ ph ) ) ) ) ;;
	step 6 : wff = rexbidv2 (step 5) |- ( A ⊆ B → ( ∃ x ∈ A ph ↔ ∃ x ∈ B ( x ∈ A ∧ ph ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Class abstractions in a subclass relationship.  (Contributed by NM,
       3-Jul-1994.) */

theorem ss2ab (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( { x | ph } ⊆ { x | ps } ↔ ∀ x ( ph → ps ) ) ;;
}

proof of ss2ab {
	step 1 : wff = nfab1 () |- F/_ x { x | ph } ;;
	step 2 : wff = nfab1 () |- F/_ x { x | ps } ;;
	step 3 : wff = dfss2f (step 1, step 2) |- ( { x | ph } ⊆ { x | ps } ↔ ∀ x ( x ∈ { x | ph } → x ∈ { x | ps } ) ) ;;
	step 4 : wff = abid () |- ( x ∈ { x | ph } ↔ ph ) ;;
	step 5 : wff = abid () |- ( x ∈ { x | ps } ↔ ps ) ;;
	step 6 : wff = imbi12i (step 4, step 5) |- ( ( x ∈ { x | ph } → x ∈ { x | ps } ) ↔ ( ph → ps ) ) ;;
	step 7 : wff = albii (step 6) |- ( ∀ x ( x ∈ { x | ph } → x ∈ { x | ps } ) ↔ ∀ x ( ph → ps ) ) ;;
	step 8 : wff = bitri (step 3, step 7) |- ( { x | ph } ⊆ { x | ps } ↔ ∀ x ( ph → ps ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Class abstraction in a subclass relationship.  (Contributed by NM,
       16-Aug-2006.) */

theorem abss (ph : wff, x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- ( { x | ph } ⊆ A ↔ ∀ x ( ph → x ∈ A ) ) ;;
}

proof of abss {
	step 1 : wff = abid2 () |- { x | x ∈ A } = A ;;
	step 2 : wff = sseq2i (step 1) |- ( { x | ph } ⊆ { x | x ∈ A } ↔ { x | ph } ⊆ A ) ;;
	step 3 : wff = ss2ab () |- ( { x | ph } ⊆ { x | x ∈ A } ↔ ∀ x ( ph → x ∈ A ) ) ;;
	step 4 : wff = bitr3i (step 2, step 3) |- ( { x | ph } ⊆ A ↔ ∀ x ( ph → x ∈ A ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Subclass of a class abstraction.  (Contributed by NM, 16-Aug-2006.) */

theorem ssab (ph : wff, x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- ( A ⊆ { x | ph } ↔ ∀ x ( x ∈ A → ph ) ) ;;
}

proof of ssab {
	step 1 : wff = abid2 () |- { x | x ∈ A } = A ;;
	step 2 : wff = sseq1i (step 1) |- ( { x | x ∈ A } ⊆ { x | ph } ↔ A ⊆ { x | ph } ) ;;
	step 3 : wff = ss2ab () |- ( { x | x ∈ A } ⊆ { x | ph } ↔ ∀ x ( x ∈ A → ph ) ) ;;
	step 4 : wff = bitr3i (step 2, step 3) |- ( A ⊆ { x | ph } ↔ ∀ x ( x ∈ A → ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/* The relation for a subclass of a class abstraction is equivalent to
       restricted quantification.  (Contributed by NM, 6-Sep-2006.) */

theorem ssabral (ph : wff, x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- ( A ⊆ { x | ph } ↔ ∀ x ∈ A ph ) ;;
}

proof of ssabral {
	step 1 : wff = ssab () |- ( A ⊆ { x | ph } ↔ ∀ x ( x ∈ A → ph ) ) ;;
	step 2 : wff = df-ral () |- ( ∀ x ∈ A ph ↔ ∀ x ( x ∈ A → ph ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( A ⊆ { x | ph } ↔ ∀ x ∈ A ph ) ;;
	qed prop 1 = step 3 ;;
}

/* Inference of abstraction subclass from implication.  (Contributed by NM,
       31-Mar-1995.) */

theorem ss2abi (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- { x | ph } ⊆ { x | ps } ;;
}

proof of ss2abi {
	step 1 : wff = ss2ab () |- ( { x | ph } ⊆ { x | ps } ↔ ∀ x ( ph → ps ) ) ;;
	step 2 : wff = mpgbir (step 1, hyp 1) |- { x | ph } ⊆ { x | ps } ;;
	qed prop 1 = step 2 ;;
}

/* Deduction of abstraction subclass from implication.  (Contributed by NM,
       29-Jul-2011.) */

theorem ss2abdv (ph : wff, ps : wff, ch : wff, x : set) disjointed(x ph) {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → { x | ps } ⊆ { x | ch } ) ;;
}

proof of ss2abdv {
	step 1 : wff = alrimiv (hyp 1) |- ( ph → ∀ x ( ps → ch ) ) ;;
	step 2 : wff = ss2ab () |- ( { x | ps } ⊆ { x | ch } ↔ ∀ x ( ps → ch ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → { x | ps } ⊆ { x | ch } ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction of abstraction subclass from implication.  (Contributed by NM,
       20-Jan-2006.) */

theorem abssdv (ph : wff, ps : wff, x : set, A : class) disjointed(x ph, x A) {
	hyp 1 : wff = |- ( ph → ( ps → x ∈ A ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → { x | ps } ⊆ A ) ;;
}

proof of abssdv {
	step 1 : wff = alrimiv (hyp 1) |- ( ph → ∀ x ( ps → x ∈ A ) ) ;;
	step 2 : wff = abss () |- ( { x | ps } ⊆ A ↔ ∀ x ( ps → x ∈ A ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → { x | ps } ⊆ A ) ;;
	qed prop 1 = step 3 ;;
}

/* Inference of abstraction subclass from implication.  (Contributed by NM,
       20-Jan-2006.) */

theorem abssi (ph : wff, x : set, A : class) disjointed(x A) {
	hyp 1 : wff = |- ( ph → x ∈ A ) ;;
	-----------------------
	prop 1 : wff = |- { x | ph } ⊆ A ;;
}

proof of abssi {
	step 1 : wff = ss2abi (hyp 1) |- { x | ph } ⊆ { x | x ∈ A } ;;
	step 2 : wff = abid2 () |- { x | x ∈ A } = A ;;
	step 3 : wff = sseqtri (step 1, step 2) |- { x | ph } ⊆ A ;;
	qed prop 1 = step 3 ;;
}

/* Restricted abstraction classes in a subclass relationship.  (Contributed
     by NM, 30-May-1999.) */

theorem ss2rab (ph : wff, ps : wff, x : set, A : class)  {
	prop 1 : wff = |- ( { x ∈ A | ph } ⊆ { x ∈ A | ps } ↔ ∀ x ∈ A ( ph → ps ) ) ;;
}

proof of ss2rab {
	step 1 : wff = df-rab () |- { x ∈ A | ph } = { x | ( x ∈ A ∧ ph ) } ;;
	step 2 : wff = df-rab () |- { x ∈ A | ps } = { x | ( x ∈ A ∧ ps ) } ;;
	step 3 : wff = sseq12i (step 1, step 2) |- ( { x ∈ A | ph } ⊆ { x ∈ A | ps } ↔ { x | ( x ∈ A ∧ ph ) } ⊆ { x | ( x ∈ A ∧ ps ) } ) ;;
	step 4 : wff = ss2ab () |- ( { x | ( x ∈ A ∧ ph ) } ⊆ { x | ( x ∈ A ∧ ps ) } ↔ ∀ x ( ( x ∈ A ∧ ph ) → ( x ∈ A ∧ ps ) ) ) ;;
	step 5 : wff = df-ral () |- ( ∀ x ∈ A ( ph → ps ) ↔ ∀ x ( x ∈ A → ( ph → ps ) ) ) ;;
	step 6 : wff = imdistan () |- ( ( x ∈ A → ( ph → ps ) ) ↔ ( ( x ∈ A ∧ ph ) → ( x ∈ A ∧ ps ) ) ) ;;
	step 7 : wff = albii (step 6) |- ( ∀ x ( x ∈ A → ( ph → ps ) ) ↔ ∀ x ( ( x ∈ A ∧ ph ) → ( x ∈ A ∧ ps ) ) ) ;;
	step 8 : wff = bitr2i (step 5, step 7) |- ( ∀ x ( ( x ∈ A ∧ ph ) → ( x ∈ A ∧ ps ) ) ↔ ∀ x ∈ A ( ph → ps ) ) ;;
	step 9 : wff = 3bitri (step 3, step 4, step 8) |- ( { x ∈ A | ph } ⊆ { x ∈ A | ps } ↔ ∀ x ∈ A ( ph → ps ) ) ;;
	qed prop 1 = step 9 ;;
}

/* Restricted class abstraction in a subclass relationship.  (Contributed
       by NM, 16-Aug-2006.) */

theorem rabss (ph : wff, x : set, A : class, B : class) disjointed(x B) {
	prop 1 : wff = |- ( { x ∈ A | ph } ⊆ B ↔ ∀ x ∈ A ( ph → x ∈ B ) ) ;;
}

proof of rabss {
	step 1 : wff = df-rab () |- { x ∈ A | ph } = { x | ( x ∈ A ∧ ph ) } ;;
	step 2 : wff = sseq1i (step 1) |- ( { x ∈ A | ph } ⊆ B ↔ { x | ( x ∈ A ∧ ph ) } ⊆ B ) ;;
	step 3 : wff = abss () |- ( { x | ( x ∈ A ∧ ph ) } ⊆ B ↔ ∀ x ( ( x ∈ A ∧ ph ) → x ∈ B ) ) ;;
	step 4 : wff = impexp () |- ( ( ( x ∈ A ∧ ph ) → x ∈ B ) ↔ ( x ∈ A → ( ph → x ∈ B ) ) ) ;;
	step 5 : wff = albii (step 4) |- ( ∀ x ( ( x ∈ A ∧ ph ) → x ∈ B ) ↔ ∀ x ( x ∈ A → ( ph → x ∈ B ) ) ) ;;
	step 6 : wff = df-ral () |- ( ∀ x ∈ A ( ph → x ∈ B ) ↔ ∀ x ( x ∈ A → ( ph → x ∈ B ) ) ) ;;
	step 7 : wff = bitr4i (step 5, step 6) |- ( ∀ x ( ( x ∈ A ∧ ph ) → x ∈ B ) ↔ ∀ x ∈ A ( ph → x ∈ B ) ) ;;
	step 8 : wff = 3bitri (step 2, step 3, step 7) |- ( { x ∈ A | ph } ⊆ B ↔ ∀ x ∈ A ( ph → x ∈ B ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Subclass of a restricted class abstraction.  (Contributed by NM,
       16-Aug-2006.) */

theorem ssrab (ph : wff, x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( B ⊆ { x ∈ A | ph } ↔ ( B ⊆ A ∧ ∀ x ∈ B ph ) ) ;;
}

proof of ssrab {
	step 1 : wff = df-rab () |- { x ∈ A | ph } = { x | ( x ∈ A ∧ ph ) } ;;
	step 2 : wff = sseq2i (step 1) |- ( B ⊆ { x ∈ A | ph } ↔ B ⊆ { x | ( x ∈ A ∧ ph ) } ) ;;
	step 3 : wff = ssab () |- ( B ⊆ { x | ( x ∈ A ∧ ph ) } ↔ ∀ x ( x ∈ B → ( x ∈ A ∧ ph ) ) ) ;;
	step 4 : wff = dfss3 () |- ( B ⊆ A ↔ ∀ x ∈ B x ∈ A ) ;;
	step 5 : wff = anbi1i (step 4) |- ( ( B ⊆ A ∧ ∀ x ∈ B ph ) ↔ ( ∀ x ∈ B x ∈ A ∧ ∀ x ∈ B ph ) ) ;;
	step 6 : wff = r19.26 () |- ( ∀ x ∈ B ( x ∈ A ∧ ph ) ↔ ( ∀ x ∈ B x ∈ A ∧ ∀ x ∈ B ph ) ) ;;
	step 7 : wff = df-ral () |- ( ∀ x ∈ B ( x ∈ A ∧ ph ) ↔ ∀ x ( x ∈ B → ( x ∈ A ∧ ph ) ) ) ;;
	step 8 : wff = 3bitr2ri (step 5, step 6, step 7) |- ( ∀ x ( x ∈ B → ( x ∈ A ∧ ph ) ) ↔ ( B ⊆ A ∧ ∀ x ∈ B ph ) ) ;;
	step 9 : wff = 3bitri (step 2, step 3, step 8) |- ( B ⊆ { x ∈ A | ph } ↔ ( B ⊆ A ∧ ∀ x ∈ B ph ) ) ;;
	qed prop 1 = step 9 ;;
}

/* Subclass of a restricted class abstraction (deduction rule).
       (Contributed by NM, 31-Aug-2006.) */

theorem ssrabdv (ph : wff, ps : wff, x : set, A : class, B : class) disjointed(x A, x B, x ph) {
	hyp 1 : wff = |- ( ph → B ⊆ A ) ;;
	hyp 2 : wff = |- ( ( ph ∧ x ∈ B ) → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → B ⊆ { x ∈ A | ps } ) ;;
}

proof of ssrabdv {
	step 1 : wff = ralrimiva (hyp 2) |- ( ph → ∀ x ∈ B ps ) ;;
	step 2 : wff = ssrab () |- ( B ⊆ { x ∈ A | ps } ↔ ( B ⊆ A ∧ ∀ x ∈ B ps ) ) ;;
	step 3 : wff = sylanbrc (hyp 1, step 1, step 2) |- ( ph → B ⊆ { x ∈ A | ps } ) ;;
	qed prop 1 = step 3 ;;
}

/* Subclass of a restricted class abstraction (deduction rule).
       (Contributed by NM, 2-Feb-2015.) */

theorem rabssdv (ph : wff, ps : wff, x : set, A : class, B : class) disjointed(x B, x ph) {
	hyp 1 : wff = |- ( ( ph ∧ x ∈ A ∧ ps ) → x ∈ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → { x ∈ A | ps } ⊆ B ) ;;
}

proof of rabssdv {
	step 1 : wff = 3exp (hyp 1) |- ( ph → ( x ∈ A → ( ps → x ∈ B ) ) ) ;;
	step 2 : wff = ralrimiv (step 1) |- ( ph → ∀ x ∈ A ( ps → x ∈ B ) ) ;;
	step 3 : wff = rabss () |- ( { x ∈ A | ps } ⊆ B ↔ ∀ x ∈ A ( ps → x ∈ B ) ) ;;
	step 4 : wff = sylibr (step 2, step 3) |- ( ph → { x ∈ A | ps } ⊆ B ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduction of restricted abstraction subclass from implication.
       (Contributed by NM, 30-May-2006.) */

theorem ss2rabdv (ph : wff, ps : wff, ch : wff, x : set, A : class) disjointed(x ph) {
	hyp 1 : wff = |- ( ( ph ∧ x ∈ A ) → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → { x ∈ A | ps } ⊆ { x ∈ A | ch } ) ;;
}

proof of ss2rabdv {
	step 1 : wff = ralrimiva (hyp 1) |- ( ph → ∀ x ∈ A ( ps → ch ) ) ;;
	step 2 : wff = ss2rab () |- ( { x ∈ A | ps } ⊆ { x ∈ A | ch } ↔ ∀ x ∈ A ( ps → ch ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → { x ∈ A | ps } ⊆ { x ∈ A | ch } ) ;;
	qed prop 1 = step 3 ;;
}

/* Inference of restricted abstraction subclass from implication.
       (Contributed by NM, 14-Oct-1999.) */

theorem ss2rabi (ph : wff, ps : wff, x : set, A : class)  {
	hyp 1 : wff = |- ( x ∈ A → ( ph → ps ) ) ;;
	-----------------------
	prop 1 : wff = |- { x ∈ A | ph } ⊆ { x ∈ A | ps } ;;
}

proof of ss2rabi {
	step 1 : wff = ss2rab () |- ( { x ∈ A | ph } ⊆ { x ∈ A | ps } ↔ ∀ x ∈ A ( ph → ps ) ) ;;
	step 2 : wff = mprgbir (step 1, hyp 1) |- { x ∈ A | ph } ⊆ { x ∈ A | ps } ;;
	qed prop 1 = step 2 ;;
}

/* Subclass law for restricted abstraction.  (Contributed by NM,
       18-Dec-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) */

theorem rabss2 (ph : wff, x : set, A : class, B : class) disjointed(x A, x B) {
	prop 1 : wff = |- ( A ⊆ B → { x ∈ A | ph } ⊆ { x ∈ B | ph } ) ;;
}

proof of rabss2 {
	step 1 : wff = pm3.45 () |- ( ( x ∈ A → x ∈ B ) → ( ( x ∈ A ∧ ph ) → ( x ∈ B ∧ ph ) ) ) ;;
	step 2 : wff = alimi (step 1) |- ( ∀ x ( x ∈ A → x ∈ B ) → ∀ x ( ( x ∈ A ∧ ph ) → ( x ∈ B ∧ ph ) ) ) ;;
	step 3 : wff = dfss2 () |- ( A ⊆ B ↔ ∀ x ( x ∈ A → x ∈ B ) ) ;;
	step 4 : wff = ss2ab () |- ( { x | ( x ∈ A ∧ ph ) } ⊆ { x | ( x ∈ B ∧ ph ) } ↔ ∀ x ( ( x ∈ A ∧ ph ) → ( x ∈ B ∧ ph ) ) ) ;;
	step 5 : wff = 3imtr4i (step 2, step 3, step 4) |- ( A ⊆ B → { x | ( x ∈ A ∧ ph ) } ⊆ { x | ( x ∈ B ∧ ph ) } ) ;;
	step 6 : wff = df-rab () |- { x ∈ A | ph } = { x | ( x ∈ A ∧ ph ) } ;;
	step 7 : wff = df-rab () |- { x ∈ B | ph } = { x | ( x ∈ B ∧ ph ) } ;;
	step 8 : wff = 3sstr4g (step 5, step 6, step 7) |- ( A ⊆ B → { x ∈ A | ph } ⊆ { x ∈ B | ph } ) ;;
	qed prop 1 = step 8 ;;
}

/* Subclass relation for the restriction of a class abstraction.
       (Contributed by NM, 31-Mar-1995.) */

theorem ssab2 (ph : wff, x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- { x | ( x ∈ A ∧ ph ) } ⊆ A ;;
}

proof of ssab2 {
	step 1 : wff = simpl () |- ( ( x ∈ A ∧ ph ) → x ∈ A ) ;;
	step 2 : wff = abssi (step 1) |- { x | ( x ∈ A ∧ ph ) } ⊆ A ;;
	qed prop 1 = step 2 ;;
}

/* Subclass relation for a restricted class.  (Contributed by NM,
       19-Mar-1997.) */

theorem ssrab2 (ph : wff, x : set, A : class) disjointed(x A) {
	prop 1 : wff = |- { x ∈ A | ph } ⊆ A ;;
}

proof of ssrab2 {
	step 1 : wff = df-rab () |- { x ∈ A | ph } = { x | ( x ∈ A ∧ ph ) } ;;
	step 2 : wff = ssab2 () |- { x | ( x ∈ A ∧ ph ) } ⊆ A ;;
	step 3 : wff = eqsstri (step 1, step 2) |- { x ∈ A | ph } ⊆ A ;;
	qed prop 1 = step 3 ;;
}

/* A restricted class is a subclass of the corresponding unrestricted class.
     (Contributed by Mario Carneiro, 23-Dec-2016.) */

theorem rabssab (ph : wff, x : set, A : class)  {
	prop 1 : wff = |- { x ∈ A | ph } ⊆ { x | ph } ;;
}

proof of rabssab {
	step 1 : wff = df-rab () |- { x ∈ A | ph } = { x | ( x ∈ A ∧ ph ) } ;;
	step 2 : wff = simpr () |- ( ( x ∈ A ∧ ph ) → ph ) ;;
	step 3 : wff = ss2abi (step 2) |- { x | ( x ∈ A ∧ ph ) } ⊆ { x | ph } ;;
	step 4 : wff = eqsstri (step 1, step 3) |- { x ∈ A | ph } ⊆ { x | ph } ;;
	qed prop 1 = step 4 ;;
}

/* A subset relationship useful for converting union to indexed union using
       ~ dfiun2 or ~ dfiun2g and intersection to indexed intersection using
       ~ dfiin2 .  (Contributed by NM, 5-Oct-2006.)  (Proof shortened by Mario
       Carneiro, 26-Sep-2015.) */

theorem uniiunlem (x : set, y : set, A : class, B : class, C : class, D : class) disjointed(x y, y z A, y z B, x z C) {
	prop 1 : wff = |- ( ∀ x ∈ A B ∈ D → ( ∀ x ∈ A B ∈ C ↔ { y | ∃ x ∈ A y = B } ⊆ C ) ) ;;
}

proof of uniiunlem {
	var z : set;;
	step 1 : wff = eqeq1 () |- ( y = z → ( y = B ↔ z = B ) ) ;;
	step 2 : wff = rexbidv (step 1) |- ( y = z → ( ∃ x ∈ A y = B ↔ ∃ x ∈ A z = B ) ) ;;
	step 3 : wff = cbvabv (step 2) |- { y | ∃ x ∈ A y = B } = { z | ∃ x ∈ A z = B } ;;
	step 4 : wff = sseq1i (step 3) |- ( { y | ∃ x ∈ A y = B } ⊆ C ↔ { z | ∃ x ∈ A z = B } ⊆ C ) ;;
	step 5 : wff = r19.23v () |- ( ∀ x ∈ A ( z = B → z ∈ C ) ↔ ( ∃ x ∈ A z = B → z ∈ C ) ) ;;
	step 6 : wff = albii (step 5) |- ( ∀ z ∀ x ∈ A ( z = B → z ∈ C ) ↔ ∀ z ( ∃ x ∈ A z = B → z ∈ C ) ) ;;
	step 7 : wff = ralcom4 () |- ( ∀ x ∈ A ∀ z ( z = B → z ∈ C ) ↔ ∀ z ∀ x ∈ A ( z = B → z ∈ C ) ) ;;
	step 8 : wff = abss () |- ( { z | ∃ x ∈ A z = B } ⊆ C ↔ ∀ z ( ∃ x ∈ A z = B → z ∈ C ) ) ;;
	step 9 : wff = 3bitr4i (step 6, step 7, step 8) |- ( ∀ x ∈ A ∀ z ( z = B → z ∈ C ) ↔ { z | ∃ x ∈ A z = B } ⊆ C ) ;;
	step 10 : wff = bitr4i (step 4, step 9) |- ( { y | ∃ x ∈ A y = B } ⊆ C ↔ ∀ x ∈ A ∀ z ( z = B → z ∈ C ) ) ;;
	step 11 : wff = nfv () |- F/ z B ∈ C ;;
	step 12 : wff = eleq1 () |- ( z = B → ( z ∈ C ↔ B ∈ C ) ) ;;
	step 13 : wff = ceqsalg (step 11, step 12) |- ( B ∈ D → ( ∀ z ( z = B → z ∈ C ) ↔ B ∈ C ) ) ;;
	step 14 : wff = ralimi (step 13) |- ( ∀ x ∈ A B ∈ D → ∀ x ∈ A ( ∀ z ( z = B → z ∈ C ) ↔ B ∈ C ) ) ;;
	step 15 : wff = ralbi () |- ( ∀ x ∈ A ( ∀ z ( z = B → z ∈ C ) ↔ B ∈ C ) → ( ∀ x ∈ A ∀ z ( z = B → z ∈ C ) ↔ ∀ x ∈ A B ∈ C ) ) ;;
	step 16 : wff = syl (step 14, step 15) |- ( ∀ x ∈ A B ∈ D → ( ∀ x ∈ A ∀ z ( z = B → z ∈ C ) ↔ ∀ x ∈ A B ∈ C ) ) ;;
	step 17 : wff = syl5rbb (step 10, step 16) |- ( ∀ x ∈ A B ∈ D → ( ∀ x ∈ A B ∈ C ↔ { y | ∃ x ∈ A y = B } ⊆ C ) ) ;;
	qed prop 1 = step 17 ;;
}

/* Alternate definition of proper subclass.  (Contributed by NM,
     7-Feb-1996.) */

theorem dfpss2 (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
}

proof of dfpss2 {
	step 1 : wff = df-pss () |- ( A ⊂ B ↔ ( A ⊆ B ∧ A ≠ B ) ) ;;
	step 2 : wff = df-ne () |- ( A ≠ B ↔ ¬ A = B ) ;;
	step 3 : wff = anbi2i (step 2) |- ( ( A ⊆ B ∧ A ≠ B ) ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Alternate definition of proper subclass.  (Contributed by NM,
     7-Feb-1996.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) */

theorem dfpss3 (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ B ⊆ A ) ) ;;
}

proof of dfpss3 {
	step 1 : wff = dfpss2 () |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
	step 2 : wff = eqss () |- ( A = B ↔ ( A ⊆ B ∧ B ⊆ A ) ) ;;
	step 3 : wff = baib (step 2) |- ( A ⊆ B → ( A = B ↔ B ⊆ A ) ) ;;
	step 4 : wff = notbid (step 3) |- ( A ⊆ B → ( ¬ A = B ↔ ¬ B ⊆ A ) ) ;;
	step 5 : wff = pm5.32i (step 4) |- ( ( A ⊆ B ∧ ¬ A = B ) ↔ ( A ⊆ B ∧ ¬ B ⊆ A ) ) ;;
	step 6 : wff = bitri (step 1, step 5) |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ B ⊆ A ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Equality theorem for proper subclass.  (Contributed by NM, 7-Feb-1996.) */

theorem psseq1 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( A = B → ( A ⊂ C ↔ B ⊂ C ) ) ;;
}

proof of psseq1 {
	step 1 : wff = sseq1 () |- ( A = B → ( A ⊆ C ↔ B ⊆ C ) ) ;;
	step 2 : wff = neeq1 () |- ( A = B → ( A ≠ C ↔ B ≠ C ) ) ;;
	step 3 : wff = anbi12d (step 1, step 2) |- ( A = B → ( ( A ⊆ C ∧ A ≠ C ) ↔ ( B ⊆ C ∧ B ≠ C ) ) ) ;;
	step 4 : wff = df-pss () |- ( A ⊂ C ↔ ( A ⊆ C ∧ A ≠ C ) ) ;;
	step 5 : wff = df-pss () |- ( B ⊂ C ↔ ( B ⊆ C ∧ B ≠ C ) ) ;;
	step 6 : wff = 3bitr4g (step 3, step 4, step 5) |- ( A = B → ( A ⊂ C ↔ B ⊂ C ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Equality theorem for proper subclass.  (Contributed by NM, 7-Feb-1996.) */

theorem psseq2 (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( A = B → ( C ⊂ A ↔ C ⊂ B ) ) ;;
}

proof of psseq2 {
	step 1 : wff = sseq2 () |- ( A = B → ( C ⊆ A ↔ C ⊆ B ) ) ;;
	step 2 : wff = neeq2 () |- ( A = B → ( C ≠ A ↔ C ≠ B ) ) ;;
	step 3 : wff = anbi12d (step 1, step 2) |- ( A = B → ( ( C ⊆ A ∧ C ≠ A ) ↔ ( C ⊆ B ∧ C ≠ B ) ) ) ;;
	step 4 : wff = df-pss () |- ( C ⊂ A ↔ ( C ⊆ A ∧ C ≠ A ) ) ;;
	step 5 : wff = df-pss () |- ( C ⊂ B ↔ ( C ⊆ B ∧ C ≠ B ) ) ;;
	step 6 : wff = 3bitr4g (step 3, step 4, step 5) |- ( A = B → ( C ⊂ A ↔ C ⊂ B ) ) ;;
	qed prop 1 = step 6 ;;
}

/* An equality inference for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) */

theorem psseq1i (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- ( A ⊂ C ↔ B ⊂ C ) ;;
}

proof of psseq1i {
	step 1 : wff = psseq1 () |- ( A = B → ( A ⊂ C ↔ B ⊂ C ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( A ⊂ C ↔ B ⊂ C ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality inference for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) */

theorem psseq2i (A : class, B : class, C : class)  {
	hyp 1 : wff = |- A = B ;;
	-----------------------
	prop 1 : wff = |- ( C ⊂ A ↔ C ⊂ B ) ;;
}

proof of psseq2i {
	step 1 : wff = psseq2 () |- ( A = B → ( C ⊂ A ↔ C ⊂ B ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( C ⊂ A ↔ C ⊂ B ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality inference for the proper subclass relationship.
         (Contributed by NM, 9-Jun-2004.) */

theorem psseq12i (A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- A = B ;;
	hyp 2 : wff = |- C = D ;;
	-----------------------
	prop 1 : wff = |- ( A ⊂ C ↔ B ⊂ D ) ;;
}

proof of psseq12i {
	step 1 : wff = psseq1i (hyp 1) |- ( A ⊂ C ↔ B ⊂ C ) ;;
	step 2 : wff = psseq2i (hyp 2) |- ( B ⊂ C ↔ B ⊂ D ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( A ⊂ C ↔ B ⊂ D ) ;;
	qed prop 1 = step 3 ;;
}

/* An equality deduction for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) */

theorem psseq1d (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( A ⊂ C ↔ B ⊂ C ) ) ;;
}

proof of psseq1d {
	step 1 : wff = psseq1 () |- ( A = B → ( A ⊂ C ↔ B ⊂ C ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( A ⊂ C ↔ B ⊂ C ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality deduction for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) */

theorem psseq2d (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( C ⊂ A ↔ C ⊂ B ) ) ;;
}

proof of psseq2d {
	step 1 : wff = psseq2 () |- ( A = B → ( C ⊂ A ↔ C ⊂ B ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( C ⊂ A ↔ C ⊂ B ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An equality deduction for the proper subclass relationship.
         (Contributed by NM, 9-Jun-2004.) */

theorem psseq12d (ph : wff, A : class, B : class, C : class, D : class)  {
	hyp 1 : wff = |- ( ph → A = B ) ;;
	hyp 2 : wff = |- ( ph → C = D ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( A ⊂ C ↔ B ⊂ D ) ) ;;
}

proof of psseq12d {
	step 1 : wff = psseq1d (hyp 1) |- ( ph → ( A ⊂ C ↔ B ⊂ C ) ) ;;
	step 2 : wff = psseq2d (hyp 2) |- ( ph → ( B ⊂ C ↔ B ⊂ D ) ) ;;
	step 3 : wff = bitrd (step 1, step 2) |- ( ph → ( A ⊂ C ↔ B ⊂ D ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A proper subclass is a subclass.  Theorem 10 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) */

theorem pssss (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊂ B → A ⊆ B ) ;;
}

proof of pssss {
	step 1 : wff = df-pss () |- ( A ⊂ B ↔ ( A ⊆ B ∧ A ≠ B ) ) ;;
	step 2 : wff = simplbi (step 1) |- ( A ⊂ B → A ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Two classes in a proper subclass relationship are not equal.  (Contributed
     by NM, 16-Feb-2015.) */

theorem pssne (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊂ B → A ≠ B ) ;;
}

proof of pssne {
	step 1 : wff = df-pss () |- ( A ⊂ B ↔ ( A ⊆ B ∧ A ≠ B ) ) ;;
	step 2 : wff = simprbi (step 1) |- ( A ⊂ B → A ≠ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduce subclass from proper subclass.  (Contributed by NM,
       29-Feb-1996.) */

theorem pssssd (ph : wff, A : class, B : class)  {
	hyp 1 : wff = |- ( ph → A ⊂ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊆ B ) ;;
}

proof of pssssd {
	step 1 : wff = pssss () |- ( A ⊂ B → A ⊆ B ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → A ⊆ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Proper subclasses are unequal.  Deduction form of ~ pssne .
       (Contributed by David Moews, 1-May-2017.) */

theorem pssned (ph : wff, A : class, B : class)  {
	hyp 1 : wff = |- ( ph → A ⊂ B ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ≠ B ) ;;
}

proof of pssned {
	step 1 : wff = pssne () |- ( A ⊂ B → A ≠ B ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → A ≠ B ) ;;
	qed prop 1 = step 2 ;;
}

/* Subclass in terms of proper subclass.  (Contributed by NM,
     25-Feb-1996.) */

theorem sspss (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊆ B ↔ ( A ⊂ B ∨ A = B ) ) ;;
}

proof of sspss {
	step 1 : wff = dfpss2 () |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
	step 2 : wff = simplbi2 (step 1) |- ( A ⊆ B → ( ¬ A = B → A ⊂ B ) ) ;;
	step 3 : wff = con1d (step 2) |- ( A ⊆ B → ( ¬ A ⊂ B → A = B ) ) ;;
	step 4 : wff = orrd (step 3) |- ( A ⊆ B → ( A ⊂ B ∨ A = B ) ) ;;
	step 5 : wff = pssss () |- ( A ⊂ B → A ⊆ B ) ;;
	step 6 : wff = eqimss () |- ( A = B → A ⊆ B ) ;;
	step 7 : wff = jaoi (step 5, step 6) |- ( ( A ⊂ B ∨ A = B ) → A ⊆ B ) ;;
	step 8 : wff = impbii (step 4, step 7) |- ( A ⊆ B ↔ ( A ⊂ B ∨ A = B ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Proper subclass is irreflexive.  Theorem 7 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) */

theorem pssirr (A : class)  {
	prop 1 : wff = |- ¬ A ⊂ A ;;
}

proof of pssirr {
	step 1 : wff = pm3.24 () |- ¬ ( A ⊆ A ∧ ¬ A ⊆ A ) ;;
	step 2 : wff = dfpss3 () |- ( A ⊂ A ↔ ( A ⊆ A ∧ ¬ A ⊆ A ) ) ;;
	step 3 : wff = mtbir (step 1, step 2) |- ¬ A ⊂ A ;;
	qed prop 1 = step 3 ;;
}

/* Proper subclass has no 2-cycle loops.  Compare Theorem 8 of [Suppes]
     p. 23.  (Contributed by NM, 7-Feb-1996.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) */

theorem pssn2lp (A : class, B : class)  {
	prop 1 : wff = |- ¬ ( A ⊂ B ∧ B ⊂ A ) ;;
}

proof of pssn2lp {
	step 1 : wff = dfpss3 () |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ B ⊆ A ) ) ;;
	step 2 : wff = simprbi (step 1) |- ( A ⊂ B → ¬ B ⊆ A ) ;;
	step 3 : wff = pssss () |- ( B ⊂ A → B ⊆ A ) ;;
	step 4 : wff = nsyl (step 2, step 3) |- ( A ⊂ B → ¬ B ⊂ A ) ;;
	step 5 : wff = imnan () |- ( ( A ⊂ B → ¬ B ⊂ A ) ↔ ¬ ( A ⊂ B ∧ B ⊂ A ) ) ;;
	step 6 : wff = mpbi (step 4, step 5) |- ¬ ( A ⊂ B ∧ B ⊂ A ) ;;
	qed prop 1 = step 6 ;;
}

/* Two ways of stating trichotomy with respect to inclusion.  (Contributed by
     NM, 12-Aug-2004.) */

theorem sspsstri (A : class, B : class)  {
	prop 1 : wff = |- ( ( A ⊆ B ∨ B ⊆ A ) ↔ ( A ⊂ B ∨ A = B ∨ B ⊂ A ) ) ;;
}

proof of sspsstri {
	step 1 : wff = or32 () |- ( ( ( A ⊂ B ∨ B ⊂ A ) ∨ A = B ) ↔ ( ( A ⊂ B ∨ A = B ) ∨ B ⊂ A ) ) ;;
	step 2 : wff = sspss () |- ( A ⊆ B ↔ ( A ⊂ B ∨ A = B ) ) ;;
	step 3 : wff = sspss () |- ( B ⊆ A ↔ ( B ⊂ A ∨ B = A ) ) ;;
	step 4 : wff = eqcom () |- ( B = A ↔ A = B ) ;;
	step 5 : wff = orbi2i (step 4) |- ( ( B ⊂ A ∨ B = A ) ↔ ( B ⊂ A ∨ A = B ) ) ;;
	step 6 : wff = bitri (step 3, step 5) |- ( B ⊆ A ↔ ( B ⊂ A ∨ A = B ) ) ;;
	step 7 : wff = orbi12i (step 2, step 6) |- ( ( A ⊆ B ∨ B ⊆ A ) ↔ ( ( A ⊂ B ∨ A = B ) ∨ ( B ⊂ A ∨ A = B ) ) ) ;;
	step 8 : wff = orordir () |- ( ( ( A ⊂ B ∨ B ⊂ A ) ∨ A = B ) ↔ ( ( A ⊂ B ∨ A = B ) ∨ ( B ⊂ A ∨ A = B ) ) ) ;;
	step 9 : wff = bitr4i (step 7, step 8) |- ( ( A ⊆ B ∨ B ⊆ A ) ↔ ( ( A ⊂ B ∨ B ⊂ A ) ∨ A = B ) ) ;;
	step 10 : wff = df-3or () |- ( ( A ⊂ B ∨ A = B ∨ B ⊂ A ) ↔ ( ( A ⊂ B ∨ A = B ) ∨ B ⊂ A ) ) ;;
	step 11 : wff = 3bitr4i (step 1, step 9, step 10) |- ( ( A ⊆ B ∨ B ⊆ A ) ↔ ( A ⊂ B ∨ A = B ∨ B ⊂ A ) ) ;;
	qed prop 1 = step 11 ;;
}

/* Partial trichotomy law for subclasses.  (Contributed by NM, 16-May-1996.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) */

theorem ssnpss (A : class, B : class)  {
	prop 1 : wff = |- ( A ⊆ B → ¬ B ⊂ A ) ;;
}

proof of ssnpss {
	step 1 : wff = dfpss3 () |- ( B ⊂ A ↔ ( B ⊆ A ∧ ¬ A ⊆ B ) ) ;;
	step 2 : wff = simprbi (step 1) |- ( B ⊂ A → ¬ A ⊆ B ) ;;
	step 3 : wff = con2i (step 2) |- ( A ⊆ B → ¬ B ⊂ A ) ;;
	qed prop 1 = step 3 ;;
}

/* Transitive law for proper subclass.  Theorem 9 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) */

theorem psstr (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊂ B ∧ B ⊂ C ) → A ⊂ C ) ;;
}

proof of psstr {
	step 1 : wff = pssss () |- ( A ⊂ B → A ⊆ B ) ;;
	step 2 : wff = pssss () |- ( B ⊂ C → B ⊆ C ) ;;
	step 3 : wff = sylan9ss (step 1, step 2) |- ( ( A ⊂ B ∧ B ⊂ C ) → A ⊆ C ) ;;
	step 4 : wff = pssn2lp () |- ¬ ( C ⊂ B ∧ B ⊂ C ) ;;
	step 5 : wff = psseq1 () |- ( A = C → ( A ⊂ B ↔ C ⊂ B ) ) ;;
	step 6 : wff = anbi1d (step 5) |- ( A = C → ( ( A ⊂ B ∧ B ⊂ C ) ↔ ( C ⊂ B ∧ B ⊂ C ) ) ) ;;
	step 7 : wff = mtbiri (step 4, step 6) |- ( A = C → ¬ ( A ⊂ B ∧ B ⊂ C ) ) ;;
	step 8 : wff = con2i (step 7) |- ( ( A ⊂ B ∧ B ⊂ C ) → ¬ A = C ) ;;
	step 9 : wff = dfpss2 () |- ( A ⊂ C ↔ ( A ⊆ C ∧ ¬ A = C ) ) ;;
	step 10 : wff = sylanbrc (step 3, step 8, step 9) |- ( ( A ⊂ B ∧ B ⊂ C ) → A ⊂ C ) ;;
	qed prop 1 = step 10 ;;
}

/* Transitive law for subclass and proper subclass.  (Contributed by NM,
     3-Apr-1996.) */

theorem sspsstr (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊆ B ∧ B ⊂ C ) → A ⊂ C ) ;;
}

proof of sspsstr {
	step 1 : wff = sspss () |- ( A ⊆ B ↔ ( A ⊂ B ∨ A = B ) ) ;;
	step 2 : wff = psstr () |- ( ( A ⊂ B ∧ B ⊂ C ) → A ⊂ C ) ;;
	step 3 : wff = ex (step 2) |- ( A ⊂ B → ( B ⊂ C → A ⊂ C ) ) ;;
	step 4 : wff = psseq1 () |- ( A = B → ( A ⊂ C ↔ B ⊂ C ) ) ;;
	step 5 : wff = biimprd (step 4) |- ( A = B → ( B ⊂ C → A ⊂ C ) ) ;;
	step 6 : wff = jaoi (step 3, step 5) |- ( ( A ⊂ B ∨ A = B ) → ( B ⊂ C → A ⊂ C ) ) ;;
	step 7 : wff = imp (step 6) |- ( ( ( A ⊂ B ∨ A = B ) ∧ B ⊂ C ) → A ⊂ C ) ;;
	step 8 : wff = sylanb (step 1, step 7) |- ( ( A ⊆ B ∧ B ⊂ C ) → A ⊂ C ) ;;
	qed prop 1 = step 8 ;;
}

/* Transitive law for subclass and proper subclass.  (Contributed by NM,
     3-Apr-1996.) */

theorem psssstr (A : class, B : class, C : class)  {
	prop 1 : wff = |- ( ( A ⊂ B ∧ B ⊆ C ) → A ⊂ C ) ;;
}

proof of psssstr {
	step 1 : wff = sspss () |- ( B ⊆ C ↔ ( B ⊂ C ∨ B = C ) ) ;;
	step 2 : wff = psstr () |- ( ( A ⊂ B ∧ B ⊂ C ) → A ⊂ C ) ;;
	step 3 : wff = ex (step 2) |- ( A ⊂ B → ( B ⊂ C → A ⊂ C ) ) ;;
	step 4 : wff = psseq2 () |- ( B = C → ( A ⊂ B ↔ A ⊂ C ) ) ;;
	step 5 : wff = biimpcd (step 4) |- ( A ⊂ B → ( B = C → A ⊂ C ) ) ;;
	step 6 : wff = jaod (step 3, step 5) |- ( A ⊂ B → ( ( B ⊂ C ∨ B = C ) → A ⊂ C ) ) ;;
	step 7 : wff = imp (step 6) |- ( ( A ⊂ B ∧ ( B ⊂ C ∨ B = C ) ) → A ⊂ C ) ;;
	step 8 : wff = sylan2b (step 1, step 7) |- ( ( A ⊂ B ∧ B ⊆ C ) → A ⊂ C ) ;;
	qed prop 1 = step 8 ;;
}

/* Proper subclass inclusion is transitive.  Deduction form of ~ psstr .
       (Contributed by David Moews, 1-May-2017.) */

theorem psstrd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊂ B ) ;;
	hyp 2 : wff = |- ( ph → B ⊂ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊂ C ) ;;
}

proof of psstrd {
	step 1 : wff = psstr () |- ( ( A ⊂ B ∧ B ⊂ C ) → A ⊂ C ) ;;
	step 2 : wff = syl2anc (hyp 1, hyp 2, step 1) |- ( ph → A ⊂ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Transitivity involving subclass and proper subclass inclusion.
       Deduction form of ~ sspsstr .  (Contributed by David Moews,
       1-May-2017.) */

theorem sspsstrd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊆ B ) ;;
	hyp 2 : wff = |- ( ph → B ⊂ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊂ C ) ;;
}

proof of sspsstrd {
	step 1 : wff = sspsstr () |- ( ( A ⊆ B ∧ B ⊂ C ) → A ⊂ C ) ;;
	step 2 : wff = syl2anc (hyp 1, hyp 2, step 1) |- ( ph → A ⊂ C ) ;;
	qed prop 1 = step 2 ;;
}

/* Transitivity involving subclass and proper subclass inclusion.
       Deduction form of ~ psssstr .  (Contributed by David Moews,
       1-May-2017.) */

theorem psssstrd (ph : wff, A : class, B : class, C : class)  {
	hyp 1 : wff = |- ( ph → A ⊂ B ) ;;
	hyp 2 : wff = |- ( ph → B ⊆ C ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → A ⊂ C ) ;;
}

proof of psssstrd {
	step 1 : wff = psssstr () |- ( ( A ⊂ B ∧ B ⊆ C ) → A ⊂ C ) ;;
	step 2 : wff = syl2anc (hyp 1, hyp 2, step 1) |- ( ph → A ⊂ C ) ;;
	qed prop 1 = step 2 ;;
}

/* A class is not a proper subclass of another iff it satisfies a
     one-directional form of ~ eqss .  (Contributed by Mario Carneiro,
     15-May-2015.) */

theorem npss (A : class, B : class)  {
	prop 1 : wff = |- ( ¬ A ⊂ B ↔ ( A ⊆ B → A = B ) ) ;;
}

proof of npss {
	step 1 : wff = pm4.61 () |- ( ¬ ( A ⊆ B → A = B ) ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
	step 2 : wff = dfpss2 () |- ( A ⊂ B ↔ ( A ⊆ B ∧ ¬ A = B ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( ¬ ( A ⊆ B → A = B ) ↔ A ⊂ B ) ;;
	step 4 : wff = con1bii (step 3) |- ( ¬ A ⊂ B ↔ ( A ⊆ B → A = B ) ) ;;
	qed prop 1 = step 4 ;;
}


