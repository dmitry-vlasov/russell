import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_add_the_Axiom_of_Power_Sets/Power_class_of_union_and_intersection.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                Epsilon and identity relations

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/*Declare new constant symbols. */

constant {
	symbol 𝛜 ;;
	ascii _E ;;
	latex \epsilon ;;
}

/*Letter E (for epsilon relation) */

constant {
	symbol _I ;;
	ascii _I ;;
	latex \rm{Id} ;;
}

/*Letter I (for identity relation) */

/*Extend class notation to include the epsilon relation. */

rule cep () {
	term : class = # 𝛜 ;;
}

/*Extend the definition of a class to include identity relation. */

rule cid () {
	term : class = # _I ;;
}

/*Define the epsilon relation.  Similar to Definition 6.22 of
       [TakeutiZaring] p. 30.  The epsilon relation and set membership are the
       same, that is, ` ( A _E B <-> A e. B ) ` when ` B ` is a set by
       ~ epelg .  Thus, ` 5 _E { 1 , 5 } ` ( ~ ex-eprel ).  (Contributed by NM,
       13-Aug-1995.) */

definition df-eprel (x : set, y : set) disjointed(x y) {
	defiendum : class = # 𝛜 ;;
	definiens : class = # { 〈 x , y 〉 | x ∈ y } ;;
	-----------------------
	prop : wff = |- defiendum = definiens ;;
}

/*The epsilon relation and membership are the same.  General version of
       ~ epel .  (Contributed by Scott Fenton, 27-Mar-2011.)  (Revised by Mario
       Carneiro, 28-Apr-2015.) */

theorem epelg (A : class, B : class, V : class) disjointed(A x y, B x y) {
	prop 1 : wff = |- ( B ∈ V → ( A 𝛜 B ↔ A ∈ B ) ) ;;
}

proof of epelg {
	var x : set, y : set;;
	step 1 : wff = df-br () |- ( A 𝛜 B ↔ 〈 A , B 〉 ∈ 𝛜 ) ;;
	step 2 : wff = elopab () |- ( 〈 A , B 〉 ∈ { 〈 x , y 〉 | x ∈ y } ↔ ∃ x ∃ y ( 〈 A , B 〉 = 〈 x , y 〉 ∧ x ∈ y ) ) ;;
	step 3 : wff = vex () |- x ∈ _V ;;
	step 4 : wff = vex () |- y ∈ _V ;;
	step 5 : wff = pm3.2i (step 3, step 4) |- ( x ∈ _V ∧ y ∈ _V ) ;;
	step 6 : wff = opeqex () |- ( 〈 A , B 〉 = 〈 x , y 〉 → ( ( A ∈ _V ∧ B ∈ _V ) ↔ ( x ∈ _V ∧ y ∈ _V ) ) ) ;;
	step 7 : wff = mpbiri (step 5, step 6) |- ( 〈 A , B 〉 = 〈 x , y 〉 → ( A ∈ _V ∧ B ∈ _V ) ) ;;
	step 8 : wff = simpld (step 7) |- ( 〈 A , B 〉 = 〈 x , y 〉 → A ∈ _V ) ;;
	step 9 : wff = adantr (step 8) |- ( ( 〈 A , B 〉 = 〈 x , y 〉 ∧ x ∈ y ) → A ∈ _V ) ;;
	step 10 : wff = exlimivv (step 9) |- ( ∃ x ∃ y ( 〈 A , B 〉 = 〈 x , y 〉 ∧ x ∈ y ) → A ∈ _V ) ;;
	step 11 : wff = sylbi (step 2, step 10) |- ( 〈 A , B 〉 ∈ { 〈 x , y 〉 | x ∈ y } → A ∈ _V ) ;;
	step 12 : wff = df-eprel () |- 𝛜 = { 〈 x , y 〉 | x ∈ y } ;;
	step 13 : wff = eleq2s (step 11, step 12) |- ( 〈 A , B 〉 ∈ 𝛜 → A ∈ _V ) ;;
	step 14 : wff = sylbi (step 1, step 13) |- ( A 𝛜 B → A ∈ _V ) ;;
	step 15 : wff = a1i (step 14) |- ( B ∈ V → ( A 𝛜 B → A ∈ _V ) ) ;;
	step 16 : wff = elex () |- ( A ∈ B → A ∈ _V ) ;;
	step 17 : wff = a1i (step 16) |- ( B ∈ V → ( A ∈ B → A ∈ _V ) ) ;;
	step 18 : wff = eleq12 () |- ( ( x = A ∧ y = B ) → ( x ∈ y ↔ A ∈ B ) ) ;;
	step 19 : wff = df-eprel () |- 𝛜 = { 〈 x , y 〉 | x ∈ y } ;;
	step 20 : wff = brabga (step 18, step 19) |- ( ( A ∈ _V ∧ B ∈ V ) → ( A 𝛜 B ↔ A ∈ B ) ) ;;
	step 21 : wff = expcom (step 20) |- ( B ∈ V → ( A ∈ _V → ( A 𝛜 B ↔ A ∈ B ) ) ) ;;
	step 22 : wff = pm5.21ndd (step 15, step 17, step 21) |- ( B ∈ V → ( A 𝛜 B ↔ A ∈ B ) ) ;;
	qed prop 1 = step 22 ;;
}

/*The epsilon relationship and the membership relation are the same.
       (Contributed by Scott Fenton, 11-Apr-2012.) */

theorem epelc (A : class, B : class)  {
	hyp 1 : wff = |- B ∈ _V ;;
	-----------------------
	prop 1 : wff = |- ( A 𝛜 B ↔ A ∈ B ) ;;
}

proof of epelc {
	step 1 : wff = epelg () |- ( B ∈ _V → ( A 𝛜 B ↔ A ∈ B ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( A 𝛜 B ↔ A ∈ B ) ;;
	qed prop 1 = step 2 ;;
}

/*The epsilon relation and the membership relation are the same.
     (Contributed by NM, 13-Aug-1995.) */

theorem epel (x : set, y : set)  {
	prop 1 : wff = |- ( x 𝛜 y ↔ x ∈ y ) ;;
}

proof of epel {
	step 1 : wff = vex () |- y ∈ _V ;;
	step 2 : wff = epelc (step 1) |- ( x 𝛜 y ↔ x ∈ y ) ;;
	qed prop 1 = step 2 ;;
}

/*Define the identity relation.  Definition 9.15 of [Quine] p. 64.  For
       example, ` 5 _I 5 ` and ` -. 4 _I 5 ` ( ~ ex-id ).  (Contributed by NM,
       13-Aug-1995.) */

definition df-id (x : set, y : set) disjointed(x y) {
	defiendum : class = # _I ;;
	definiens : class = # { 〈 x , y 〉 | x = y } ;;
	-----------------------
	prop : wff = |- defiendum = definiens ;;
}

/*A stronger version of ~ df-id that doesn't require ` x ` and ` y ` to be
       distinct.  Ordinarily, we wouldn't use this as a definition, since
       non-distinct dummy variables would make soundness verification more
       difficult (as the proof here shows).  The proof can be instructive in
       showing how distinct variable requirements may be eliminated, a task
       that is not necessarily obvious.  (Contributed by NM, 5-Feb-2008.)
       (Revised by Mario Carneiro, 18-Nov-2016.) */

theorem dfid3 (x : set, y : set) disjointed(w z x, w z y) {
	prop 1 : wff = |- _I = { 〈 x , y 〉 | x = y } ;;
}

proof of dfid3 {
	var z : set, w : set;;
	step 1 : wff = df-id () |- _I = { 〈 x , z 〉 | x = z } ;;
	step 2 : wff = ancom () |- ( ( w = 〈 x , z 〉 ∧ x = z ) ↔ ( x = z ∧ w = 〈 x , z 〉 ) ) ;;
	step 3 : wff = equcom () |- ( x = z ↔ z = x ) ;;
	step 4 : wff = anbi1i (step 3) |- ( ( x = z ∧ w = 〈 x , z 〉 ) ↔ ( z = x ∧ w = 〈 x , z 〉 ) ) ;;
	step 5 : wff = bitri (step 2, step 4) |- ( ( w = 〈 x , z 〉 ∧ x = z ) ↔ ( z = x ∧ w = 〈 x , z 〉 ) ) ;;
	step 6 : wff = exbii (step 5) |- ( ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ z ( z = x ∧ w = 〈 x , z 〉 ) ) ;;
	step 7 : wff = vex () |- x ∈ _V ;;
	step 8 : wff = opeq2 () |- ( z = x → 〈 x , z 〉 = 〈 x , x 〉 ) ;;
	step 9 : wff = eqeq2d (step 8) |- ( z = x → ( w = 〈 x , z 〉 ↔ w = 〈 x , x 〉 ) ) ;;
	step 10 : wff = ceqsexv (step 7, step 9) |- ( ∃ z ( z = x ∧ w = 〈 x , z 〉 ) ↔ w = 〈 x , x 〉 ) ;;
	step 11 : wff = equid () |- x = x ;;
	step 12 : wff = biantru (step 11) |- ( w = 〈 x , x 〉 ↔ ( w = 〈 x , x 〉 ∧ x = x ) ) ;;
	step 13 : wff = 3bitri (step 6, step 10, step 12) |- ( ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ( w = 〈 x , x 〉 ∧ x = x ) ) ;;
	step 14 : wff = exbii (step 13) |- ( ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ) ;;
	step 15 : wff = nfe1 () |- F/ x ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ;;
	step 16 : wff = 19.9 (step 15) |- ( ∃ x ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ↔ ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ) ;;
	step 17 : wff = bitr4i (step 14, step 16) |- ( ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ x ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ) ;;
	step 18 : wff = opeq2 () |- ( x = y → 〈 x , x 〉 = 〈 x , y 〉 ) ;;
	step 19 : wff = eqeq2d (step 18) |- ( x = y → ( w = 〈 x , x 〉 ↔ w = 〈 x , y 〉 ) ) ;;
	step 20 : wff = equequ2 () |- ( x = y → ( x = x ↔ x = y ) ) ;;
	step 21 : wff = anbi12d (step 19, step 20) |- ( x = y → ( ( w = 〈 x , x 〉 ∧ x = x ) ↔ ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 22 : wff = sps (step 21) |- ( ∀ x x = y → ( ( w = 〈 x , x 〉 ∧ x = x ) ↔ ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 23 : wff = drex1 (step 22) |- ( ∀ x x = y → ( ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ↔ ∃ y ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 24 : wff = drex2 (step 23) |- ( ∀ x x = y → ( ∃ x ∃ x ( w = 〈 x , x 〉 ∧ x = x ) ↔ ∃ x ∃ y ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 25 : wff = syl5bb (step 17, step 24) |- ( ∀ x x = y → ( ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ x ∃ y ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 26 : wff = nfnae () |- F/ x ¬ ∀ x x = y ;;
	step 27 : wff = nfnae () |- F/ y ¬ ∀ x x = y ;;
	step 28 : wff = nfcvd () |- ( ¬ ∀ x x = y → F/_ y w ) ;;
	step 29 : wff = nfcvf2 () |- ( ¬ ∀ x x = y → F/_ y x ) ;;
	step 30 : wff = nfcvd () |- ( ¬ ∀ x x = y → F/_ y z ) ;;
	step 31 : wff = nfopd (step 29, step 30) |- ( ¬ ∀ x x = y → F/_ y 〈 x , z 〉 ) ;;
	step 32 : wff = nfeqd (step 28, step 31) |- ( ¬ ∀ x x = y → F/ y w = 〈 x , z 〉 ) ;;
	step 33 : wff = nfcvf2 () |- ( ¬ ∀ x x = y → F/_ y x ) ;;
	step 34 : wff = nfcvd () |- ( ¬ ∀ x x = y → F/_ y z ) ;;
	step 35 : wff = nfeqd (step 33, step 34) |- ( ¬ ∀ x x = y → F/ y x = z ) ;;
	step 36 : wff = nfand (step 32, step 35) |- ( ¬ ∀ x x = y → F/ y ( w = 〈 x , z 〉 ∧ x = z ) ) ;;
	step 37 : wff = opeq2 () |- ( z = y → 〈 x , z 〉 = 〈 x , y 〉 ) ;;
	step 38 : wff = eqeq2d (step 37) |- ( z = y → ( w = 〈 x , z 〉 ↔ w = 〈 x , y 〉 ) ) ;;
	step 39 : wff = equequ2 () |- ( z = y → ( x = z ↔ x = y ) ) ;;
	step 40 : wff = anbi12d (step 38, step 39) |- ( z = y → ( ( w = 〈 x , z 〉 ∧ x = z ) ↔ ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 41 : wff = a1i (step 40) |- ( ¬ ∀ x x = y → ( z = y → ( ( w = 〈 x , z 〉 ∧ x = z ) ↔ ( w = 〈 x , y 〉 ∧ x = y ) ) ) ) ;;
	step 42 : wff = cbvexd (step 27, step 36, step 41) |- ( ¬ ∀ x x = y → ( ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ y ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 43 : wff = exbid (step 26, step 42) |- ( ¬ ∀ x x = y → ( ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ x ∃ y ( w = 〈 x , y 〉 ∧ x = y ) ) ) ;;
	step 44 : wff = pm2.61i (step 25, step 43) |- ( ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) ↔ ∃ x ∃ y ( w = 〈 x , y 〉 ∧ x = y ) ) ;;
	step 45 : wff = abbii (step 44) |- { w | ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) } = { w | ∃ x ∃ y ( w = 〈 x , y 〉 ∧ x = y ) } ;;
	step 46 : wff = df-opab () |- { 〈 x , z 〉 | x = z } = { w | ∃ x ∃ z ( w = 〈 x , z 〉 ∧ x = z ) } ;;
	step 47 : wff = df-opab () |- { 〈 x , y 〉 | x = y } = { w | ∃ x ∃ y ( w = 〈 x , y 〉 ∧ x = y ) } ;;
	step 48 : wff = 3eqtr4i (step 45, step 46, step 47) |- { 〈 x , z 〉 | x = z } = { 〈 x , y 〉 | x = y } ;;
	step 49 : wff = eqtri (step 1, step 48) |- _I = { 〈 x , y 〉 | x = y } ;;
	qed prop 1 = step 49 ;;
}

/*Alternate definition of the identity relation.  (Contributed by NM,
     15-Mar-2007.) */

theorem dfid2 (x : set)  {
	prop 1 : wff = |- _I = { 〈 x , x 〉 | x = x } ;;
}

proof of dfid2 {
	step 1 : wff = dfid3 () |- _I = { 〈 x , x 〉 | x = x } ;;
	qed prop 1 = step 1 ;;
}


