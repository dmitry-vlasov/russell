import uset-100000/ZF_(ZERMELO-FRAENKEL)_SET_THEORY/ZF_Set_Theory_-_start_with_the_Axiom_of_Extensionality.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
          Introduce the Axiom of Replacement

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Axiom of Replacement.  An axiom scheme of Zermelo-Fraenkel set theory.
       Axiom 5 of [TakeutiZaring] p. 19.  It tells us that the image of any set
       under a function is also a set (see the variant ~ funimaex ).  Although
       ` ph ` may be any wff whatsoever, this axiom is useful (i.e. its
       antecedent is satisfied) when we are given some function and ` ph `
       encodes the predicate "the value of the function at ` w ` is ` z ` ."
       Thus, ` ph ` will ordinarily have free variables ` w ` and ` z ` - think
       of it informally as ` ph ( w , z ) ` .  We prefix ` ph ` with the
       quantifier ` A. y ` in order to "protect" the axiom from any ` ph `
       containing ` y ` , thus allowing us to eliminate any restrictions on
       ` ph ` .  This makes the axiom usable in a formalization that omits the
       logically redundant axiom ~ ax-17 .  Another common variant is derived
       as ~ axrep5 , where you can find some further remarks.  A slightly more
       compact version is shown as ~ axrep2 .  A quite different variant is
       ~ zfrep6 , which if used in place of ~ ax-rep would also require that
       the Separation Scheme ~ axsep be stated as a separate axiom.

       There is very a strong generalization of Replacement that doesn't demand
       function-like behavior of ` ph ` .  Two versions of this generalization
       are called the Collection Principle ~ cp and the Boundedness Axiom
       ~ bnd .

       Many developments of set theory distinguish the uses of Replacement from
       uses the weaker axioms of Separation ~ axsep , Null Set ~ axnul , and
       Pairing ~ axpr , all of which we derive from Replacement.  In order to
       make it easier to identify the uses of those redundant axioms, we
       restate them as axioms ~ ax-sep , ~ ax-nul , and ~ ax-pr below the
       theorems that prove them.  (Contributed by NM, 23-Dec-1993.) */

axiom ax-rep (ph : wff, x : set, y : set, z : set, w : set) disjointed(x y z w) {
	prop 1 : wff = |- ( ∀ w ∃ y ∀ z ( ∀ y ph → z = y ) → ∃ y ∀ z ( z ∈ y ↔ ∃ w ( w ∈ x ∧ ∀ y ph ) ) ) ;;
}

/* The version of the Axiom of Replacement used in the Metamath Solitaire
       applet ~ http://us.metamath.org/mmsolitaire/mms.html .  Equivalence is
       shown via the path ~ ax-rep ` -> ` ~ axrep1 ` -> ` ~ axrep2 ` -> `
       ~ axrepnd ` -> ` ~ zfcndrep = ~ ax-rep .  (Contributed by NM,
       19-Nov-2005.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.) */

theorem axrep1 (ph : wff, x : set, y : set, z : set) disjointed(w y ph, w x y z) {
	prop 1 : wff = |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ;;
}

proof of axrep1 {
	var w : set;;
	step 1 : wff = eleq2 () |- ( w = y → ( x ∈ w ↔ x ∈ y ) ) ;;
	step 2 : wff = anbi1d (step 1) |- ( w = y → ( ( x ∈ w ∧ ph ) ↔ ( x ∈ y ∧ ph ) ) ) ;;
	step 3 : wff = exbidv (step 2) |- ( w = y → ( ∃ x ( x ∈ w ∧ ph ) ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ;;
	step 4 : wff = bibi2d (step 3) |- ( w = y → ( ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ↔ ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ) ;;
	step 5 : wff = albidv (step 4) |- ( w = y → ( ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ↔ ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ) ;;
	step 6 : wff = exbidv (step 5) |- ( w = y → ( ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ↔ ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ) ;;
	step 7 : wff = imbi2d (step 6) |- ( w = y → ( ( ∀ x ∃ y ∀ z ( ph → z = y ) → ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ↔ ( ∀ x ∃ y ∀ z ( ph → z = y ) → ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ) ) ;;
	step 8 : wff = ax-rep () |- ( ∀ x ∃ y ∀ z ( ∀ y ph → z = y ) → ∃ y ∀ z ( z ∈ y ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	step 9 : wff = nfv () |- F/ y ph ;;
	step 10 : wff = 19.3 (step 9) |- ( ∀ y ph ↔ ph ) ;;
	step 11 : wff = imbi1i (step 10) |- ( ( ∀ y ph → z = y ) ↔ ( ph → z = y ) ) ;;
	step 12 : wff = albii (step 11) |- ( ∀ z ( ∀ y ph → z = y ) ↔ ∀ z ( ph → z = y ) ) ;;
	step 13 : wff = exbii (step 12) |- ( ∃ y ∀ z ( ∀ y ph → z = y ) ↔ ∃ y ∀ z ( ph → z = y ) ) ;;
	step 14 : wff = albii (step 13) |- ( ∀ x ∃ y ∀ z ( ∀ y ph → z = y ) ↔ ∀ x ∃ y ∀ z ( ph → z = y ) ) ;;
	step 15 : wff = nfv () |- F/ x z ∈ y ;;
	step 16 : wff = nfe1 () |- F/ x ∃ x ( x ∈ w ∧ ∀ y ph ) ;;
	step 17 : wff = nfbi (step 15, step 16) |- F/ x ( z ∈ y ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ;;
	step 18 : wff = nfal (step 17) |- F/ x ∀ z ( z ∈ y ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ;;
	step 19 : wff = nfv () |- F/ y ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ;;
	step 20 : wff = elequ2 () |- ( y = x → ( z ∈ y ↔ z ∈ x ) ) ;;
	step 21 : wff = nfv () |- F/ y ph ;;
	step 22 : wff = 19.3 (step 21) |- ( ∀ y ph ↔ ph ) ;;
	step 23 : wff = anbi2i (step 22) |- ( ( x ∈ w ∧ ∀ y ph ) ↔ ( x ∈ w ∧ ph ) ) ;;
	step 24 : wff = exbii (step 23) |- ( ∃ x ( x ∈ w ∧ ∀ y ph ) ↔ ∃ x ( x ∈ w ∧ ph ) ) ;;
	step 25 : wff = a1i (step 24) |- ( y = x → ( ∃ x ( x ∈ w ∧ ∀ y ph ) ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 26 : wff = bibi12d (step 20, step 25) |- ( y = x → ( ( z ∈ y ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ↔ ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ) ;;
	step 27 : wff = albidv (step 26) |- ( y = x → ( ∀ z ( z ∈ y ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ↔ ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ) ;;
	step 28 : wff = cbvex (step 18, step 19, step 27) |- ( ∃ y ∀ z ( z ∈ y ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ↔ ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 29 : wff = 3imtr3i (step 8, step 14, step 28) |- ( ∀ x ∃ y ∀ z ( ph → z = y ) → ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 30 : wff = chvarv (step 7, step 29) |- ( ∀ x ∃ y ∀ z ( ph → z = y ) → ∃ x ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ;;
	step 31 : wff = 19.35ri (step 30) |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ph ) ) ) ;;
	qed prop 1 = step 31 ;;
}

/* Axiom of Replacement expressed with the fewest number of different
       variables and without any restrictions on ` ph ` .  (Contributed by NM,
       15-Aug-2003.) */

theorem axrep2 (ph : wff, x : set, y : set, z : set) disjointed(w ph, w x y z) {
	prop 1 : wff = |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
}

proof of axrep2 {
	var w : set;;
	step 1 : wff = nfe1 () |- F/ w ∃ w ∀ z ( ∀ y ph → z = w ) ;;
	step 2 : wff = nfv () |- F/ w ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ;;
	step 3 : wff = nfim (step 1, step 2) |- F/ w ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	step 4 : wff = nfex (step 3) |- F/ w ∃ x ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	step 5 : wff = elequ2 () |- ( w = y → ( x ∈ w ↔ x ∈ y ) ) ;;
	step 6 : wff = anbi1d (step 5) |- ( w = y → ( ( x ∈ w ∧ ∀ y ph ) ↔ ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	step 7 : wff = exbidv (step 6) |- ( w = y → ( ∃ x ( x ∈ w ∧ ∀ y ph ) ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	step 8 : wff = bibi2d (step 7) |- ( w = y → ( ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ↔ ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ) ;;
	step 9 : wff = albidv (step 8) |- ( w = y → ( ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ↔ ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ) ;;
	step 10 : wff = imbi2d (step 9) |- ( w = y → ( ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ↔ ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ) ) ;;
	step 11 : wff = exbidv (step 10) |- ( w = y → ( ∃ x ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ↔ ∃ x ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ) ) ;;
	step 12 : wff = axrep1 () |- ∃ x ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	step 13 : wff = chvar (step 4, step 11, step 12) |- ∃ x ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	step 14 : wff = sp () |- ( ∀ y ph → ph ) ;;
	step 15 : wff = imim1i (step 14) |- ( ( ph → z = y ) → ( ∀ y ph → z = y ) ) ;;
	step 16 : wff = alimi (step 15) |- ( ∀ z ( ph → z = y ) → ∀ z ( ∀ y ph → z = y ) ) ;;
	step 17 : wff = eximi (step 16) |- ( ∃ y ∀ z ( ph → z = y ) → ∃ y ∀ z ( ∀ y ph → z = y ) ) ;;
	step 18 : wff = nfv () |- F/ w ∀ z ( ∀ y ph → z = y ) ;;
	step 19 : wff = nfa1 () |- F/ y ∀ y ph ;;
	step 20 : wff = nfv () |- F/ y z = w ;;
	step 21 : wff = nfim (step 19, step 20) |- F/ y ( ∀ y ph → z = w ) ;;
	step 22 : wff = nfal (step 21) |- F/ y ∀ z ( ∀ y ph → z = w ) ;;
	step 23 : wff = equequ2 () |- ( y = w → ( z = y ↔ z = w ) ) ;;
	step 24 : wff = imbi2d (step 23) |- ( y = w → ( ( ∀ y ph → z = y ) ↔ ( ∀ y ph → z = w ) ) ) ;;
	step 25 : wff = albidv (step 24) |- ( y = w → ( ∀ z ( ∀ y ph → z = y ) ↔ ∀ z ( ∀ y ph → z = w ) ) ) ;;
	step 26 : wff = cbvex (step 18, step 22, step 25) |- ( ∃ y ∀ z ( ∀ y ph → z = y ) ↔ ∃ w ∀ z ( ∀ y ph → z = w ) ) ;;
	step 27 : wff = sylib (step 17, step 26) |- ( ∃ y ∀ z ( ph → z = y ) → ∃ w ∀ z ( ∀ y ph → z = w ) ) ;;
	step 28 : wff = imim1i (step 27) |- ( ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) → ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ) ;;
	step 29 : wff = eximi (step 28) |- ( ∃ x ( ∃ w ∀ z ( ∀ y ph → z = w ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) → ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ) ;;
	step 30 : wff = ax-mp (step 13, step 29) |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	qed prop 1 = step 30 ;;
}

/* Axiom of Replacement slightly strengthened from ~ axrep2 ; ` w ` may
       occur free in ` ph ` .  (Contributed by NM, 2-Jan-1997.) */

theorem axrep3 (ph : wff, x : set, y : set, z : set, w : set) disjointed(w x y z) {
	prop 1 : wff = |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
}

proof of axrep3 {
	step 1 : wff = nfe1 () |- F/ y ∃ y ∀ z ( ph → z = y ) ;;
	step 2 : wff = nfv () |- F/ y z ∈ x ;;
	step 3 : wff = nfv () |- F/ y x ∈ w ;;
	step 4 : wff = nfa1 () |- F/ y ∀ y ph ;;
	step 5 : wff = nfan (step 3, step 4) |- F/ y ( x ∈ w ∧ ∀ y ph ) ;;
	step 6 : wff = nfex (step 5) |- F/ y ∃ x ( x ∈ w ∧ ∀ y ph ) ;;
	step 7 : wff = nfbi (step 2, step 6) |- F/ y ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ;;
	step 8 : wff = nfal (step 7) |- F/ y ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ;;
	step 9 : wff = nfim (step 1, step 8) |- F/ y ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	step 10 : wff = nfex (step 9) |- F/ y ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	step 11 : wff = elequ2 () |- ( y = w → ( x ∈ y ↔ x ∈ w ) ) ;;
	step 12 : wff = anbi1d (step 11) |- ( y = w → ( ( x ∈ y ∧ ∀ y ph ) ↔ ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	step 13 : wff = exbidv (step 12) |- ( y = w → ( ∃ x ( x ∈ y ∧ ∀ y ph ) ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	step 14 : wff = bibi2d (step 13) |- ( y = w → ( ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ↔ ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ) ;;
	step 15 : wff = albidv (step 14) |- ( y = w → ( ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ↔ ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ) ;;
	step 16 : wff = imbi2d (step 15) |- ( y = w → ( ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ↔ ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ) ) ;;
	step 17 : wff = exbidv (step 16) |- ( y = w → ( ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ↔ ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ) ) ;;
	step 18 : wff = axrep2 () |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ y ∧ ∀ y ph ) ) ) ;;
	step 19 : wff = chvar (step 10, step 17, step 18) |- ∃ x ( ∃ y ∀ z ( ph → z = y ) → ∀ z ( z ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ y ph ) ) ) ;;
	qed prop 1 = step 19 ;;
}

/* A more traditional version of the Axiom of Replacement.  (Contributed by
       NM, 14-Aug-1994.) */

theorem axrep4 (ph : wff, x : set, y : set, z : set, w : set) disjointed(x y z w) {
	hyp 1 : wff = |- F/ z ph ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ∃ z ∀ y ( ph → y = z ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
}

proof of axrep4 {
	step 1 : wff = axrep3 () |- ∃ x ( ∃ z ∀ y ( ph → y = z ) → ∀ y ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ) ;;
	step 2 : wff = 19.35i (step 1) |- ( ∀ x ∃ z ∀ y ( ph → y = z ) → ∃ x ∀ y ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ) ;;
	step 3 : wff = nfv () |- F/ z y ∈ x ;;
	step 4 : wff = nfv () |- F/ z x ∈ w ;;
	step 5 : wff = nfa1 () |- F/ z ∀ z ph ;;
	step 6 : wff = nfan (step 4, step 5) |- F/ z ( x ∈ w ∧ ∀ z ph ) ;;
	step 7 : wff = nfex (step 6) |- F/ z ∃ x ( x ∈ w ∧ ∀ z ph ) ;;
	step 8 : wff = nfbi (step 3, step 7) |- F/ z ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ;;
	step 9 : wff = nfal (step 8) |- F/ z ∀ y ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ;;
	step 10 : wff = nfv () |- F/ x y ∈ z ;;
	step 11 : wff = nfe1 () |- F/ x ∃ x ( x ∈ w ∧ ph ) ;;
	step 12 : wff = nfbi (step 10, step 11) |- F/ x ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ;;
	step 13 : wff = nfal (step 12) |- F/ x ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ;;
	step 14 : wff = elequ2 () |- ( x = z → ( y ∈ x ↔ y ∈ z ) ) ;;
	step 15 : wff = 19.3 (hyp 1) |- ( ∀ z ph ↔ ph ) ;;
	step 16 : wff = anbi2i (step 15) |- ( ( x ∈ w ∧ ∀ z ph ) ↔ ( x ∈ w ∧ ph ) ) ;;
	step 17 : wff = exbii (step 16) |- ( ∃ x ( x ∈ w ∧ ∀ z ph ) ↔ ∃ x ( x ∈ w ∧ ph ) ) ;;
	step 18 : wff = a1i (step 17) |- ( x = z → ( ∃ x ( x ∈ w ∧ ∀ z ph ) ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 19 : wff = bibi12d (step 14, step 18) |- ( x = z → ( ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ↔ ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ) ;;
	step 20 : wff = albidv (step 19) |- ( x = z → ( ∀ y ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ↔ ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ) ;;
	step 21 : wff = cbvex (step 9, step 13, step 20) |- ( ∃ x ∀ y ( y ∈ x ↔ ∃ x ( x ∈ w ∧ ∀ z ph ) ) ↔ ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 22 : wff = sylib (step 2, step 21) |- ( ∀ x ∃ z ∀ y ( ph → y = z ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	qed prop 1 = step 22 ;;
}

/* Axiom of Replacement (similar to Axiom Rep of [BellMachover] p. 463).
       The antecedent tells us ` ph ` is analogous to a "function" from ` x `
       to ` y ` (although it is not really a function since it is a wff and not
       a class).  In the consequent we postulate the existence of a set ` z `
       that corresponds to the "image" of ` ph ` restricted to some other set
       ` w ` .  The hypothesis says ` z ` must not be free in ` ph ` .
       (Contributed by NM, 26-Nov-1995.)  (Revised by Mario Carneiro,
       14-Oct-2016.) */

theorem axrep5 (ph : wff, x : set, y : set, z : set, w : set) disjointed(x y z w) {
	hyp 1 : wff = |- F/ z ph ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ( x ∈ w → ∃ z ∀ y ( ph → y = z ) ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
}

proof of axrep5 {
	step 1 : wff = 19.37v () |- ( ∃ z ( x ∈ w → ∀ y ( ph → y = z ) ) ↔ ( x ∈ w → ∃ z ∀ y ( ph → y = z ) ) ) ;;
	step 2 : wff = impexp () |- ( ( ( x ∈ w ∧ ph ) → y = z ) ↔ ( x ∈ w → ( ph → y = z ) ) ) ;;
	step 3 : wff = albii (step 2) |- ( ∀ y ( ( x ∈ w ∧ ph ) → y = z ) ↔ ∀ y ( x ∈ w → ( ph → y = z ) ) ) ;;
	step 4 : wff = 19.21v () |- ( ∀ y ( x ∈ w → ( ph → y = z ) ) ↔ ( x ∈ w → ∀ y ( ph → y = z ) ) ) ;;
	step 5 : wff = bitr2i (step 3, step 4) |- ( ( x ∈ w → ∀ y ( ph → y = z ) ) ↔ ∀ y ( ( x ∈ w ∧ ph ) → y = z ) ) ;;
	step 6 : wff = exbii (step 5) |- ( ∃ z ( x ∈ w → ∀ y ( ph → y = z ) ) ↔ ∃ z ∀ y ( ( x ∈ w ∧ ph ) → y = z ) ) ;;
	step 7 : wff = bitr3i (step 1, step 6) |- ( ( x ∈ w → ∃ z ∀ y ( ph → y = z ) ) ↔ ∃ z ∀ y ( ( x ∈ w ∧ ph ) → y = z ) ) ;;
	step 8 : wff = albii (step 7) |- ( ∀ x ( x ∈ w → ∃ z ∀ y ( ph → y = z ) ) ↔ ∀ x ∃ z ∀ y ( ( x ∈ w ∧ ph ) → y = z ) ) ;;
	step 9 : wff = nfv () |- F/ z x ∈ w ;;
	step 10 : wff = nfan (step 9, hyp 1) |- F/ z ( x ∈ w ∧ ph ) ;;
	step 11 : wff = axrep4 (step 10) |- ( ∀ x ∃ z ∀ y ( ( x ∈ w ∧ ph ) → y = z ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ) ) ;;
	step 12 : wff = sylbi (step 8, step 11) |- ( ∀ x ( x ∈ w → ∃ z ∀ y ( ph → y = z ) ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ) ) ;;
	step 13 : wff = anabs5 () |- ( ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ↔ ( x ∈ w ∧ ph ) ) ;;
	step 14 : wff = exbii (step 13) |- ( ∃ x ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ↔ ∃ x ( x ∈ w ∧ ph ) ) ;;
	step 15 : wff = bibi2i (step 14) |- ( ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ) ↔ ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 16 : wff = albii (step 15) |- ( ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ) ↔ ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 17 : wff = exbii (step 16) |- ( ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ( x ∈ w ∧ ph ) ) ) ↔ ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	step 18 : wff = sylib (step 12, step 17) |- ( ∀ x ( x ∈ w → ∃ z ∀ y ( ph → y = z ) ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ w ∧ ph ) ) ) ;;
	qed prop 1 = step 18 ;;
}

/* An inference rule based on the Axiom of Replacement.  Typically, ` ph `
       defines a function from ` x ` to ` y ` .  (Contributed by NM,
       26-Nov-1995.) */

theorem zfrepclf (ph : wff, x : set, y : set, z : set, A : class) disjointed(y z A v, z ph v, A v, x y z v, x v) {
	hyp 1 : wff = |- F/_ x A ;;
	hyp 2 : wff = |- A ∈ _V ;;
	hyp 3 : wff = |- ( x ∈ A → ∃ z ∀ y ( ph → y = z ) ) ;;
	-----------------------
	prop 1 : wff = |- ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ;;
}

proof of zfrepclf {
	var v : set;;
	step 1 : wff = nfeq2 (hyp 1) |- F/ x v = A ;;
	step 2 : wff = eleq2 () |- ( v = A → ( x ∈ v ↔ x ∈ A ) ) ;;
	step 3 : wff = syl6bi (step 2, hyp 3) |- ( v = A → ( x ∈ v → ∃ z ∀ y ( ph → y = z ) ) ) ;;
	step 4 : wff = alrimi (step 1, step 3) |- ( v = A → ∀ x ( x ∈ v → ∃ z ∀ y ( ph → y = z ) ) ) ;;
	step 5 : wff = nfv () |- F/ z ph ;;
	step 6 : wff = axrep5 (step 5) |- ( ∀ x ( x ∈ v → ∃ z ∀ y ( ph → y = z ) ) → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ v ∧ ph ) ) ) ;;
	step 7 : wff = syl (step 4, step 6) |- ( v = A → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ v ∧ ph ) ) ) ;;
	step 8 : wff = nfeq2 (hyp 1) |- F/ x v = A ;;
	step 9 : wff = eleq2 () |- ( v = A → ( x ∈ v ↔ x ∈ A ) ) ;;
	step 10 : wff = anbi1d (step 9) |- ( v = A → ( ( x ∈ v ∧ ph ) ↔ ( x ∈ A ∧ ph ) ) ) ;;
	step 11 : wff = exbid (step 8, step 10) |- ( v = A → ( ∃ x ( x ∈ v ∧ ph ) ↔ ∃ x ( x ∈ A ∧ ph ) ) ) ;;
	step 12 : wff = bibi2d (step 11) |- ( v = A → ( ( y ∈ z ↔ ∃ x ( x ∈ v ∧ ph ) ) ↔ ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ) ) ;;
	step 13 : wff = albidv (step 12) |- ( v = A → ( ∀ y ( y ∈ z ↔ ∃ x ( x ∈ v ∧ ph ) ) ↔ ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ) ) ;;
	step 14 : wff = exbidv (step 13) |- ( v = A → ( ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ v ∧ ph ) ) ↔ ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ) ) ;;
	step 15 : wff = mpbid (step 7, step 14) |- ( v = A → ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ) ;;
	step 16 : wff = vtocle (hyp 2, step 15) |- ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ;;
	qed prop 1 = step 16 ;;
}

/* An inference rule based on the Axiom of Replacement.  Typically, ` ph `
       defines a function from ` x ` to ` y ` .  (Contributed by NM,
       26-Nov-1995.) */

theorem zfrep3cl (ph : wff, x : set, y : set, z : set, A : class) disjointed(x y z A, z ph) {
	hyp 1 : wff = |- A ∈ _V ;;
	hyp 2 : wff = |- ( x ∈ A → ∃ z ∀ y ( ph → y = z ) ) ;;
	-----------------------
	prop 1 : wff = |- ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ;;
}

proof of zfrep3cl {
	step 1 : wff = nfcv () |- F/_ x A ;;
	step 2 : wff = zfrepclf (step 1, hyp 1, hyp 2) |- ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ A ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A version of Replacement using class abstractions.  (Contributed by NM,
       26-Nov-1995.) */

theorem zfrep4 (ph : wff, ps : wff, x : set, y : set, z : set) disjointed(ph y z, ps z, x y z) {
	hyp 1 : wff = |- { x | ph } ∈ _V ;;
	hyp 2 : wff = |- ( ph → ∃ z ∀ y ( ps → y = z ) ) ;;
	-----------------------
	prop 1 : wff = |- { y | ∃ x ( ph ∧ ps ) } ∈ _V ;;
}

proof of zfrep4 {
	step 1 : wff = abid () |- ( x ∈ { x | ph } ↔ ph ) ;;
	step 2 : wff = anbi1i (step 1) |- ( ( x ∈ { x | ph } ∧ ps ) ↔ ( ph ∧ ps ) ) ;;
	step 3 : wff = exbii (step 2) |- ( ∃ x ( x ∈ { x | ph } ∧ ps ) ↔ ∃ x ( ph ∧ ps ) ) ;;
	step 4 : wff = abbii (step 3) |- { y | ∃ x ( x ∈ { x | ph } ∧ ps ) } = { y | ∃ x ( ph ∧ ps ) } ;;
	step 5 : wff = nfab1 () |- F/_ x { x | ph } ;;
	step 6 : wff = abid () |- ( x ∈ { x | ph } ↔ ph ) ;;
	step 7 : wff = sylbi (step 6, hyp 2) |- ( x ∈ { x | ph } → ∃ z ∀ y ( ps → y = z ) ) ;;
	step 8 : wff = zfrepclf (step 5, hyp 1, step 7) |- ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ { x | ph } ∧ ps ) ) ;;
	step 9 : wff = abeq2 () |- ( z = { y | ∃ x ( x ∈ { x | ph } ∧ ps ) } ↔ ∀ y ( y ∈ z ↔ ∃ x ( x ∈ { x | ph } ∧ ps ) ) ) ;;
	step 10 : wff = exbii (step 9) |- ( ∃ z z = { y | ∃ x ( x ∈ { x | ph } ∧ ps ) } ↔ ∃ z ∀ y ( y ∈ z ↔ ∃ x ( x ∈ { x | ph } ∧ ps ) ) ) ;;
	step 11 : wff = mpbir (step 8, step 10) |- ∃ z z = { y | ∃ x ( x ∈ { x | ph } ∧ ps ) } ;;
	step 12 : wff = issetri (step 11) |- { y | ∃ x ( x ∈ { x | ph } ∧ ps ) } ∈ _V ;;
	step 13 : wff = eqeltrri (step 4, step 12) |- { y | ∃ x ( ph ∧ ps ) } ∈ _V ;;
	qed prop 1 = step 13 ;;
}


