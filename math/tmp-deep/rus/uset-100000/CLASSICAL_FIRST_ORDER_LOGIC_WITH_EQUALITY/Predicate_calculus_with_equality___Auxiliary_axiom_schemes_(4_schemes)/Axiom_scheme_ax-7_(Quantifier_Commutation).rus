import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Predicate_calculus_with_equality___Auxiliary_axiom_schemes_(4_schemes)/Axiom_scheme_ax-6_(Quantified_Negation).rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            Axiom scheme ax-7 (Quantifier Commutation)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Axiom of Quantifier Commutation.  This axiom says universal quantifiers
     can be swapped.  One of the 4 axioms of pure predicate calculus.  Axiom
     scheme C6' in [Megill] p. 448 (p. 16 of the preprint).  Also appears as
     Lemma 12 of [Monk2] p. 109 and Axiom C5-3 of [Monk2] p. 113.  This axiom
     scheme is logically redundant (see ~ ax7w ) but is used as an auxiliary
     axiom to achieve metalogical completeness.  (Contributed by NM,
     5-Aug-1993.) */

axiom ax-7 (ph : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∀ x ∀ y ph → ∀ y ∀ x ph ) ;;
}

/* Swap quantifiers in an antecedent.  (Contributed by NM, 5-Aug-1993.) */

theorem a7s (ph : wff, ps : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ∀ x ∀ y ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ y ∀ x ph → ps ) ;;
}

proof of a7s {
	step 1 : wff = ax-7 () |- ( ∀ y ∀ x ph → ∀ x ∀ y ph ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ∀ y ∀ x ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* If ` x ` is not free in ` ph ` , it is not free in ` A. y ph ` .
       (Contributed by NM, 5-Aug-1993.) */

theorem hbal (ph : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ y ph → ∀ x ∀ y ph ) ;;
}

proof of hbal {
	step 1 : wff = alimi (hyp 1) |- ( ∀ y ph → ∀ y ∀ x ph ) ;;
	step 2 : wff = ax-7 () |- ( ∀ y ∀ x ph → ∀ x ∀ y ph ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ∀ y ph → ∀ x ∀ y ph ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem 19.5 of [Margaris] p. 89.  (Contributed by NM, 5-Aug-1993.) */

theorem alcom (ph : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∀ x ∀ y ph ↔ ∀ y ∀ x ph ) ;;
}

proof of alcom {
	step 1 : wff = ax-7 () |- ( ∀ x ∀ y ph → ∀ y ∀ x ph ) ;;
	step 2 : wff = ax-7 () |- ( ∀ y ∀ x ph → ∀ x ∀ y ph ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ∀ x ∀ y ph ↔ ∀ y ∀ x ph ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *11.21 in [WhiteheadRussell] p. 160.  (Contributed by Andrew
     Salmon, 24-May-2011.) */

theorem alrot3 (ph : wff, x : set, y : set, z : set)  {
	prop 1 : wff = |- ( ∀ x ∀ y ∀ z ph ↔ ∀ y ∀ z ∀ x ph ) ;;
}

proof of alrot3 {
	step 1 : wff = alcom () |- ( ∀ x ∀ y ∀ z ph ↔ ∀ y ∀ x ∀ z ph ) ;;
	step 2 : wff = alcom () |- ( ∀ x ∀ z ph ↔ ∀ z ∀ x ph ) ;;
	step 3 : wff = albii (step 2) |- ( ∀ y ∀ x ∀ z ph ↔ ∀ y ∀ z ∀ x ph ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ∀ x ∀ y ∀ z ph ↔ ∀ y ∀ z ∀ x ph ) ;;
	qed prop 1 = step 4 ;;
}

/* Rotate 4 universal quantifiers twice.  (Contributed by NM, 2-Feb-2005.)
     (Proof shortened by Fan Zheng, 6-Jun-2016.) */

theorem alrot4 (ph : wff, x : set, y : set, z : set, w : set)  {
	prop 1 : wff = |- ( ∀ x ∀ y ∀ z ∀ w ph ↔ ∀ z ∀ w ∀ x ∀ y ph ) ;;
}

proof of alrot4 {
	step 1 : wff = alrot3 () |- ( ∀ y ∀ z ∀ w ph ↔ ∀ z ∀ w ∀ y ph ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ∀ y ∀ z ∀ w ph ↔ ∀ x ∀ z ∀ w ∀ y ph ) ;;
	step 3 : wff = alrot3 () |- ( ∀ x ∀ z ∀ w ∀ y ph ↔ ∀ z ∀ w ∀ x ∀ y ph ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ∀ y ∀ z ∀ w ph ↔ ∀ z ∀ w ∀ x ∀ y ph ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduction form of bound-variable hypothesis builder ~ hbal .
       (Contributed by NM, 2-Jan-2002.) */

theorem hbald (ph : wff, ps : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ph → ∀ y ph ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ∀ x ps ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ∀ y ps → ∀ x ∀ y ps ) ) ;;
}

proof of hbald {
	step 1 : wff = alimdh (hyp 1, hyp 2) |- ( ph → ( ∀ y ps → ∀ y ∀ x ps ) ) ;;
	step 2 : wff = ax-7 () |- ( ∀ y ∀ x ps → ∀ x ∀ y ps ) ;;
	step 3 : wff = syl6 (step 1, step 2) |- ( ph → ( ∀ y ps → ∀ x ∀ y ps ) ) ;;
	qed prop 1 = step 3 ;;
}


