import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Existential_uniqueness.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Predicate calculus with all distinct variables

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/*Distinct variable version of ~ ax-7 .  (Contributed by Mario Carneiro,
       14-Aug-2015.) */

axiom ax-7d (ph : wff, x : set, y : set) disjointed(x y) {
	prop 1 : wff = |- ( ∀ x ∀ y ph → ∀ y ∀ x ph ) ;;
}

/*Distinct variable version of ~ ax-8 .  (Contributed by Mario Carneiro,
       14-Aug-2015.) */

axiom ax-8d (x : set, y : set, z : set) disjointed(x y z) {
	prop 1 : wff = |- ( x = y → ( x = z → y = z ) ) ;;
}

/*Distinct variable version of ~ ax9 , equal variables case.  (Contributed
       by Mario Carneiro, 14-Aug-2015.) */

axiom ax-9d1 (x : set) disjointed(x) {
	prop 1 : wff = |- ¬ ∀ x ¬ x = x ;;
}

/*Distinct variable version of ~ ax9 , distinct variables case.
       (Contributed by Mario Carneiro, 14-Aug-2015.) */

axiom ax-9d2 (x : set, y : set) disjointed(x y) {
	prop 1 : wff = |- ¬ ∀ x ¬ x = y ;;
}

/*Distinct variable version of ~ ax10 .  (Contributed by Mario Carneiro,
       14-Aug-2015.) */

axiom ax-10d (x : set, y : set) disjointed(x y) {
	prop 1 : wff = |- ( ∀ x x = y → ∀ y y = x ) ;;
}

/*Distinct variable version of ~ ax-11 .  (Contributed by Mario Carneiro,
       14-Aug-2015.) */

axiom ax-11d (ph : wff, x : set, y : set) disjointed(x y) {
	prop 1 : wff = |- ( x = y → ( ∀ y ph → ∀ x ( x = y → ph ) ) ) ;;
}


