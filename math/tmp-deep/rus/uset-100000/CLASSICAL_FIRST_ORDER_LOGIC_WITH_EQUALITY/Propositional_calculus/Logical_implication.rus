import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Propositional_calculus/The_axioms_of_propositional_calculus.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Logical implication

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  The results in this section are based on implication only, and avoid ax-3.
  In an implication, the wff before the arrow is called the "antecedent" and
  the wff after the arrow is called the "consequent."

  We will use the following descriptive terms very loosely:  A "closed form" or
  "tautology" has no $e hypotheses.  An "inference" has one or more $e
  hypotheses.  A "deduction" is an inference in which the hypotheses and the
  conclusion share the same antecedent.

*/

/*A double modus ponens inference.  (Contributed by Mario Carneiro,
       24-Jan-2013.) */

theorem mp2b (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ph → ps ) ;;
	hyp 3 : wff = |- ( ps → ch ) ;;
	-----------------------
	prop 1 : wff = |- ch ;;
}

proof of mp2b {
	step 1 : wff = ax-mp (hyp 1, hyp 2) |- ps ;;
	step 2 : wff = ax-mp (step 1, hyp 3) |- ch ;;
	qed prop 1 = step 2 ;;
}

/*Premise for ~ a1i . */

/*Inference derived from axiom ~ ax-1 .  See ~ a1d for an explanation of
       our informal use of the terms "inference" and "deduction."  See also the
       comment in ~ syld .  (Contributed by NM, 5-Aug-1993.) */

theorem a1i (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ps → ph ) ;;
}

proof of a1i {
	step 1 : wff = ax-1 () |- ( ph → ( ps → ph ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ps → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Drop and replace an antecedent.  (Contributed by Stefan O'Rear,
       29-Jan-2015.) */

theorem mp1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ps ) ;;
}

proof of mp1i {
	step 1 : wff = ax-mp (hyp 1, hyp 2) |- ps ;;
	step 2 : wff = a1i (step 1) |- ( ch → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Premise for ~ a2i . */

/*Inference derived from axiom ~ ax-2 .  (Contributed by NM,
       5-Aug-1993.) */

theorem a2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph → ps ) → ( ph → ch ) ) ;;
}

proof of a2i {
	step 1 : wff = ax-2 () |- ( ( ph → ( ps → ch ) ) → ( ( ph → ps ) → ( ph → ch ) ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ( ph → ps ) → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference adding common antecedents in an implication.  (Contributed by
       NM, 5-Aug-1993.) */

theorem imim2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch → ph ) → ( ch → ps ) ) ;;
}

proof of imim2i {
	step 1 : wff = a1i (hyp 1) |- ( ch → ( ph → ps ) ) ;;
	step 2 : wff = a2i (step 1) |- ( ( ch → ph ) → ( ch → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A modus ponens deduction.  A translation of natural deduction rule
       ` -> ` E ( ` -> ` elimination), see ~ natded .  (Contributed by NM,
       5-Aug-1993.) */

theorem mpd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of mpd {
	step 1 : wff = a2i (hyp 2) |- ( ( ph → ps ) → ( ph → ch ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*First of 2 premises for ~ syl . */

/*Second of 2 premises for ~ syl . */

/*An inference version of the transitive laws for implication ~ imim2 and
       ~ imim1 , which Russell and Whitehead call "the principle of the
       syllogism...because...the syllogism in Barbara is derived from them"
       (quote after Theorem *2.06 of [WhiteheadRussell] p. 101).  Some authors
       call this law a "hypothetical syllogism."

       (A bit of trivia: this is the most commonly referenced assertion in our
       database.  In second place is ~ eqid , followed by ~ syl2anc ,
       ~ adantr , ~ syl3anc , and ~ ax-mp .  The Metamath program command 'show
       usage' shows the number of references.)  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by O'Cat, 20-Oct-2011.)  (Proof shortened
       by Wolf Lammen, 26-Jul-2012.) */

theorem syl (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ps → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of syl {
	step 1 : wff = a1i (hyp 2) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = mpd (hyp 1, step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested modus ponens inference.  (Contributed by NM, 5-Aug-1993.)
       (Proof shortened by Stefan Allan, 20-Mar-2006.) */

theorem mpi (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of mpi {
	step 1 : wff = a1i (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = mpd (step 1, hyp 2) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*A double modus ponens inference.  (Contributed by NM, 5-Apr-1994.)
       (Proof shortened by Wolf Lammen, 23-Jul-2013.) */

theorem mp2 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ch ;;
}

proof of mp2 {
	step 1 : wff = mpi (hyp 2, hyp 3) |- ( ph → ch ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ch ;;
	qed prop 1 = step 2 ;;
}

/*Inference chaining two syllogisms.  (Contributed by NM, 5-Aug-1993.) */

theorem 3syl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ps → ch ) ;;
	hyp 3 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of 3syl {
	step 1 : wff = syl (hyp 1, hyp 2) |- ( ph → ch ) ;;
	step 2 : wff = syl (step 1, hyp 3) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Principle of identity.  Theorem *2.08 of [WhiteheadRussell] p. 101.  For
     another version of the proof directly from axioms, see ~ id1 .
     (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Stefan Allan,
     20-Mar-2006.) */

theorem id (ph : wff)  {
	prop 1 : wff = |- ( ph → ph ) ;;
}

proof of id {
	step 1 : wff = ax-1 () |- ( ph → ( ph → ph ) ) ;;
	step 2 : wff = ax-1 () |- ( ph → ( ( ph → ph ) → ph ) ) ;;
	step 3 : wff = mpd (step 1, step 2) |- ( ph → ph ) ;;
	qed prop 1 = step 3 ;;
}

/*Principle of identity.  Theorem *2.08 of [WhiteheadRussell] p. 101.  This
     version is proved directly from the axioms for demonstration purposes.
     This proof is a popular example in the literature and is identical, step
     for step, to the proofs of Theorem 1 of [Margaris] p. 51, Example 2.7(a)
     of [Hamilton] p. 31, Lemma 10.3 of [BellMachover] p. 36, and Lemma 1.8 of
     [Mendelson] p. 36.  It is also "Our first proof" in Hirst and Hirst's _A
     Primer for Logic and Proof_ p. 17 (PDF p. 23) at
     ~ http://www.mathsci.appstate.edu/~~hirstjl/primer/hirst.pdf .  For a
     shorter version of the proof that takes advantage of previously proved
     theorems, see ~ id .  (Contributed by NM, 5-Aug-1993.)
     (New usage is discouraged.)  (Proof modification is discouraged.) */

theorem id1 (ph : wff)  {
	prop 1 : wff = |- ( ph → ph ) ;;
}

proof of id1 {
	step 1 : wff = ax-1 () |- ( ph → ( ph → ph ) ) ;;
	step 2 : wff = ax-1 () |- ( ph → ( ( ph → ph ) → ph ) ) ;;
	step 3 : wff = ax-2 () |- ( ( ph → ( ( ph → ph ) → ph ) ) → ( ( ph → ( ph → ph ) ) → ( ph → ph ) ) ) ;;
	step 4 : wff = ax-mp (step 2, step 3) |- ( ( ph → ( ph → ph ) ) → ( ph → ph ) ) ;;
	step 5 : wff = ax-mp (step 1, step 4) |- ( ph → ph ) ;;
	qed prop 1 = step 5 ;;
}

/*Principle of identity with antecedent.  (Contributed by NM,
     26-Nov-1995.) */

theorem idd (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps → ps ) ) ;;
}

proof of idd {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = a1i (step 1) |- ( ph → ( ps → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction introducing an embedded antecedent.

       _Naming convention_:  We often call a theorem a "deduction" and suffix
       its label with "d" whenever the hypotheses and conclusion are each
       prefixed with the same antecedent.  This allows us to use the theorem in
       places where (in traditional textbook formalizations) the standard
       Deduction Theorem would be used; here ` ph ` would be replaced with a
       conjunction ( ~ df-an ) of the hypotheses of the would-be deduction.  By
       contrast, we tend to call the simpler version with no common antecedent
       an "inference" and suffix its label with "i"; compare theorem ~ a1i .
       Finally, a "theorem" would be the form with no hypotheses; in this case
       the "theorem" form would be the original axiom ~ ax-1 .  We usually show
       the theorem form without a suffix on its label (e.g. ~ pm2.43 vs.
       ~ pm2.43i vs. ~ pm2.43d ).  When an inference is converted to a theorem
       by eliminating an "is a set" hypothesis, we sometimes suffix the theorem
       form with "g" (for "more general") as in ~ uniex vs. ~ uniexg .
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Stefan Allan,
       20-Mar-2006.) */

theorem a1d (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → ps ) ) ;;
}

proof of a1d {
	step 1 : wff = ax-1 () |- ( ps → ( ch → ps ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ch → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction distributing an embedded antecedent.  (Contributed by NM,
       23-Jun-1994.) */

theorem a2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps → ch ) → ( ps → th ) ) ) ;;
}

proof of a2d {
	step 1 : wff = ax-2 () |- ( ( ps → ( ch → th ) ) → ( ( ps → ch ) → ( ps → th ) ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ( ps → ch ) → ( ps → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Add two antecedents to a wff.  (Contributed by Jeff Hankins,
       4-Aug-2009.)  (Proof shortened by Wolf Lammen, 23-Jul-2013.) */

theorem a1ii (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ch ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ch ) ) ;;
}

proof of a1ii {
	step 1 : wff = a1i (hyp 1) |- ( ph → ch ) ;;
	step 2 : wff = a1d (step 1) |- ( ph → ( ps → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism inference with commutation of antecedents.  (Contributed by
       NM, 29-Aug-2004.)  (Proof shortened by O'Cat, 2-Feb-2006.)  (Proof
       shortened by Stefan Allan, 23-Feb-2006.) */

theorem sylcom (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ps → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of sylcom {
	step 1 : wff = a2i (hyp 2) |- ( ( ps → ch ) → ( ps → th ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism inference with commuted antecedents.  (Contributed by NM,
       24-May-2005.) */

theorem syl5com (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ( ps → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → th ) ) ;;
}

proof of syl5com {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( ch → ps ) ) ;;
	step 2 : wff = sylcom (step 1, hyp 2) |- ( ph → ( ch → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Premise for ~ com12 .  See ~ pm2.04 for the theorem form. */

/*Inference that swaps (commutes) antecedents in an implication.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen,
       4-Aug-2012.) */

theorem com12 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ph → ch ) ) ;;
}

proof of com12 {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = syl5com (step 1, hyp 1) |- ( ps → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism rule of inference.  The first premise is used to replace the
       second antecedent of the second premise.  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by Wolf Lammen, 25-May-2013.) */

theorem syl5 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ( ps → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( ph → th ) ) ;;
}

proof of syl5 {
	step 1 : wff = syl5com (hyp 1, hyp 2) |- ( ph → ( ch → th ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ch → ( ph → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism rule of inference.  The second premise is used to replace
       the consequent of the first premise.  (Contributed by NM, 5-Aug-1993.)
       (Proof shortened by Wolf Lammen, 30-Jul-2012.) */

theorem syl6 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of syl6 {
	step 1 : wff = a1i (hyp 2) |- ( ps → ( ch → th ) ) ;;
	step 2 : wff = sylcom (hyp 1, step 1) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Combine ~ syl5 and ~ syl6 .  (Contributed by NM, 14-Nov-2013.) */

theorem syl56 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ( ps → th ) ) ;;
	hyp 3 : wff = |- ( th → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( ph → ta ) ) ;;
}

proof of syl56 {
	step 1 : wff = syl6 (hyp 2, hyp 3) |- ( ch → ( ps → ta ) ) ;;
	step 2 : wff = syl5 (hyp 1, step 1) |- ( ch → ( ph → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism inference with commuted antecedents.  (Contributed by NM,
       25-May-2005.) */

theorem syl6com (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ph → th ) ) ;;
}

proof of syl6com {
	step 1 : wff = syl6 (hyp 1, hyp 2) |- ( ph → ( ps → th ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ps → ( ph → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Modus ponens inference with commutation of antecedents.  (Contributed by
       NM, 17-Mar-1996.) */

theorem mpcom (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ps → ph ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ch ) ;;
}

proof of mpcom {
	step 1 : wff = com12 (hyp 2) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = mpd (hyp 1, step 1) |- ( ps → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism inference with common nested antecedent.  (Contributed by NM,
       4-Nov-2004.) */

theorem syli (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ps → ( ph → ch ) ) ;;
	hyp 2 : wff = |- ( ch → ( ph → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ph → th ) ) ;;
}

proof of syli {
	step 1 : wff = com12 (hyp 2) |- ( ph → ( ch → th ) ) ;;
	step 2 : wff = sylcom (hyp 1, step 1) |- ( ps → ( ph → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Replace two antecedents.  Implication-only version of ~ syl2an .
       (Contributed by Wolf Lammen, 14-May-2013.) */

theorem syl2im (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	hyp 3 : wff = |- ( ps → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → ta ) ) ;;
}

proof of syl2im {
	step 1 : wff = syl5 (hyp 2, hyp 3) |- ( ps → ( ch → ta ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ch → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/*This theorem, called "Assertion," can be thought of as closed form of
     modus ponens ~ ax-mp .  Theorem *2.27 of [WhiteheadRussell] p. 104.
     (Contributed by NM, 5-Aug-1993.) */

theorem pm2.27 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ( ph → ps ) → ps ) ) ;;
}

proof of pm2.27 {
	step 1 : wff = id () |- ( ( ph → ps ) → ( ph → ps ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ph → ( ( ph → ps ) → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested modus ponens deduction.  (Contributed by NM, 12-Dec-2004.) */

theorem mpdd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of mpdd {
	step 1 : wff = a2d (hyp 2) |- ( ph → ( ( ps → ch ) → ( ps → th ) ) ) ;;
	step 2 : wff = mpd (hyp 1, step 1) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested modus ponens deduction.  (Contributed by NM, 14-Dec-2004.) */

theorem mpid (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of mpid {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = mpdd (step 1, hyp 2) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested modus ponens deduction.  (Contributed by NM, 16-Apr-2005.)
       (Proof shortened by O'Cat, 15-Jan-2008.) */

theorem mpdi (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ps → ch ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of mpdi {
	step 1 : wff = a1i (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = mpdd (step 1, hyp 2) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A doubly nested modus ponens inference.  (Contributed by NM,
       31-Dec-1993.)  (Proof shortened by Wolf Lammen, 31-Jul-2012.) */

theorem mpii (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ch ;;
	hyp 2 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of mpii {
	step 1 : wff = a1i (hyp 1) |- ( ps → ch ) ;;
	step 2 : wff = mpdi (step 1, hyp 2) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism deduction.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened
       by O'Cat, 19-Feb-2008.)  (Proof shortened by Wolf Lammen, 3-Aug-2012.)

       Notice that ~ syld has the same form as ~ syl with ` ph ` added in front
       of each hypothesis and conclusion.  When all theorems referenced in a
       proof are converted in this way, we can replace ` ph ` with a hypothesis
       of the proof, allowing the hypothesis to be eliminated with ~ id and
       become an antecedent.  The Deduction Theorem for propositional calculus,
       e.g.  Theorem 3 in [Margaris] p. 56, tells us that this procedure is
       always possible. */

theorem syld (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of syld {
	step 1 : wff = a1d (hyp 2) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = mpdd (hyp 1, step 1) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A double modus ponens deduction.  (Contributed by NM, 23-May-2013.)
       (Proof shortened by Wolf Lammen, 23-Jul-2013.) */

theorem mp2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of mp2d {
	step 1 : wff = mpid (hyp 2, hyp 3) |- ( ph → ( ps → th ) ) ;;
	step 2 : wff = mpd (hyp 1, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction introducing a nested embedded antecedent.  (Contributed by NM,
       17-Dec-2004.)  (Proof shortened by O'Cat, 15-Jan-2008.) */

theorem a1dd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( th → ch ) ) ) ;;
}

proof of a1dd {
	step 1 : wff = ax-1 () |- ( ch → ( th → ch ) ) ;;
	step 2 : wff = syl6 (hyp 1, step 1) |- ( ph → ( ps → ( th → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference absorbing redundant antecedent.  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by O'Cat, 28-Nov-2008.) */

theorem pm2.43i (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ( ph → ps ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of pm2.43i {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = mpd (step 1, hyp 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction absorbing redundant antecedent.  (Contributed by NM,
       18-Aug-1993.)  (Proof shortened by O'Cat, 28-Nov-2008.) */

theorem pm2.43d (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ps → ch ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ch ) ) ;;
}

proof of pm2.43d {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = mpdi (step 1, hyp 1) |- ( ph → ( ps → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference absorbing redundant antecedent.  (Contributed by NM,
       7-Nov-1995.)  (Proof shortened by O'Cat, 28-Nov-2008.) */

theorem pm2.43a (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ps → ( ph → ( ps → ch ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ph → ch ) ) ;;
}

proof of pm2.43a {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = mpid (step 1, hyp 1) |- ( ps → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference absorbing redundant antecedent.  (Contributed by NM,
       31-Oct-1995.) */

theorem pm2.43b (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ps → ( ph → ( ps → ch ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ch ) ) ;;
}

proof of pm2.43b {
	step 1 : wff = pm2.43a (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ph → ( ps → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Absorption of redundant antecedent.  Also called the "Contraction" or
     "Hilbert" axiom.  Theorem *2.43 of [WhiteheadRussell] p. 106.
     (Contributed by NM, 5-Aug-1993.)  (Proof shortened by O'Cat,
     15-Aug-2004.) */

theorem pm2.43 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ( ph → ps ) ) → ( ph → ps ) ) ;;
}

proof of pm2.43 {
	step 1 : wff = pm2.27 () |- ( ph → ( ( ph → ps ) → ps ) ) ;;
	step 2 : wff = a2i (step 1) |- ( ( ph → ( ph → ps ) ) → ( ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding nested antecedents.  (Contributed by NM,
       5-Aug-1993.) */

theorem imim2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th → ps ) → ( th → ch ) ) ) ;;
}

proof of imim2d {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( th → ( ps → ch ) ) ) ;;
	step 2 : wff = a2d (step 1) |- ( ph → ( ( th → ps ) → ( th → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A closed form of syllogism (see ~ syl ).  Theorem *2.05 of
     [WhiteheadRussell] p. 100.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 6-Sep-2012.) */

theorem imim2 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ch → ph ) → ( ch → ps ) ) ) ;;
}

proof of imim2 {
	step 1 : wff = id () |- ( ( ph → ps ) → ( ph → ps ) ) ;;
	step 2 : wff = imim2d (step 1) |- ( ( ph → ps ) → ( ( ch → ph ) → ( ch → ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction embedding an antecedent.  (Contributed by Wolf Lammen,
       4-Oct-2013.) */

theorem embantd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps → ch ) → th ) ) ;;
}

proof of embantd {
	step 1 : wff = imim2d (hyp 2) |- ( ph → ( ( ps → ch ) → ( ps → th ) ) ) ;;
	step 2 : wff = mpid (hyp 1, step 1) |- ( ph → ( ( ps → ch ) → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Triple syllogism deduction.  (Contributed by Jeff Hankins,
       4-Aug-2009.) */

theorem 3syld (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ch → th ) ) ;;
	hyp 3 : wff = |- ( ph → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ta ) ) ;;
}

proof of 3syld {
	step 1 : wff = syld (hyp 1, hyp 2) |- ( ph → ( ps → th ) ) ;;
	step 2 : wff = syld (step 1, hyp 3) |- ( ph → ( ps → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Virtual deduction rule ~ e12 without virtual deduction symbols.
       (Contributed by Alan Sare, 20-Apr-2011.) */

theorem sylsyld (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ( ch → th ) ) ;;
	hyp 3 : wff = |- ( ps → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → ta ) ) ;;
}

proof of sylsyld {
	step 1 : wff = syl (hyp 1, hyp 3) |- ( ph → ( th → ta ) ) ;;
	step 2 : wff = syld (hyp 2, step 1) |- ( ph → ( ch → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference joining two implications.  (Contributed by NM, 5-Aug-1993.)
       (Proof shortened by O'Cat, 29-Oct-2011.) */

theorem imim12i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps → ch ) → ( ph → th ) ) ;;
}

proof of imim12i {
	step 1 : wff = imim2i (hyp 2) |- ( ( ps → ch ) → ( ps → th ) ) ;;
	step 2 : wff = syl5 (hyp 1, step 1) |- ( ( ps → ch ) → ( ph → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference adding common consequents in an implication, thereby
       interchanging the original antecedent and consequent.  (Contributed by
       NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen, 4-Aug-2012.) */

theorem imim1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps → ch ) → ( ph → ch ) ) ;;
}

proof of imim1i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = imim12i (hyp 1, step 1) |- ( ( ps → ch ) → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference adding three nested antecedents.  (Contributed by NM,
       19-Dec-2006.) */

theorem imim3i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( th → ph ) → ( ( th → ps ) → ( th → ch ) ) ) ;;
}

proof of imim3i {
	step 1 : wff = imim2i (hyp 1) |- ( ( th → ph ) → ( th → ( ps → ch ) ) ) ;;
	step 2 : wff = a2d (step 1) |- ( ( th → ph ) → ( ( th → ps ) → ( th → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference combined with contraction.  (Contributed by NM,
       4-May-1994.)  (Revised by NM, 13-Jul-2013.) */

theorem sylc (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ps → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of sylc {
	step 1 : wff = syl2im (hyp 1, hyp 2, hyp 3) |- ( ph → ( ph → th ) ) ;;
	step 2 : wff = pm2.43i (step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference combined with contraction. ~ e111 without virtual
       deductions.  (Contributed by Alan Sare, 7-Jul-2011.) */

theorem syl3c (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ps → ( ch → ( th → ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ta ) ;;
}

proof of syl3c {
	step 1 : wff = sylc (hyp 1, hyp 2, hyp 4) |- ( ph → ( th → ta ) ) ;;
	step 2 : wff = mpd (hyp 3, step 1) |- ( ph → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*~ e20 without virtual deductions.  (Contributed by Alan Sare,
       8-Jul-2011.)  (Proof shortened by Wolf Lammen, 13-Sep-2012.) */

theorem syl6mpi (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- th ;;
	hyp 3 : wff = |- ( ch → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ta ) ) ;;
}

proof of syl6mpi {
	step 1 : wff = mpi (hyp 2, hyp 3) |- ( ch → ta ) ;;
	step 2 : wff = syl6 (hyp 1, step 1) |- ( ph → ( ps → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Modus ponens combined with a syllogism inference.  (Contributed by Alan
       Sare, 20-Apr-2011.) */

theorem mpsyl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ps → ch ) ;;
	hyp 3 : wff = |- ( ph → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → th ) ;;
}

proof of mpsyl {
	step 1 : wff = a1i (hyp 1) |- ( ps → ph ) ;;
	step 2 : wff = sylc (step 1, hyp 2, hyp 3) |- ( ps → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference combining ~ syl6 with contraction.  (Contributed by Alan Sare,
       2-May-2011.) */

theorem syl6c (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ps → th ) ) ;;
	hyp 3 : wff = |- ( ch → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ta ) ) ;;
}

proof of syl6c {
	step 1 : wff = syl6 (hyp 1, hyp 3) |- ( ph → ( ps → ( th → ta ) ) ) ;;
	step 2 : wff = mpdd (hyp 2, step 1) |- ( ph → ( ps → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Nested syllogism deduction.  (Contributed by NM, 12-Dec-2004.)  (Proof
       shortened by Wolf Lammen, 11-May-2013.) */

theorem syldd (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ( th → ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ta ) ) ) ;;
}

proof of syldd {
	step 1 : wff = imim2 () |- ( ( th → ta ) → ( ( ch → th ) → ( ch → ta ) ) ) ;;
	step 2 : wff = syl6c (hyp 2, hyp 1, step 1) |- ( ph → ( ps → ( ch → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested syllogism deduction.  (Contributed by NM, 5-Aug-1993.)  (Proof
       shortened by Josh Purinton, 29-Dec-2000.)  (Proof shortened by O'Cat,
       2-Feb-2006.) */

theorem syl5d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ( ch → ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( th → ( ps → ta ) ) ) ;;
}

proof of syl5d {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( th → ( ps → ch ) ) ) ;;
	step 2 : wff = syldd (step 1, hyp 2) |- ( ph → ( th → ( ps → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism rule of inference.  The first premise is used to replace the
       third antecedent of the second premise.  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by Wolf Lammen, 3-Aug-2012.) */

theorem syl7 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ( th → ( ps → ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( th → ( ph → ta ) ) ) ;;
}

proof of syl7 {
	step 1 : wff = a1i (hyp 1) |- ( ch → ( ph → ps ) ) ;;
	step 2 : wff = syl5d (step 1, hyp 2) |- ( ch → ( th → ( ph → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested syllogism deduction.  (Contributed by NM, 5-Aug-1993.)  (Proof
       shortened by Josh Purinton, 29-Dec-2000.)  (Proof shortened by O'Cat,
       2-Feb-2006.) */

theorem syl6d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ta ) ) ) ;;
}

proof of syl6d {
	step 1 : wff = a1d (hyp 2) |- ( ph → ( ps → ( th → ta ) ) ) ;;
	step 2 : wff = syldd (hyp 1, step 1) |- ( ph → ( ps → ( ch → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism rule of inference.  The second premise is used to replace
       the consequent of the first premise.  (Contributed by NM, 1-Aug-1994.)
       (Proof shortened by Wolf Lammen, 3-Aug-2012.) */

theorem syl8 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	hyp 2 : wff = |- ( th → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ta ) ) ) ;;
}

proof of syl8 {
	step 1 : wff = a1i (hyp 2) |- ( ph → ( th → ta ) ) ;;
	step 2 : wff = syl6d (hyp 1, step 1) |- ( ph → ( ps → ( ch → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested syllogism inference with different antecedents.  (Contributed
       by NM, 5-Aug-1993.)  (Proof shortened by Josh Purinton, 29-Dec-2000.) */

theorem syl9 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( th → ( ps → ta ) ) ) ;;
}

proof of syl9 {
	step 1 : wff = a1i (hyp 2) |- ( ph → ( th → ( ch → ta ) ) ) ;;
	step 2 : wff = syl5d (hyp 1, step 1) |- ( ph → ( th → ( ps → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A nested syllogism inference with different antecedents.  (Contributed
       by NM, 5-Aug-1993.) */

theorem syl9r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( th → ( ph → ( ps → ta ) ) ) ;;
}

proof of syl9r {
	step 1 : wff = syl9 (hyp 1, hyp 2) |- ( ph → ( th → ( ps → ta ) ) ) ;;
	step 2 : wff = com12 (step 1) |- ( th → ( ph → ( ps → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction combining antecedents and consequents.  (Contributed by NM,
       7-Aug-1994.)  (Proof shortened by O'Cat, 30-Oct-2011.) */

theorem imim12d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ch → th ) → ( ps → ta ) ) ) ;;
}

proof of imim12d {
	step 1 : wff = imim2d (hyp 2) |- ( ph → ( ( ch → th ) → ( ch → ta ) ) ) ;;
	step 2 : wff = syl5d (hyp 1, step 1) |- ( ph → ( ( ch → th ) → ( ps → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding nested consequents.  (Contributed by NM, 3-Apr-1994.)
       (Proof shortened by Wolf Lammen, 12-Sep-2012.) */

theorem imim1d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ch → th ) → ( ps → th ) ) ) ;;
}

proof of imim1d {
	step 1 : wff = idd () |- ( ph → ( th → th ) ) ;;
	step 2 : wff = imim12d (hyp 1, step 1) |- ( ph → ( ( ch → th ) → ( ps → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A closed form of syllogism (see ~ syl ).  Theorem *2.06 of
     [WhiteheadRussell] p. 100.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 25-May-2013.) */

theorem imim1 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ps → ch ) → ( ph → ch ) ) ) ;;
}

proof of imim1 {
	step 1 : wff = id () |- ( ( ph → ps ) → ( ph → ps ) ) ;;
	step 2 : wff = imim1d (step 1) |- ( ( ph → ps ) → ( ( ps → ch ) → ( ph → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Theorem *2.83 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.83 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) → ( ( ph → ( ch → th ) ) → ( ph → ( ps → th ) ) ) ) ;;
}

proof of pm2.83 {
	step 1 : wff = imim1 () |- ( ( ps → ch ) → ( ( ch → th ) → ( ps → th ) ) ) ;;
	step 2 : wff = imim3i (step 1) |- ( ( ph → ( ps → ch ) ) → ( ( ph → ( ch → th ) ) → ( ph → ( ps → th ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 2nd and 3rd.  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by Wolf Lammen, 4-Aug-2012.) */

theorem com23 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → ( ps → th ) ) ) ;;
}

proof of com23 {
	step 1 : wff = pm2.27 () |- ( ch → ( ( ch → th ) → th ) ) ;;
	step 2 : wff = syl9 (hyp 1, step 1) |- ( ph → ( ch → ( ps → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate right.  (Contributed by NM,
       25-Apr-1994.) */

theorem com3r (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( ph → ( ps → th ) ) ) ;;
}

proof of com3r {
	step 1 : wff = com23 (hyp 1) |- ( ph → ( ch → ( ps → th ) ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ch → ( ph → ( ps → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 1st and 3rd.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) */

theorem com13 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( ps → ( ph → th ) ) ) ;;
}

proof of com13 {
	step 1 : wff = com3r (hyp 1) |- ( ch → ( ph → ( ps → th ) ) ) ;;
	step 2 : wff = com23 (step 1) |- ( ch → ( ps → ( ph → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate left.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) */

theorem com3l (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ch → ( ph → th ) ) ) ;;
}

proof of com3l {
	step 1 : wff = com3r (hyp 1) |- ( ch → ( ph → ( ps → th ) ) ) ;;
	step 2 : wff = com3r (step 1) |- ( ps → ( ch → ( ph → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Swap antecedents.  Theorem *2.04 of [WhiteheadRussell] p. 100.
     (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen,
     12-Sep-2012.) */

theorem pm2.04 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) → ( ps → ( ph → ch ) ) ) ;;
}

proof of pm2.04 {
	step 1 : wff = id () |- ( ( ph → ( ps → ch ) ) → ( ph → ( ps → ch ) ) ) ;;
	step 2 : wff = com23 (step 1) |- ( ( ph → ( ps → ch ) ) → ( ps → ( ph → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 3rd and 4th.  (Contributed by NM,
       25-Apr-1994.) */

theorem com34 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( th → ( ch → ta ) ) ) ) ;;
}

proof of com34 {
	step 1 : wff = pm2.04 () |- ( ( ch → ( th → ta ) ) → ( th → ( ch → ta ) ) ) ;;
	step 2 : wff = syl6 (hyp 1, step 1) |- ( ph → ( ps → ( th → ( ch → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate left.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by O'Cat, 15-Aug-2004.) */

theorem com4l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ch → ( th → ( ph → ta ) ) ) ) ;;
}

proof of com4l {
	step 1 : wff = com3l (hyp 1) |- ( ps → ( ch → ( ph → ( th → ta ) ) ) ) ;;
	step 2 : wff = com34 (step 1) |- ( ps → ( ch → ( th → ( ph → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate twice.  (Contributed by NM,
       25-Apr-1994.) */

theorem com4t (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( th → ( ph → ( ps → ta ) ) ) ) ;;
}

proof of com4t {
	step 1 : wff = com4l (hyp 1) |- ( ps → ( ch → ( th → ( ph → ta ) ) ) ) ;;
	step 2 : wff = com4l (step 1) |- ( ch → ( th → ( ph → ( ps → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate right.  (Contributed by NM,
       25-Apr-1994.) */

theorem com4r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( th → ( ph → ( ps → ( ch → ta ) ) ) ) ;;
}

proof of com4r {
	step 1 : wff = com4t (hyp 1) |- ( ch → ( th → ( ph → ( ps → ta ) ) ) ) ;;
	step 2 : wff = com4l (step 1) |- ( th → ( ph → ( ps → ( ch → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 2nd and 4th.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) */

theorem com24 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( th → ( ch → ( ps → ta ) ) ) ) ;;
}

proof of com24 {
	step 1 : wff = com4t (hyp 1) |- ( ch → ( th → ( ph → ( ps → ta ) ) ) ) ;;
	step 2 : wff = com13 (step 1) |- ( ph → ( th → ( ch → ( ps → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 1st and 4th.  (Contributed by NM,
       25-Apr-1994.)  (Proof shortened by Wolf Lammen, 28-Jul-2012.) */

theorem com14 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( th → ( ps → ( ch → ( ph → ta ) ) ) ) ;;
}

proof of com14 {
	step 1 : wff = com4l (hyp 1) |- ( ps → ( ch → ( th → ( ph → ta ) ) ) ) ;;
	step 2 : wff = com3r (step 1) |- ( th → ( ps → ( ch → ( ph → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 4th and 5th.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) */

theorem com45 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( ta → ( th → et ) ) ) ) ) ;;
}

proof of com45 {
	step 1 : wff = pm2.04 () |- ( ( th → ( ta → et ) ) → ( ta → ( th → et ) ) ) ;;
	step 2 : wff = syl8 (hyp 1, step 1) |- ( ph → ( ps → ( ch → ( ta → ( th → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 3rd and 5th.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) */

theorem com35 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ta → ( th → ( ch → et ) ) ) ) ) ;;
}

proof of com35 {
	step 1 : wff = com34 (hyp 1) |- ( ph → ( ps → ( th → ( ch → ( ta → et ) ) ) ) ) ;;
	step 2 : wff = com45 (step 1) |- ( ph → ( ps → ( th → ( ta → ( ch → et ) ) ) ) ) ;;
	step 3 : wff = com34 (step 2) |- ( ph → ( ps → ( ta → ( th → ( ch → et ) ) ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Commutation of antecedents.  Swap 2nd and 5th.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) */

theorem com25 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ta → ( ch → ( th → ( ps → et ) ) ) ) ) ;;
}

proof of com25 {
	step 1 : wff = com24 (hyp 1) |- ( ph → ( th → ( ch → ( ps → ( ta → et ) ) ) ) ) ;;
	step 2 : wff = com45 (step 1) |- ( ph → ( th → ( ch → ( ta → ( ps → et ) ) ) ) ) ;;
	step 3 : wff = com24 (step 2) |- ( ph → ( ta → ( ch → ( th → ( ps → et ) ) ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Commutation of antecedents.  Rotate left.  (Contributed by Jeff Hankins,
       28-Jun-2009.)  (Proof shortened by Wolf Lammen, 29-Jul-2012.) */

theorem com5l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ch → ( th → ( ta → ( ph → et ) ) ) ) ) ;;
}

proof of com5l {
	step 1 : wff = com4l (hyp 1) |- ( ps → ( ch → ( th → ( ph → ( ta → et ) ) ) ) ) ;;
	step 2 : wff = com45 (step 1) |- ( ps → ( ch → ( th → ( ta → ( ph → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Swap 1st and 5th.  (Contributed by Jeff
       Hankins, 28-Jun-2009.)  (Proof shortened by Wolf Lammen,
       29-Jul-2012.) */

theorem com15 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ta → ( ps → ( ch → ( th → ( ph → et ) ) ) ) ) ;;
}

proof of com15 {
	step 1 : wff = com5l (hyp 1) |- ( ps → ( ch → ( th → ( ta → ( ph → et ) ) ) ) ) ;;
	step 2 : wff = com4r (step 1) |- ( ta → ( ps → ( ch → ( th → ( ph → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate left twice.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) */

theorem com52l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → ( th → ( ta → ( ph → ( ps → et ) ) ) ) ) ;;
}

proof of com52l {
	step 1 : wff = com5l (hyp 1) |- ( ps → ( ch → ( th → ( ta → ( ph → et ) ) ) ) ) ;;
	step 2 : wff = com5l (step 1) |- ( ch → ( th → ( ta → ( ph → ( ps → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate right twice.  (Contributed by Jeff
       Hankins, 28-Jun-2009.) */

theorem com52r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( th → ( ta → ( ph → ( ps → ( ch → et ) ) ) ) ) ;;
}

proof of com52r {
	step 1 : wff = com52l (hyp 1) |- ( ch → ( th → ( ta → ( ph → ( ps → et ) ) ) ) ) ;;
	step 2 : wff = com5l (step 1) |- ( th → ( ta → ( ph → ( ps → ( ch → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation of antecedents.  Rotate right.  (Contributed by Wolf Lammen,
       29-Jul-2012.) */

theorem com5r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ta → ( ph → ( ps → ( ch → ( th → et ) ) ) ) ) ;;
}

proof of com5r {
	step 1 : wff = com52l (hyp 1) |- ( ch → ( th → ( ta → ( ph → ( ps → et ) ) ) ) ) ;;
	step 2 : wff = com52l (step 1) |- ( ta → ( ph → ( ps → ( ch → ( th → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Elimination of a nested antecedent as a kind of reversal of inference
     ~ ja .  (Contributed by Wolf Lammen, 9-May-2013.) */

theorem jarr (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) → ch ) → ( ps → ch ) ) ;;
}

proof of jarr {
	step 1 : wff = ax-1 () |- ( ps → ( ph → ps ) ) ;;
	step 2 : wff = imim1i (step 1) |- ( ( ( ph → ps ) → ch ) → ( ps → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference based on ~ pm2.86 .  (Contributed by NM, 5-Aug-1993.)  (Proof
       shortened by Wolf Lammen, 3-Apr-2013.) */

theorem pm2.86i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph → ps ) → ( ph → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ch ) ) ;;
}

proof of pm2.86i {
	step 1 : wff = ax-1 () |- ( ps → ( ph → ps ) ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 3 : wff = com12 (step 2) |- ( ph → ( ps → ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction based on ~ pm2.86 .  (Contributed by NM, 29-Jun-1995.)  (Proof
       shortened by Wolf Lammen, 3-Apr-2013.) */

theorem pm2.86d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps → ch ) → ( ps → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
}

proof of pm2.86d {
	step 1 : wff = ax-1 () |- ( ch → ( ps → ch ) ) ;;
	step 2 : wff = syl5 (step 1, hyp 1) |- ( ph → ( ch → ( ps → th ) ) ) ;;
	step 3 : wff = com23 (step 2) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Converse of axiom ~ ax-2 .  Theorem *2.86 of [WhiteheadRussell] p. 108.
     (Contributed by NM, 25-Apr-1994.)  (Proof shortened by Wolf Lammen,
     3-Apr-2013.) */

theorem pm2.86 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) → ( ph → ch ) ) → ( ph → ( ps → ch ) ) ) ;;
}

proof of pm2.86 {
	step 1 : wff = id () |- ( ( ( ph → ps ) → ( ph → ch ) ) → ( ( ph → ps ) → ( ph → ch ) ) ) ;;
	step 2 : wff = pm2.86d (step 1) |- ( ( ( ph → ps ) → ( ph → ch ) ) → ( ph → ( ps → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*The Linearity Axiom of the infinite-valued sentential logic (L-infinity)
     of Lukasiewicz.  This version of ~ loolin does not use ~ ax-3 , meaning
     that this theorem is intuitionistically valid.  (Contributed by O'Cat,
     12-Aug-2004.)  (New usage is discouraged.)
     (Proof modification is discouraged.) */

theorem loolinALT (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) → ( ps → ph ) ) → ( ps → ph ) ) ;;
}

proof of loolinALT {
	step 1 : wff = jarr () |- ( ( ( ph → ps ) → ( ps → ph ) ) → ( ps → ( ps → ph ) ) ) ;;
	step 2 : wff = pm2.43d (step 1) |- ( ( ( ph → ps ) → ( ps → ph ) ) → ( ps → ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/*An alternate for the Linearity Axiom of the infinite-valued sentential
     logic (L-infinity) of Lukasiewicz, due to Barbara Wozniakowska, _Reports
     on Mathematical Logic_ 10, 129-137 (1978).  (Contributed by O'Cat,
     8-Aug-2004.) */

theorem loowoz (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) → ( ph → ch ) ) → ( ( ps → ph ) → ( ps → ch ) ) ) ;;
}

proof of loowoz {
	step 1 : wff = jarr () |- ( ( ( ph → ps ) → ( ph → ch ) ) → ( ps → ( ph → ch ) ) ) ;;
	step 2 : wff = a2d (step 1) |- ( ( ( ph → ps ) → ( ph → ch ) ) → ( ( ps → ph ) → ( ps → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}


