import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Propositional_calculus/Miscellaneous_theorems_of_propositional_calculus.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Abbreviated conjunction and disjunction of three wff's

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/*Extend wff definition to include 3-way disjunction ('or'). */

rule w3o (ph : wff, ps : wff, ch : wff) {
	term : wff = # ( ph ∨ ps ∨ ch ) ;;
}

/*Extend wff definition to include 3-way conjunction ('and'). */

rule w3a (ph : wff, ps : wff, ch : wff) {
	term : wff = # ( ph ∧ ps ∧ ch ) ;;
}

/*These abbreviations help eliminate parentheses to aid readability. */

/*Define disjunction ('or') of three wff's.  Definition *2.33 of
     [WhiteheadRussell] p. 105.  This abbreviation reduces the number of
     parentheses and emphasizes that the order of bracketing is not important
     by virtue of the associative law ~ orass .  (Contributed by NM,
     8-Apr-1994.) */

definition df-3or (ph : wff, ps : wff, ch : wff)  {
	defiendum : wff = # ( ph ∨ ps ∨ ch ) ;;
	definiens : wff = # ( ( ph ∨ ps ) ∨ ch ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/*Define conjunction ('and') of three wff's.  Definition *4.34 of
     [WhiteheadRussell] p. 118.  This abbreviation reduces the number of
     parentheses and emphasizes that the order of bracketing is not important
     by virtue of the associative law ~ anass .  (Contributed by NM,
     8-Apr-1994.) */

definition df-3an (ph : wff, ps : wff, ch : wff)  {
	defiendum : wff = # ( ph ∧ ps ∧ ch ) ;;
	definiens : wff = # ( ( ph ∧ ps ) ∧ ch ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/*Associative law for triple disjunction.  (Contributed by NM,
     8-Apr-1994.) */

theorem 3orass (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
}

proof of 3orass {
	step 1 : wff = df-3or () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ( ph ∨ ps ) ∨ ch ) ) ;;
	step 2 : wff = orass () |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Associative law for triple conjunction.  (Contributed by NM,
     8-Apr-1994.) */

theorem 3anass (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
}

proof of 3anass {
	step 1 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 2 : wff = anass () |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Rotation law for triple conjunction.  (Contributed by NM, 8-Apr-1994.) */

theorem 3anrot (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ch ∧ ph ) ) ;;
}

proof of 3anrot {
	step 1 : wff = ancom () |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ( ps ∧ ch ) ∧ ph ) ) ;;
	step 2 : wff = 3anass () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 3 : wff = df-3an () |- ( ( ps ∧ ch ∧ ph ) ↔ ( ( ps ∧ ch ) ∧ ph ) ) ;;
	step 4 : wff = 3bitr4i (step 1, step 2, step 3) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ch ∧ ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Rotation law for triple disjunction.  (Contributed by NM, 4-Apr-1995.) */

theorem 3orrot (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ∨ ch ) ↔ ( ps ∨ ch ∨ ph ) ) ;;
}

proof of 3orrot {
	step 1 : wff = orcom () |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ( ps ∨ ch ) ∨ ph ) ) ;;
	step 2 : wff = 3orass () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = df-3or () |- ( ( ps ∨ ch ∨ ph ) ↔ ( ( ps ∨ ch ) ∨ ph ) ) ;;
	step 4 : wff = 3bitr4i (step 1, step 2, step 3) |- ( ( ph ∨ ps ∨ ch ) ↔ ( ps ∨ ch ∨ ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Commutation law for triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem 3ancoma (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ph ∧ ch ) ) ;;
}

proof of 3ancoma {
	step 1 : wff = ancom () |- ( ( ph ∧ ps ) ↔ ( ps ∧ ph ) ) ;;
	step 2 : wff = anbi1i (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ps ∧ ph ) ∧ ch ) ) ;;
	step 3 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 4 : wff = df-3an () |- ( ( ps ∧ ph ∧ ch ) ↔ ( ( ps ∧ ph ) ∧ ch ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ph ∧ ch ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Commutation law for triple disjunction.  (Contributed by Mario Carneiro,
     4-Sep-2016.) */

theorem 3orcoma (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ∨ ch ) ↔ ( ps ∨ ph ∨ ch ) ) ;;
}

proof of 3orcoma {
	step 1 : wff = or12 () |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ps ∨ ( ph ∨ ch ) ) ) ;;
	step 2 : wff = 3orass () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = 3orass () |- ( ( ps ∨ ph ∨ ch ) ↔ ( ps ∨ ( ph ∨ ch ) ) ) ;;
	step 4 : wff = 3bitr4i (step 1, step 2, step 3) |- ( ( ph ∨ ps ∨ ch ) ↔ ( ps ∨ ph ∨ ch ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Commutation law for triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem 3ancomb (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ph ∧ ch ∧ ps ) ) ;;
}

proof of 3ancomb {
	step 1 : wff = 3ancoma () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ph ∧ ch ) ) ;;
	step 2 : wff = 3anrot () |- ( ( ps ∧ ph ∧ ch ) ↔ ( ph ∧ ch ∧ ps ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ph ∧ ch ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Commutation law for triple disjunction.  (Contributed by Scott Fenton,
     20-Apr-2011.) */

theorem 3orcomb (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ch ∨ ps ) ) ;;
}

proof of 3orcomb {
	step 1 : wff = orcom () |- ( ( ps ∨ ch ) ↔ ( ch ∨ ps ) ) ;;
	step 2 : wff = orbi2i (step 1) |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ph ∨ ( ch ∨ ps ) ) ) ;;
	step 3 : wff = 3orass () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 4 : wff = 3orass () |- ( ( ph ∨ ch ∨ ps ) ↔ ( ph ∨ ( ch ∨ ps ) ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ch ∨ ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Reversal law for triple conjunction.  (Contributed by NM, 21-Apr-1994.) */

theorem 3anrev (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ch ∧ ps ∧ ph ) ) ;;
}

proof of 3anrev {
	step 1 : wff = 3ancoma () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ph ∧ ch ) ) ;;
	step 2 : wff = 3anrot () |- ( ( ch ∧ ps ∧ ph ) ↔ ( ps ∧ ph ∧ ch ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ch ∧ ps ∧ ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Convert triple conjunction to conjunction, then commute.  (Contributed by
     Jonathan Ben-Naim, 3-Jun-2011.) */

theorem 3anan32 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ps ) ) ;;
}

proof of 3anan32 {
	step 1 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 2 : wff = an32 () |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ps ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Convert triple conjunction to conjunction, then commute.  (Contributed by
     Jonathan Ben-Naim, 3-Jun-2011.)  (Proof shortened by Andrew Salmon,
     14-Jun-2011.) */

theorem 3anan12 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
}

proof of 3anan12 {
	step 1 : wff = 3ancoma () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ph ∧ ch ) ) ;;
	step 2 : wff = 3anass () |- ( ( ps ∧ ph ∧ ch ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Triple conjunction expressed in terms of triple disjunction.  (Contributed
     by Jeff Hankins, 15-Aug-2009.) */

theorem 3anor (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) ↔ ¬ ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ) ;;
}

proof of 3anor {
	step 1 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 2 : wff = anor () |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ¬ ( ¬ ( ph ∧ ps ) ∨ ¬ ch ) ) ;;
	step 3 : wff = ianor () |- ( ¬ ( ph ∧ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
	step 4 : wff = orbi1i (step 3) |- ( ( ¬ ( ph ∧ ps ) ∨ ¬ ch ) ↔ ( ( ¬ ph ∨ ¬ ps ) ∨ ¬ ch ) ) ;;
	step 5 : wff = xchbinx (step 2, step 4) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ¬ ( ( ¬ ph ∨ ¬ ps ) ∨ ¬ ch ) ) ;;
	step 6 : wff = df-3or () |- ( ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ↔ ( ( ¬ ph ∨ ¬ ps ) ∨ ¬ ch ) ) ;;
	step 7 : wff = xchbinxr (step 5, step 6) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ¬ ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ) ;;
	step 8 : wff = bitri (step 1, step 7) |- ( ( ph ∧ ps ∧ ch ) ↔ ¬ ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ) ;;
	qed prop 1 = step 8 ;;
}

/*Negated triple conjunction expressed in terms of triple disjunction.
     (Contributed by Jeff Hankins, 15-Aug-2009.)  (Proof shortened by Andrew
     Salmon, 13-May-2011.) */

theorem 3ianor (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∧ ps ∧ ch ) ↔ ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ) ;;
}

proof of 3ianor {
	step 1 : wff = 3anor () |- ( ( ph ∧ ps ∧ ch ) ↔ ¬ ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ) ;;
	step 2 : wff = con2bii (step 1) |- ( ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ↔ ¬ ( ph ∧ ps ∧ ch ) ) ;;
	step 3 : wff = bicomi (step 2) |- ( ¬ ( ph ∧ ps ∧ ch ) ↔ ( ¬ ph ∨ ¬ ps ∨ ¬ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Negated triple disjunction as triple conjunction.  (Contributed by Scott
     Fenton, 19-Apr-2011.) */

theorem 3ioran (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ∨ ch ) ↔ ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ) ;;
}

proof of 3ioran {
	step 1 : wff = ioran () |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = anbi1i (step 1) |- ( ( ¬ ( ph ∨ ps ) ∧ ¬ ch ) ↔ ( ( ¬ ph ∧ ¬ ps ) ∧ ¬ ch ) ) ;;
	step 3 : wff = ioran () |- ( ¬ ( ( ph ∨ ps ) ∨ ch ) ↔ ( ¬ ( ph ∨ ps ) ∧ ¬ ch ) ) ;;
	step 4 : wff = df-3or () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ( ph ∨ ps ) ∨ ch ) ) ;;
	step 5 : wff = xchnxbir (step 3, step 4) |- ( ¬ ( ph ∨ ps ∨ ch ) ↔ ( ¬ ( ph ∨ ps ) ∧ ¬ ch ) ) ;;
	step 6 : wff = df-3an () |- ( ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ↔ ( ( ¬ ph ∧ ¬ ps ) ∧ ¬ ch ) ) ;;
	step 7 : wff = 3bitr4i (step 2, step 5, step 6) |- ( ¬ ( ph ∨ ps ∨ ch ) ↔ ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ) ;;
	qed prop 1 = step 7 ;;
}

/*Triple disjunction in terms of triple conjunction.  (Contributed by NM,
     8-Oct-2012.) */

theorem 3oran (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ∨ ch ) ↔ ¬ ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ) ;;
}

proof of 3oran {
	step 1 : wff = 3ioran () |- ( ¬ ( ph ∨ ps ∨ ch ) ↔ ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ) ;;
	step 2 : wff = con1bii (step 1) |- ( ¬ ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ↔ ( ph ∨ ps ∨ ch ) ) ;;
	step 3 : wff = bicomi (step 2) |- ( ( ph ∨ ps ∨ ch ) ↔ ¬ ( ¬ ph ∧ ¬ ps ∧ ¬ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem 3simpa (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ( ph ∧ ps ) ) ;;
}

proof of 3simpa {
	step 1 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 2 : wff = simplbi (step 1) |- ( ( ph ∧ ps ∧ ch ) → ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem 3simpb (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ( ph ∧ ch ) ) ;;
}

proof of 3simpb {
	step 1 : wff = 3ancomb () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ph ∧ ch ∧ ps ) ) ;;
	step 2 : wff = 3simpa () |- ( ( ph ∧ ch ∧ ps ) → ( ph ∧ ch ) ) ;;
	step 3 : wff = sylbi (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) → ( ph ∧ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 21-Apr-1994.)
     (Proof shortened by Andrew Salmon, 13-May-2011.) */

theorem 3simpc (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ( ps ∧ ch ) ) ;;
}

proof of 3simpc {
	step 1 : wff = 3anrot () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ps ∧ ch ∧ ph ) ) ;;
	step 2 : wff = 3simpa () |- ( ( ps ∧ ch ∧ ph ) → ( ps ∧ ch ) ) ;;
	step 3 : wff = sylbi (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) → ( ps ∧ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem simp1 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ph ) ;;
}

proof of simp1 {
	step 1 : wff = 3simpa () |- ( ( ph ∧ ps ∧ ch ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = simpld (step 1) |- ( ( ph ∧ ps ∧ ch ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem simp2 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ps ) ;;
}

proof of simp2 {
	step 1 : wff = 3simpa () |- ( ( ph ∧ ps ∧ ch ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = simprd (step 1) |- ( ( ph ∧ ps ∧ ch ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM,
     21-Apr-1994.) */

theorem simp3 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ch ) ;;
}

proof of simp3 {
	step 1 : wff = 3simpc () |- ( ( ph ∧ ps ∧ ch ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = simprd (step 1) |- ( ( ph ∧ ps ∧ ch ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) */

theorem simpl1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
}

proof of simpl1 {
	step 1 : wff = simp1 () |- ( ( ph ∧ ps ∧ ch ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) */

theorem simpl2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
}

proof of simpl2 {
	step 1 : wff = simp2 () |- ( ( ph ∧ ps ∧ ch ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) */

theorem simpl3 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
}

proof of simpl3 {
	step 1 : wff = simp3 () |- ( ( ph ∧ ps ∧ ch ) → ch ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) */

theorem simpr1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ps ) ;;
}

proof of simpr1 {
	step 1 : wff = simp1 () |- ( ( ps ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) */

theorem simpr2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ch ) ;;
}

proof of simpr2 {
	step 1 : wff = simp2 () |- ( ( ps ∧ ch ∧ th ) → ch ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) */

theorem simpr3 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → th ) ;;
}

proof of simpr3 {
	step 1 : wff = simp3 () |- ( ( ps ∧ ch ∧ th ) → th ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Infer a conjunct from a triple conjunction.  (Contributed by NM,
       19-Apr-2005.) */

theorem simp1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ∧ ps ∧ ch ) ;;
	-----------------------
	prop 1 : wff = |- ph ;;
}

proof of simp1i {
	step 1 : wff = simp1 () |- ( ( ph ∧ ps ∧ ch ) → ph ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ph ;;
	qed prop 1 = step 2 ;;
}

/*Infer a conjunct from a triple conjunction.  (Contributed by NM,
       19-Apr-2005.) */

theorem simp2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ∧ ps ∧ ch ) ;;
	-----------------------
	prop 1 : wff = |- ps ;;
}

proof of simp2i {
	step 1 : wff = simp2 () |- ( ( ph ∧ ps ∧ ch ) → ps ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ps ;;
	qed prop 1 = step 2 ;;
}

/*Infer a conjunct from a triple conjunction.  (Contributed by NM,
       19-Apr-2005.) */

theorem simp3i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ∧ ps ∧ ch ) ;;
	-----------------------
	prop 1 : wff = |- ch ;;
}

proof of simp3i {
	step 1 : wff = simp3 () |- ( ( ph ∧ ps ∧ ch ) → ch ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ch ;;
	qed prop 1 = step 2 ;;
}

/*Deduce a conjunct from a triple conjunction.  (Contributed by NM,
       4-Sep-2005.) */

theorem simp1d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of simp1d {
	step 1 : wff = simp1 () |- ( ( ps ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduce a conjunct from a triple conjunction.  (Contributed by NM,
       4-Sep-2005.) */

theorem simp2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of simp2d {
	step 1 : wff = simp2 () |- ( ( ps ∧ ch ∧ th ) → ch ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduce a conjunct from a triple conjunction.  (Contributed by NM,
       4-Sep-2005.) */

theorem simp3d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of simp3d {
	step 1 : wff = simp3 () |- ( ( ps ∧ ch ∧ th ) → th ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduce a conjunct from a triple conjunction.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) */

theorem simp1bi (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of simp1bi {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = simp1d (step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduce a conjunct from a triple conjunction.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) */

theorem simp2bi (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of simp2bi {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = simp2d (step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduce a conjunct from a triple conjunction.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) */

theorem simp3bi (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of simp3bi {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = simp3d (step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Jul-1995.) */

theorem 3adant1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( th ∧ ph ∧ ps ) → ch ) ;;
}

proof of 3adant1 {
	step 1 : wff = 3simpc () |- ( ( th ∧ ph ∧ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ( th ∧ ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Jul-1995.) */

theorem 3adant2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ∧ ps ) → ch ) ;;
}

proof of 3adant2 {
	step 1 : wff = 3simpb () |- ( ( ph ∧ th ∧ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ( ph ∧ th ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Jul-1995.) */

theorem 3adant3 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ th ) → ch ) ;;
}

proof of 3adant3 {
	step 1 : wff = 3simpa () |- ( ( ph ∧ ps ∧ th ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ( ph ∧ ps ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to an antecedent.  (Contributed by NM,
       21-Apr-2005.) */

theorem 3ad2ant1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ th ) → ch ) ;;
}

proof of 3ad2ant1 {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ch ) ;;
	step 2 : wff = 3adant2 (step 1) |- ( ( ph ∧ ps ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to an antecedent.  (Contributed by NM,
       21-Apr-2005.) */

theorem 3ad2ant2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ∧ th ) → ch ) ;;
}

proof of 3ad2ant2 {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ch ) ;;
	step 2 : wff = 3adant1 (step 1) |- ( ( ps ∧ ph ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to an antecedent.  (Contributed by NM,
       21-Apr-2005.) */

theorem 3ad2ant3 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ th ∧ ph ) → ch ) ;;
}

proof of 3ad2ant3 {
	step 1 : wff = adantl (hyp 1) |- ( ( th ∧ ph ) → ch ) ;;
	step 2 : wff = 3adant1 (step 1) |- ( ( ps ∧ th ∧ ph ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) */

theorem simp1l (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
}

proof of simp1l {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) */

theorem simp1r (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
}

proof of simp1r {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) */

theorem simp2l (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ∧ th ) → ps ) ;;
}

proof of simp2l {
	step 1 : wff = simpl () |- ( ( ps ∧ ch ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) */

theorem simp2r (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ∧ th ) → ch ) ;;
}

proof of simp2r {
	step 1 : wff = simpr () |- ( ( ps ∧ ch ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) */

theorem simp3l (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ch ∧ th ) ) → ch ) ;;
}

proof of simp3l {
	step 1 : wff = simpl () |- ( ( ch ∧ th ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ph ∧ ps ∧ ( ch ∧ th ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of triple conjunction.  (Contributed by NM, 9-Nov-2011.) */

theorem simp3r (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ch ∧ th ) ) → th ) ;;
}

proof of simp3r {
	step 1 : wff = simpr () |- ( ( ch ∧ th ) → th ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ph ∧ ps ∧ ( ch ∧ th ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp11 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
}

proof of simp11 {
	step 1 : wff = simp1 () |- ( ( ph ∧ ps ∧ ch ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp12 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
}

proof of simp12 {
	step 1 : wff = simp2 () |- ( ( ph ∧ ps ∧ ch ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp13 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
}

proof of simp13 {
	step 1 : wff = simp3 () |- ( ( ph ∧ ps ∧ ch ) → ch ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp21 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ∧ ta ) → ps ) ;;
}

proof of simp21 {
	step 1 : wff = simp1 () |- ( ( ps ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp22 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ∧ ta ) → ch ) ;;
}

proof of simp22 {
	step 1 : wff = simp2 () |- ( ( ps ∧ ch ∧ th ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ∧ ta ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp23 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ∧ ta ) → th ) ;;
}

proof of simp23 {
	step 1 : wff = simp3 () |- ( ( ps ∧ ch ∧ th ) → th ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ∧ ta ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp31 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ch ∧ th ∧ ta ) ) → ch ) ;;
}

proof of simp31 {
	step 1 : wff = simp1 () |- ( ( ch ∧ th ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ph ∧ ps ∧ ( ch ∧ th ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp32 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ch ∧ th ∧ ta ) ) → th ) ;;
}

proof of simp32 {
	step 1 : wff = simp2 () |- ( ( ch ∧ th ∧ ta ) → th ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ph ∧ ps ∧ ( ch ∧ th ∧ ta ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of doubly triple conjunction.  (Contributed by NM,
     17-Nov-2011.) */

theorem simp33 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ch ∧ th ∧ ta ) ) → ta ) ;;
}

proof of simp33 {
	step 1 : wff = simp3 () |- ( ( ch ∧ th ∧ ta ) → ta ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ph ∧ ps ∧ ( ch ∧ th ∧ ta ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpll1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ) → ph ) ;;
}

proof of simpll1 {
	step 1 : wff = simpl1 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpll2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
}

proof of simpll2 {
	step 1 : wff = simpl2 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpll3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ) → ch ) ;;
}

proof of simpll3 {
	step 1 : wff = simpl3 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simplr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ) → ph ) ;;
}

proof of simplr1 {
	step 1 : wff = simpr1 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simplr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ) → ps ) ;;
}

proof of simplr2 {
	step 1 : wff = simpr2 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simplr3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ) → ch ) ;;
}

proof of simplr3 {
	step 1 : wff = simpr3 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simprl1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ph ) ;;
}

proof of simprl1 {
	step 1 : wff = simpl1 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simprl2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ps ) ;;
}

proof of simprl2 {
	step 1 : wff = simpl2 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simprl3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ch ) ;;
}

proof of simprl3 {
	step 1 : wff = simpl3 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simprr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
}

proof of simprr1 {
	step 1 : wff = simpr1 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simprr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
}

proof of simprr2 {
	step 1 : wff = simpr2 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simprr3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
}

proof of simprr3 {
	step 1 : wff = simpr3 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl1l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ) → ph ) ;;
}

proof of simpl1l {
	step 1 : wff = simp1l () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl1r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ) → ps ) ;;
}

proof of simpl1r {
	step 1 : wff = simp1r () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl2l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ) → ph ) ;;
}

proof of simpl2l {
	step 1 : wff = simp2l () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl2r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ) → ps ) ;;
}

proof of simpl2r {
	step 1 : wff = simp2r () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl3l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ) → ph ) ;;
}

proof of simpl3l {
	step 1 : wff = simp3l () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl3r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ) → ps ) ;;
}

proof of simpl3r {
	step 1 : wff = simp3r () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr1l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ph ) ;;
}

proof of simpr1l {
	step 1 : wff = simp1l () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr1r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ps ) ;;
}

proof of simpr1r {
	step 1 : wff = simp1r () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr2l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ph ) ;;
}

proof of simpr2l {
	step 1 : wff = simp2l () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr2r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ps ) ;;
}

proof of simpr2r {
	step 1 : wff = simp2r () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr3l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ph ) ;;
}

proof of simpr3l {
	step 1 : wff = simp3l () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr3r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ps ) ;;
}

proof of simpr3r {
	step 1 : wff = simp3r () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1ll (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
}

proof of simp1ll {
	step 1 : wff = simpll () |- ( ( ( ph ∧ ps ) ∧ ch ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1lr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
}

proof of simp1lr {
	step 1 : wff = simplr () |- ( ( ( ph ∧ ps ) ∧ ch ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1rl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ ( ph ∧ ps ) ) ∧ th ∧ ta ) → ph ) ;;
}

proof of simp1rl {
	step 1 : wff = simprl () |- ( ( ch ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ch ∧ ( ph ∧ ps ) ) ∧ th ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1rr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ ( ph ∧ ps ) ) ∧ th ∧ ta ) → ps ) ;;
}

proof of simp1rr {
	step 1 : wff = simprr () |- ( ( ch ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ch ∧ ( ph ∧ ps ) ) ∧ th ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2ll (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ( ( ph ∧ ps ) ∧ ch ) ∧ ta ) → ph ) ;;
}

proof of simp2ll {
	step 1 : wff = simpll () |- ( ( ( ph ∧ ps ) ∧ ch ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( th ∧ ( ( ph ∧ ps ) ∧ ch ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2lr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ( ( ph ∧ ps ) ∧ ch ) ∧ ta ) → ps ) ;;
}

proof of simp2lr {
	step 1 : wff = simplr () |- ( ( ( ph ∧ ps ) ∧ ch ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( th ∧ ( ( ph ∧ ps ) ∧ ch ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2rl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ( ch ∧ ( ph ∧ ps ) ) ∧ ta ) → ph ) ;;
}

proof of simp2rl {
	step 1 : wff = simprl () |- ( ( ch ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( th ∧ ( ch ∧ ( ph ∧ ps ) ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2rr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ( ch ∧ ( ph ∧ ps ) ) ∧ ta ) → ps ) ;;
}

proof of simp2rr {
	step 1 : wff = simprr () |- ( ( ch ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( th ∧ ( ch ∧ ( ph ∧ ps ) ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3ll (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ta ∧ ( ( ph ∧ ps ) ∧ ch ) ) → ph ) ;;
}

proof of simp3ll {
	step 1 : wff = simpll () |- ( ( ( ph ∧ ps ) ∧ ch ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( th ∧ ta ∧ ( ( ph ∧ ps ) ∧ ch ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3lr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ta ∧ ( ( ph ∧ ps ) ∧ ch ) ) → ps ) ;;
}

proof of simp3lr {
	step 1 : wff = simplr () |- ( ( ( ph ∧ ps ) ∧ ch ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( th ∧ ta ∧ ( ( ph ∧ ps ) ∧ ch ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3rl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ta ∧ ( ch ∧ ( ph ∧ ps ) ) ) → ph ) ;;
}

proof of simp3rl {
	step 1 : wff = simprl () |- ( ( ch ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( th ∧ ta ∧ ( ch ∧ ( ph ∧ ps ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3rr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( th ∧ ta ∧ ( ch ∧ ( ph ∧ ps ) ) ) → ps ) ;;
}

proof of simp3rr {
	step 1 : wff = simprr () |- ( ( ch ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( th ∧ ta ∧ ( ch ∧ ( ph ∧ ps ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl11 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ) → ph ) ;;
}

proof of simpl11 {
	step 1 : wff = simp11 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl12 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ) → ps ) ;;
}

proof of simpl12 {
	step 1 : wff = simp12 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl13 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ) → ch ) ;;
}

proof of simpl13 {
	step 1 : wff = simp13 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl21 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ) → ph ) ;;
}

proof of simpl21 {
	step 1 : wff = simp21 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl22 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ) → ps ) ;;
}

proof of simpl22 {
	step 1 : wff = simp22 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl23 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ) → ch ) ;;
}

proof of simpl23 {
	step 1 : wff = simp23 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ch ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl31 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ph ) ;;
}

proof of simpl31 {
	step 1 : wff = simp31 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl32 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ps ) ;;
}

proof of simpl32 {
	step 1 : wff = simp32 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpl33 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ch ) ;;
}

proof of simpl33 {
	step 1 : wff = simp33 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr11 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ph ) ;;
}

proof of simpr11 {
	step 1 : wff = simp11 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr12 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ps ) ;;
}

proof of simpr12 {
	step 1 : wff = simp12 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr13 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ch ) ;;
}

proof of simpr13 {
	step 1 : wff = simp13 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr21 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ph ) ;;
}

proof of simpr21 {
	step 1 : wff = simp21 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr22 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ps ) ;;
}

proof of simpr22 {
	step 1 : wff = simp22 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr23 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ch ) ;;
}

proof of simpr23 {
	step 1 : wff = simp23 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ch ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr31 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
}

proof of simpr31 {
	step 1 : wff = simp31 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr32 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
}

proof of simpr32 {
	step 1 : wff = simp32 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simpr33 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
}

proof of simpr33 {
	step 1 : wff = simp33 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = adantl (step 1) |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1l1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ∧ et ) → ph ) ;;
}

proof of simp1l1 {
	step 1 : wff = simpl1 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1l2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ∧ et ) → ps ) ;;
}

proof of simp1l2 {
	step 1 : wff = simpl2 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1l3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ∧ et ) → ch ) ;;
}

proof of simp1l3 {
	step 1 : wff = simpl3 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ ta ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1r1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ∧ et ) → ph ) ;;
}

proof of simp1r1 {
	step 1 : wff = simpr1 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1r2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ∧ et ) → ps ) ;;
}

proof of simp1r2 {
	step 1 : wff = simpr2 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp1r3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ∧ et ) → ch ) ;;
}

proof of simp1r3 {
	step 1 : wff = simpr3 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ ta ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2l1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ et ) → ph ) ;;
}

proof of simp2l1 {
	step 1 : wff = simpl1 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2l2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ et ) → ps ) ;;
}

proof of simp2l2 {
	step 1 : wff = simpl2 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2l3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ et ) → ch ) ;;
}

proof of simp2l3 {
	step 1 : wff = simpl3 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2r1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ph ) ;;
}

proof of simp2r1 {
	step 1 : wff = simpr1 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2r2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ps ) ;;
}

proof of simp2r2 {
	step 1 : wff = simpr2 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp2r3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ch ) ;;
}

proof of simp2r3 {
	step 1 : wff = simpr3 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3l1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ph ) ;;
}

proof of simp3l1 {
	step 1 : wff = simpl1 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3l2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ps ) ;;
}

proof of simp3l2 {
	step 1 : wff = simpl2 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3l3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ch ) ;;
}

proof of simp3l3 {
	step 1 : wff = simpl3 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3r1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
}

proof of simp3r1 {
	step 1 : wff = simpr1 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3r2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
}

proof of simp3r2 {
	step 1 : wff = simpr2 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp3r3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
}

proof of simp3r3 {
	step 1 : wff = simpr3 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp11l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ∧ et ) → ph ) ;;
}

proof of simp11l {
	step 1 : wff = simp1l () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp11r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ∧ et ) → ps ) ;;
}

proof of simp11r {
	step 1 : wff = simp1r () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ ta ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp12l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ∧ et ) → ph ) ;;
}

proof of simp12l {
	step 1 : wff = simp2l () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp12r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ∧ et ) → ps ) ;;
}

proof of simp12r {
	step 1 : wff = simp2r () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ ta ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp13l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ∧ et ) → ph ) ;;
}

proof of simp13l {
	step 1 : wff = simp3l () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp13r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ∧ et ) → ps ) ;;
}

proof of simp13r {
	step 1 : wff = simp3r () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ ta ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp21l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ et ) → ph ) ;;
}

proof of simp21l {
	step 1 : wff = simp1l () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp21r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ et ) → ps ) ;;
}

proof of simp21r {
	step 1 : wff = simp1r () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp22l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ et ) → ph ) ;;
}

proof of simp22l {
	step 1 : wff = simp2l () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp22r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ et ) → ps ) ;;
}

proof of simp22r {
	step 1 : wff = simp2r () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp23l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ et ) → ph ) ;;
}

proof of simp23l {
	step 1 : wff = simp3l () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp23r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ et ) → ps ) ;;
}

proof of simp23r {
	step 1 : wff = simp3r () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( ta ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp31l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ph ) ;;
}

proof of simp31l {
	step 1 : wff = simp1l () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp31r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ps ) ;;
}

proof of simp31r {
	step 1 : wff = simp1r () |- ( ( ( ph ∧ ps ) ∧ ch ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ( ph ∧ ps ) ∧ ch ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp32l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ph ) ;;
}

proof of simp32l {
	step 1 : wff = simp2l () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp32r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ps ) ;;
}

proof of simp32r {
	step 1 : wff = simp2r () |- ( ( ch ∧ ( ph ∧ ps ) ∧ th ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ch ∧ ( ph ∧ ps ) ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp33l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ph ) ;;
}

proof of simp33l {
	step 1 : wff = simp3l () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp33r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ta ∧ et ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ps ) ;;
}

proof of simp33r {
	step 1 : wff = simp3r () |- ( ( ch ∧ th ∧ ( ph ∧ ps ) ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( ta ∧ et ∧ ( ch ∧ th ∧ ( ph ∧ ps ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp111 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ∧ ze ) → ph ) ;;
}

proof of simp111 {
	step 1 : wff = simp11 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp112 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ∧ ze ) → ps ) ;;
}

proof of simp112 {
	step 1 : wff = simp12 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp113 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ∧ ze ) → ch ) ;;
}

proof of simp113 {
	step 1 : wff = simp13 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ et ∧ ze ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp121 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ∧ ze ) → ph ) ;;
}

proof of simp121 {
	step 1 : wff = simp21 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp122 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ∧ ze ) → ps ) ;;
}

proof of simp122 {
	step 1 : wff = simp22 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp123 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ∧ ze ) → ch ) ;;
}

proof of simp123 {
	step 1 : wff = simp23 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ et ∧ ze ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp131 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ∧ ze ) → ph ) ;;
}

proof of simp131 {
	step 1 : wff = simp31 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp132 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ∧ ze ) → ps ) ;;
}

proof of simp132 {
	step 1 : wff = simp32 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp133 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ∧ ze ) → ch ) ;;
}

proof of simp133 {
	step 1 : wff = simp33 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = 3ad2ant1 (step 1) |- ( ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ et ∧ ze ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp211 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ ze ) → ph ) ;;
}

proof of simp211 {
	step 1 : wff = simp11 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp212 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ ze ) → ps ) ;;
}

proof of simp212 {
	step 1 : wff = simp12 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp213 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ ze ) → ch ) ;;
}

proof of simp213 {
	step 1 : wff = simp13 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ∧ ze ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp221 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ ze ) → ph ) ;;
}

proof of simp221 {
	step 1 : wff = simp21 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp222 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ ze ) → ps ) ;;
}

proof of simp222 {
	step 1 : wff = simp22 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp223 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ ze ) → ch ) ;;
}

proof of simp223 {
	step 1 : wff = simp23 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ∧ ze ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp231 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ ze ) → ph ) ;;
}

proof of simp231 {
	step 1 : wff = simp31 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp232 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ ze ) → ps ) ;;
}

proof of simp232 {
	step 1 : wff = simp32 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp233 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ ze ) → ch ) ;;
}

proof of simp233 {
	step 1 : wff = simp33 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = 3ad2ant2 (step 1) |- ( ( et ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ∧ ze ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp311 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ph ) ;;
}

proof of simp311 {
	step 1 : wff = simp11 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp312 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ps ) ;;
}

proof of simp312 {
	step 1 : wff = simp12 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp313 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ch ) ;;
}

proof of simp313 {
	step 1 : wff = simp13 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( ( ph ∧ ps ∧ ch ) ∧ th ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp321 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ph ) ;;
}

proof of simp321 {
	step 1 : wff = simp21 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp322 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ps ) ;;
}

proof of simp322 {
	step 1 : wff = simp22 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp323 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ch ) ;;
}

proof of simp323 {
	step 1 : wff = simp23 () |- ( ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( th ∧ ( ph ∧ ps ∧ ch ) ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp331 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
}

proof of simp331 {
	step 1 : wff = simp31 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ph ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp332 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
}

proof of simp332 {
	step 1 : wff = simp32 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ps ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Simplification of conjunction.  (Contributed by NM, 9-Mar-2012.) */

theorem simp333 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( et ∧ ze ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
}

proof of simp333 {
	step 1 : wff = simp33 () |- ( ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) → ch ) ;;
	step 2 : wff = 3ad2ant3 (step 1) |- ( ( et ∧ ze ∧ ( th ∧ ta ∧ ( ph ∧ ps ∧ ch ) ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       24-Feb-2005.) */

theorem 3adantl1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ta ∧ ph ∧ ps ) ∧ ch ) → th ) ;;
}

proof of 3adantl1 {
	step 1 : wff = 3simpc () |- ( ( ta ∧ ph ∧ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = sylan (step 1, hyp 1) |- ( ( ( ta ∧ ph ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       24-Feb-2005.) */

theorem 3adantl2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ta ∧ ps ) ∧ ch ) → th ) ;;
}

proof of 3adantl2 {
	step 1 : wff = 3simpb () |- ( ( ph ∧ ta ∧ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = sylan (step 1, hyp 1) |- ( ( ( ph ∧ ta ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       24-Feb-2005.) */

theorem 3adantl3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ta ) ∧ ch ) → th ) ;;
}

proof of 3adantl3 {
	step 1 : wff = 3simpa () |- ( ( ph ∧ ps ∧ ta ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = sylan (step 1, hyp 1) |- ( ( ( ph ∧ ps ∧ ta ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       27-Apr-2005.) */

theorem 3adantr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ta ∧ ps ∧ ch ) ) → th ) ;;
}

proof of 3adantr1 {
	step 1 : wff = 3simpc () |- ( ( ta ∧ ps ∧ ch ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 1) |- ( ( ph ∧ ( ta ∧ ps ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       27-Apr-2005.) */

theorem 3adantr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ta ∧ ch ) ) → th ) ;;
}

proof of 3adantr2 {
	step 1 : wff = 3simpb () |- ( ( ps ∧ ta ∧ ch ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 1) |- ( ( ph ∧ ( ps ∧ ta ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       27-Apr-2005.) */

theorem 3adantr3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ ta ) ) → th ) ;;
}

proof of 3adantr3 {
	step 1 : wff = 3simpa () |- ( ( ps ∧ ch ∧ ta ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 1) |- ( ( ph ∧ ( ps ∧ ch ∧ ta ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to antecedent.  (Contributed by NM,
       4-Aug-2007.) */

theorem 3ad2antl1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ta ) ∧ ch ) → th ) ;;
}

proof of 3ad2antl1 {
	step 1 : wff = adantlr (hyp 1) |- ( ( ( ph ∧ ta ) ∧ ch ) → th ) ;;
	step 2 : wff = 3adantl2 (step 1) |- ( ( ( ph ∧ ps ∧ ta ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to antecedent.  (Contributed by NM,
       4-Aug-2007.) */

theorem 3ad2antl2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ph ∧ ta ) ∧ ch ) → th ) ;;
}

proof of 3ad2antl2 {
	step 1 : wff = adantlr (hyp 1) |- ( ( ( ph ∧ ta ) ∧ ch ) → th ) ;;
	step 2 : wff = 3adantl1 (step 1) |- ( ( ( ps ∧ ph ∧ ta ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to antecedent.  (Contributed by NM,
       4-Aug-2007.) */

theorem 3ad2antl3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ta ∧ ph ) ∧ ch ) → th ) ;;
}

proof of 3ad2antl3 {
	step 1 : wff = adantll (hyp 1) |- ( ( ( ta ∧ ph ) ∧ ch ) → th ) ;;
	step 2 : wff = 3adantl1 (step 1) |- ( ( ( ps ∧ ta ∧ ph ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to antecedent.  (Contributed by NM,
       25-Dec-2007.) */

theorem 3ad2antr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ch ∧ ps ∧ ta ) ) → th ) ;;
}

proof of 3ad2antr1 {
	step 1 : wff = adantrr (hyp 1) |- ( ( ph ∧ ( ch ∧ ps ) ) → th ) ;;
	step 2 : wff = 3adantr3 (step 1) |- ( ( ph ∧ ( ch ∧ ps ∧ ta ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to antecedent.  (Contributed by NM,
       27-Dec-2007.) */

theorem 3ad2antr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ ta ) ) → th ) ;;
}

proof of 3ad2antr2 {
	step 1 : wff = adantrl (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = 3adantr3 (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ ta ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to antecedent.  (Contributed by NM,
       30-Dec-2007.) */

theorem 3ad2antr3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ta ∧ ch ) ) → th ) ;;
}

proof of 3ad2antr3 {
	step 1 : wff = adantrl (hyp 1) |- ( ( ph ∧ ( ta ∧ ch ) ) → th ) ;;
	step 2 : wff = 3adantr1 (step 1) |- ( ( ph ∧ ( ps ∧ ta ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Remove a hypothesis from the second member of a biimplication.
       (Contributed by FL, 22-Jul-2008.) */

theorem 3anibar (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ( th ↔ ( ch ∧ ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ( th ↔ ta ) ) ;;
}

proof of 3anibar {
	step 1 : wff = simp3 () |- ( ( ph ∧ ps ∧ ch ) → ch ) ;;
	step 2 : wff = biantrurd (step 1) |- ( ( ph ∧ ps ∧ ch ) → ( ta ↔ ( ch ∧ ta ) ) ) ;;
	step 3 : wff = bitr4d (hyp 1, step 2) |- ( ( ph ∧ ps ∧ ch ) → ( th ↔ ta ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Introduction in triple disjunction.  (Contributed by NM, 4-Apr-1995.) */

theorem 3mix1 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ph → ( ph ∨ ps ∨ ch ) ) ;;
}

proof of 3mix1 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 2 : wff = 3orass () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → ( ph ∨ ps ∨ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Introduction in triple disjunction.  (Contributed by NM, 4-Apr-1995.) */

theorem 3mix2 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ph → ( ps ∨ ph ∨ ch ) ) ;;
}

proof of 3mix2 {
	step 1 : wff = 3mix1 () |- ( ph → ( ph ∨ ch ∨ ps ) ) ;;
	step 2 : wff = 3orrot () |- ( ( ps ∨ ph ∨ ch ) ↔ ( ph ∨ ch ∨ ps ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → ( ps ∨ ph ∨ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Introduction in triple disjunction.  (Contributed by NM, 4-Apr-1995.) */

theorem 3mix3 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ph → ( ps ∨ ch ∨ ph ) ) ;;
}

proof of 3mix3 {
	step 1 : wff = 3mix1 () |- ( ph → ( ph ∨ ps ∨ ch ) ) ;;
	step 2 : wff = 3orrot () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ps ∨ ch ∨ ph ) ) ;;
	step 3 : wff = sylib (step 1, step 2) |- ( ph → ( ps ∨ ch ∨ ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Introduction in triple disjunction.  (Contributed by Mario Carneiro,
       6-Oct-2014.) */

theorem 3mix1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ph ∨ ps ∨ ch ) ;;
}

proof of 3mix1i {
	step 1 : wff = 3mix1 () |- ( ph → ( ph ∨ ps ∨ ch ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ph ∨ ps ∨ ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Introduction in triple disjunction.  (Contributed by Mario Carneiro,
       6-Oct-2014.) */

theorem 3mix2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ps ∨ ph ∨ ch ) ;;
}

proof of 3mix2i {
	step 1 : wff = 3mix2 () |- ( ph → ( ps ∨ ph ∨ ch ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ps ∨ ph ∨ ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Introduction in triple disjunction.  (Contributed by Mario Carneiro,
       6-Oct-2014.) */

theorem 3mix3i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ps ∨ ch ∨ ph ) ;;
}

proof of 3mix3i {
	step 1 : wff = 3mix3 () |- ( ph → ( ps ∨ ch ∨ ph ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ps ∨ ch ∨ ph ) ;;
	qed prop 1 = step 2 ;;
}

/*Infer conjunction of premises.  (Contributed by NM, 10-Feb-1995.) */

theorem 3pm3.2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ch ;;
	-----------------------
	prop 1 : wff = |- ( ph ∧ ps ∧ ch ) ;;
}

proof of 3pm3.2i {
	step 1 : wff = pm3.2i (hyp 1, hyp 2) |- ( ph ∧ ps ) ;;
	step 2 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 3 : wff = mpbir2an (step 1, hyp 3, step 2) |- ( ph ∧ ps ∧ ch ) ;;
	qed prop 1 = step 3 ;;
}

/*~ pm3.2 for a triple conjunction.  (Contributed by Alan Sare,
       24-Oct-2011.) */

theorem pm3.2an3 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( ph ∧ ps ∧ ch ) ) ) ) ;;
}

proof of pm3.2an3 {
	step 1 : wff = pm3.2 () |- ( ( ph ∧ ps ) → ( ch → ( ( ph ∧ ps ) ∧ ch ) ) ) ;;
	step 2 : wff = ex (step 1) |- ( ph → ( ps → ( ch → ( ( ph ∧ ps ) ∧ ch ) ) ) ) ;;
	step 3 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 4 : wff = bicomi (step 3) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ps ∧ ch ) ) ;;
	step 5 : wff = syl8ib (step 2, step 4) |- ( ph → ( ps → ( ch → ( ph ∧ ps ∧ ch ) ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Join consequents with conjunction.  (Contributed by NM, 9-Apr-1994.) */

theorem 3jca (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
}

proof of 3jca {
	step 1 : wff = jca31 (hyp 1, hyp 2, hyp 3) |- ( ph → ( ( ps ∧ ch ) ∧ th ) ) ;;
	step 2 : wff = df-3an () |- ( ( ps ∧ ch ∧ th ) ↔ ( ( ps ∧ ch ) ∧ th ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction conjoining the consequents of three implications.
       (Contributed by NM, 25-Sep-2005.) */

theorem 3jcad (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ps → th ) ) ;;
	hyp 3 : wff = |- ( ph → ( ps → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch ∧ th ∧ ta ) ) ) ;;
}

proof of 3jcad {
	step 1 : wff = imp (hyp 1) |- ( ( ph ∧ ps ) → ch ) ;;
	step 2 : wff = imp (hyp 2) |- ( ( ph ∧ ps ) → th ) ;;
	step 3 : wff = imp (hyp 3) |- ( ( ph ∧ ps ) → ta ) ;;
	step 4 : wff = 3jca (step 1, step 2, step 3) |- ( ( ph ∧ ps ) → ( ch ∧ th ∧ ta ) ) ;;
	step 5 : wff = ex (step 4) |- ( ph → ( ps → ( ch ∧ th ∧ ta ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Detach a conjunction of truths in a biconditional.  (Contributed by NM,
       16-Sep-2011.) */

theorem mpbir3an (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ch ;;
	hyp 3 : wff = |- th ;;
	hyp 4 : wff = |- ( ph ↔ ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ph ;;
}

proof of mpbir3an {
	step 1 : wff = 3pm3.2i (hyp 1, hyp 2, hyp 3) |- ( ps ∧ ch ∧ th ) ;;
	step 2 : wff = mpbir (step 1, hyp 4) |- ph ;;
	qed prop 1 = step 2 ;;
}

/*Detach a conjunction of truths in a biconditional.  (Contributed by
       Mario Carneiro, 11-May-2014.)  (Revised by Mario Carneiro,
       9-Jan-2015.) */

theorem mpbir3and (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ph → th ) ;;
	hyp 3 : wff = |- ( ph → ta ) ;;
	hyp 4 : wff = |- ( ph → ( ps ↔ ( ch ∧ th ∧ ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of mpbir3and {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ch ∧ th ∧ ta ) ) ;;
	step 2 : wff = mpbird (step 1, hyp 4) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism inference.  (Contributed by Mario Carneiro, 11-May-2014.) */

theorem syl3anbrc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ta ↔ ( ps ∧ ch ∧ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ta ) ;;
}

proof of syl3anbrc {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = sylibr (step 1, hyp 4) |- ( ph → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Join antecedents and consequents with conjunction.  (Contributed by NM,
       8-Apr-1994.) */

theorem 3anim123i (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	hyp 3 : wff = |- ( ta → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ta ) → ( ps ∧ th ∧ et ) ) ;;
}

proof of 3anim123i {
	step 1 : wff = 3ad2ant1 (hyp 1) |- ( ( ph ∧ ch ∧ ta ) → ps ) ;;
	step 2 : wff = 3ad2ant2 (hyp 2) |- ( ( ph ∧ ch ∧ ta ) → th ) ;;
	step 3 : wff = 3ad2ant3 (hyp 3) |- ( ( ph ∧ ch ∧ ta ) → et ) ;;
	step 4 : wff = 3jca (step 1, step 2, step 3) |- ( ( ph ∧ ch ∧ ta ) → ( ps ∧ th ∧ et ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Add two conjuncts to antecedent and consequent.  (Contributed by Jeff
       Hankins, 16-Aug-2009.) */

theorem 3anim1i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ th ) → ( ps ∧ ch ∧ th ) ) ;;
}

proof of 3anim1i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = id () |- ( th → th ) ;;
	step 3 : wff = 3anim123i (hyp 1, step 1, step 2) |- ( ( ph ∧ ch ∧ th ) → ( ps ∧ ch ∧ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Add two conjuncts to antecedent and consequent.  (Contributed by Jeff
       Hankins, 19-Aug-2009.) */

theorem 3anim3i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ th ∧ ph ) → ( ch ∧ th ∧ ps ) ) ;;
}

proof of 3anim3i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = id () |- ( th → th ) ;;
	step 3 : wff = 3anim123i (step 1, step 2, hyp 1) |- ( ( ch ∧ th ∧ ph ) → ( ch ∧ th ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Join 3 biconditionals with conjunction.  (Contributed by NM,
       21-Apr-1994.) */

theorem 3anbi123i (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch ↔ th ) ;;
	hyp 3 : wff = |- ( ta ↔ et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ta ) ↔ ( ps ∧ th ∧ et ) ) ;;
}

proof of 3anbi123i {
	step 1 : wff = anbi12i (hyp 1, hyp 2) |- ( ( ph ∧ ch ) ↔ ( ps ∧ th ) ) ;;
	step 2 : wff = anbi12i (step 1, hyp 3) |- ( ( ( ph ∧ ch ) ∧ ta ) ↔ ( ( ps ∧ th ) ∧ et ) ) ;;
	step 3 : wff = df-3an () |- ( ( ph ∧ ch ∧ ta ) ↔ ( ( ph ∧ ch ) ∧ ta ) ) ;;
	step 4 : wff = df-3an () |- ( ( ps ∧ th ∧ et ) ↔ ( ( ps ∧ th ) ∧ et ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ph ∧ ch ∧ ta ) ↔ ( ps ∧ th ∧ et ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Join 3 biconditionals with disjunction.  (Contributed by NM,
       17-May-1994.) */

theorem 3orbi123i (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch ↔ th ) ;;
	hyp 3 : wff = |- ( ta ↔ et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ∨ ta ) ↔ ( ps ∨ th ∨ et ) ) ;;
}

proof of 3orbi123i {
	step 1 : wff = orbi12i (hyp 1, hyp 2) |- ( ( ph ∨ ch ) ↔ ( ps ∨ th ) ) ;;
	step 2 : wff = orbi12i (step 1, hyp 3) |- ( ( ( ph ∨ ch ) ∨ ta ) ↔ ( ( ps ∨ th ) ∨ et ) ) ;;
	step 3 : wff = df-3or () |- ( ( ph ∨ ch ∨ ta ) ↔ ( ( ph ∨ ch ) ∨ ta ) ) ;;
	step 4 : wff = df-3or () |- ( ( ps ∨ th ∨ et ) ↔ ( ( ps ∨ th ) ∨ et ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ph ∨ ch ∨ ta ) ↔ ( ps ∨ th ∨ et ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Inference adding two conjuncts to each side of a biconditional.
       (Contributed by NM, 8-Sep-2006.) */

theorem 3anbi1i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ th ) ↔ ( ps ∧ ch ∧ th ) ) ;;
}

proof of 3anbi1i {
	step 1 : wff = biid () |- ( ch ↔ ch ) ;;
	step 2 : wff = biid () |- ( th ↔ th ) ;;
	step 3 : wff = 3anbi123i (hyp 1, step 1, step 2) |- ( ( ph ∧ ch ∧ th ) ↔ ( ps ∧ ch ∧ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Inference adding two conjuncts to each side of a biconditional.
       (Contributed by NM, 8-Sep-2006.) */

theorem 3anbi2i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ph ∧ th ) ↔ ( ch ∧ ps ∧ th ) ) ;;
}

proof of 3anbi2i {
	step 1 : wff = biid () |- ( ch ↔ ch ) ;;
	step 2 : wff = biid () |- ( th ↔ th ) ;;
	step 3 : wff = 3anbi123i (step 1, hyp 1, step 2) |- ( ( ch ∧ ph ∧ th ) ↔ ( ch ∧ ps ∧ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Inference adding two conjuncts to each side of a biconditional.
       (Contributed by NM, 8-Sep-2006.) */

theorem 3anbi3i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ th ∧ ph ) ↔ ( ch ∧ th ∧ ps ) ) ;;
}

proof of 3anbi3i {
	step 1 : wff = biid () |- ( ch ↔ ch ) ;;
	step 2 : wff = biid () |- ( th ↔ th ) ;;
	step 3 : wff = 3anbi123i (step 1, step 2, hyp 1) |- ( ( ch ∧ th ∧ ph ) ↔ ( ch ∧ th ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Importation inference.  (Contributed by NM, 8-Apr-1994.) */

theorem 3imp (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of 3imp {
	step 1 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 2 : wff = imp31 (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 3 : wff = sylbi (step 1, step 2) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Importation from double to triple conjunction.  (Contributed by NM,
       20-Aug-1995.) */

theorem 3impa (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of 3impa {
	step 1 : wff = exp31 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = 3imp (step 1) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Importation from double to triple conjunction.  (Contributed by NM,
       20-Aug-1995.) */

theorem 3impb (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of 3impb {
	step 1 : wff = exp32 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = 3imp (step 1) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Importation to triple conjunction.  (Contributed by NM, 13-Jun-2006.) */

theorem 3impia (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of 3impia {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = 3imp (step 1) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Importation to triple conjunction.  (Contributed by NM, 13-Jun-2006.) */

theorem 3impib (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of 3impib {
	step 1 : wff = exp3a (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = 3imp (step 1) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation inference.  (Contributed by NM, 30-May-1994.) */

theorem 3exp (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
}

proof of 3exp {
	step 1 : wff = pm3.2an3 () |- ( ph → ( ps → ( ch → ( ph ∧ ps ∧ ch ) ) ) ) ;;
	step 2 : wff = syl8 (step 1, hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation from triple to double conjunction.  (Contributed by NM,
       20-Aug-1995.) */

theorem 3expa (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
}

proof of 3expa {
	step 1 : wff = 3exp (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp31 (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation from triple to double conjunction.  (Contributed by NM,
       20-Aug-1995.) */

theorem 3expb (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
}

proof of 3expb {
	step 1 : wff = 3exp (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp32 (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation from triple conjunction.  (Contributed by NM,
       19-May-2007.) */

theorem 3expia (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
}

proof of 3expia {
	step 1 : wff = 3exp (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation from triple conjunction.  (Contributed by NM,
       19-May-2007.) */

theorem 3expib (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
}

proof of 3expib {
	step 1 : wff = 3exp (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation in antecedent.  Swap 1st and 3rd.  (Contributed by NM,
       28-Jan-1996.)  (Proof shortened by Andrew Salmon, 13-May-2011.) */

theorem 3com12 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ∧ ch ) → th ) ;;
}

proof of 3com12 {
	step 1 : wff = 3ancoma () |- ( ( ps ∧ ph ∧ ch ) ↔ ( ph ∧ ps ∧ ch ) ) ;;
	step 2 : wff = sylbi (step 1, hyp 1) |- ( ( ps ∧ ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation in antecedent.  Swap 1st and 3rd.  (Contributed by NM,
       28-Jan-1996.) */

theorem 3com13 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ps ∧ ph ) → th ) ;;
}

proof of 3com13 {
	step 1 : wff = 3anrev () |- ( ( ch ∧ ps ∧ ph ) ↔ ( ph ∧ ps ∧ ch ) ) ;;
	step 2 : wff = sylbi (step 1, hyp 1) |- ( ( ch ∧ ps ∧ ph ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation in antecedent.  Swap 2nd and 3rd.  (Contributed by NM,
       28-Jan-1996.) */

theorem 3com23 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ps ) → th ) ;;
}

proof of 3com23 {
	step 1 : wff = 3exp (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = com23 (step 1) |- ( ph → ( ch → ( ps → th ) ) ) ;;
	step 3 : wff = 3imp (step 2) |- ( ( ph ∧ ch ∧ ps ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Commutation in antecedent.  Rotate left.  (Contributed by NM,
       28-Jan-1996.) */

theorem 3coml (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ch ∧ ph ) → th ) ;;
}

proof of 3coml {
	step 1 : wff = 3com23 (hyp 1) |- ( ( ph ∧ ch ∧ ps ) → th ) ;;
	step 2 : wff = 3com13 (step 1) |- ( ( ps ∧ ch ∧ ph ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Commutation in antecedent.  Rotate right.  (Contributed by NM,
       28-Jan-1996.) */

theorem 3comr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ph ∧ ps ) → th ) ;;
}

proof of 3comr {
	step 1 : wff = 3coml (hyp 1) |- ( ( ps ∧ ch ∧ ph ) → th ) ;;
	step 2 : wff = 3coml (step 1) |- ( ( ch ∧ ph ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       16-Feb-2008.) */

theorem 3adant3r1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ta ∧ ps ∧ ch ) ) → th ) ;;
}

proof of 3adant3r1 {
	step 1 : wff = 3expb (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = 3adantr1 (step 1) |- ( ( ph ∧ ( ta ∧ ps ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       17-Feb-2008.) */

theorem 3adant3r2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ta ∧ ch ) ) → th ) ;;
}

proof of 3adant3r2 {
	step 1 : wff = 3expb (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = 3adantr2 (step 1) |- ( ( ph ∧ ( ps ∧ ta ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       18-Feb-2008.) */

theorem 3adant3r3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ ta ) ) → th ) ;;
}

proof of 3adant3r3 {
	step 1 : wff = 3expb (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = 3adantr3 (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ ta ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Swap conjuncts.  (Contributed by NM, 16-Dec-2007.) */

theorem 3an1rs (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ th ) ∧ ch ) → ta ) ;;
}

proof of 3an1rs {
	step 1 : wff = ex (hyp 1) |- ( ( ph ∧ ps ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = 3exp (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	step 3 : wff = com34 (step 2) |- ( ph → ( ps → ( th → ( ch → ta ) ) ) ) ;;
	step 4 : wff = 3imp (step 3) |- ( ( ph ∧ ps ∧ th ) → ( ch → ta ) ) ;;
	step 5 : wff = imp (step 4) |- ( ( ( ph ∧ ps ∧ th ) ∧ ch ) → ta ) ;;
	qed prop 1 = step 5 ;;
}

/*Importation to left triple conjunction.  (Contributed by NM,
       24-Feb-2005.) */

theorem 3imp1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
}

proof of 3imp1 {
	step 1 : wff = 3imp (hyp 1) |- ( ( ph ∧ ps ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Importation deduction for triple conjunction.  (Contributed by NM,
       26-Oct-2006.) */

theorem 3impd (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
}

proof of 3impd {
	step 1 : wff = com4l (hyp 1) |- ( ps → ( ch → ( th → ( ph → ta ) ) ) ) ;;
	step 2 : wff = 3imp (step 1) |- ( ( ps ∧ ch ∧ th ) → ( ph → ta ) ) ;;
	step 3 : wff = com12 (step 2) |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Importation to right triple conjunction.  (Contributed by NM,
       26-Oct-2006.) */

theorem 3imp2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
}

proof of 3imp2 {
	step 1 : wff = 3impd (hyp 1) |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation from left triple conjunction.  (Contributed by NM,
       24-Feb-2005.) */

theorem 3exp1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of 3exp1 {
	step 1 : wff = ex (hyp 1) |- ( ( ph ∧ ps ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = 3exp (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Exportation deduction for triple conjunction.  (Contributed by NM,
       26-Oct-2006.) */

theorem 3expd (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of 3expd {
	step 1 : wff = com12 (hyp 1) |- ( ( ps ∧ ch ∧ th ) → ( ph → ta ) ) ;;
	step 2 : wff = 3exp (step 1) |- ( ps → ( ch → ( th → ( ph → ta ) ) ) ) ;;
	step 3 : wff = com4r (step 2) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Exportation from right triple conjunction.  (Contributed by NM,
       26-Oct-2006.) */

theorem 3exp2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of 3exp2 {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
	step 2 : wff = 3expd (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple exportation inference.  (Contributed by Jeff Hankins,
       8-Jul-2009.) */

theorem exp5o (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ( ( th ∧ ta ) → et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
}

proof of exp5o {
	step 1 : wff = exp3a (hyp 1) |- ( ( ph ∧ ps ∧ ch ) → ( th → ( ta → et ) ) ) ;;
	step 2 : wff = 3exp (step 1) |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple exportation inference.  (Contributed by Jeff Hankins,
       8-Jul-2009.) */

theorem exp516 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ch ∧ th ) ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
}

proof of exp516 {
	step 1 : wff = exp31 (hyp 1) |- ( ph → ( ( ps ∧ ch ∧ th ) → ( ta → et ) ) ) ;;
	step 2 : wff = 3expd (step 1) |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple exportation inference.  (Contributed by Jeff Hankins,
       8-Jul-2009.) */

theorem exp520 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ ( th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
}

proof of exp520 {
	step 1 : wff = ex (hyp 1) |- ( ( ph ∧ ps ∧ ch ) → ( ( th ∧ ta ) → et ) ) ;;
	step 2 : wff = exp5o (step 1) |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Associative law for conjunction applied to antecedent (eliminates
       syllogism).  (Contributed by Mario Carneiro, 4-Jan-2017.) */

theorem 3anassrs (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ta ) ;;
}

proof of 3anassrs {
	step 1 : wff = 3exp2 (hyp 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	step 2 : wff = imp41 (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem 3adant1l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ta ∧ ph ) ∧ ps ∧ ch ) → th ) ;;
}

proof of 3adant1l {
	step 1 : wff = 3expb (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = adantll (step 1) |- ( ( ( ta ∧ ph ) ∧ ( ps ∧ ch ) ) → th ) ;;
	step 3 : wff = 3impb (step 2) |- ( ( ( ta ∧ ph ) ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem 3adant1r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ta ) ∧ ps ∧ ch ) → th ) ;;
}

proof of 3adant1r {
	step 1 : wff = 3expb (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = adantlr (step 1) |- ( ( ( ph ∧ ta ) ∧ ( ps ∧ ch ) ) → th ) ;;
	step 3 : wff = 3impb (step 2) |- ( ( ( ph ∧ ta ) ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem 3adant2l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ta ∧ ps ) ∧ ch ) → th ) ;;
}

proof of 3adant2l {
	step 1 : wff = 3com12 (hyp 1) |- ( ( ps ∧ ph ∧ ch ) → th ) ;;
	step 2 : wff = 3adant1l (step 1) |- ( ( ( ta ∧ ps ) ∧ ph ∧ ch ) → th ) ;;
	step 3 : wff = 3com12 (step 2) |- ( ( ph ∧ ( ta ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem 3adant2r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ta ) ∧ ch ) → th ) ;;
}

proof of 3adant2r {
	step 1 : wff = 3com12 (hyp 1) |- ( ( ps ∧ ph ∧ ch ) → th ) ;;
	step 2 : wff = 3adant1r (step 1) |- ( ( ( ps ∧ ta ) ∧ ph ∧ ch ) → th ) ;;
	step 3 : wff = 3com12 (step 2) |- ( ( ph ∧ ( ps ∧ ta ) ∧ ch ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem 3adant3l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ta ∧ ch ) ) → th ) ;;
}

proof of 3adant3l {
	step 1 : wff = 3com13 (hyp 1) |- ( ( ch ∧ ps ∧ ph ) → th ) ;;
	step 2 : wff = 3adant1l (step 1) |- ( ( ( ta ∧ ch ) ∧ ps ∧ ph ) → th ) ;;
	step 3 : wff = 3com13 (step 2) |- ( ( ph ∧ ps ∧ ( ta ∧ ch ) ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction adding a conjunct to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem 3adant3r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ( ch ∧ ta ) ) → th ) ;;
}

proof of 3adant3r {
	step 1 : wff = 3com13 (hyp 1) |- ( ( ch ∧ ps ∧ ph ) → th ) ;;
	step 2 : wff = 3adant1r (step 1) |- ( ( ( ch ∧ ta ) ∧ ps ∧ ph ) → th ) ;;
	step 3 : wff = 3com13 (step 2) |- ( ( ph ∧ ps ∧ ( ch ∧ ta ) ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/*Syllogism combined with contraction.  (Contributed by Jeff Hankins,
         1-Aug-2009.) */

theorem syl12anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ( ps ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ta ) ;;
}

proof of syl12anc {
	step 1 : wff = jca32 (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ( ch ∧ th ) ) ) ;;
	step 2 : wff = syl (step 1, hyp 4) |- ( ph → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by Jeff Hankins,
         1-Aug-2009.) */

theorem syl21anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ( ( ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ta ) ;;
}

proof of syl21anc {
	step 1 : wff = jca31 (hyp 1, hyp 2, hyp 3) |- ( ph → ( ( ps ∧ ch ) ∧ th ) ) ;;
	step 2 : wff = syl (step 1, hyp 4) |- ( ph → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl3anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ta ) ;;
}

proof of syl3anc {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = syl (step 1, hyp 4) |- ( ph → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl22anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → et ) ;;
}

proof of syl22anc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = syl12anc (step 1, hyp 3, hyp 4, hyp 5) |- ( ph → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl13anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ( ps ∧ ( ch ∧ th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → et ) ;;
}

proof of syl13anc {
	step 1 : wff = 3jca (hyp 2, hyp 3, hyp 4) |- ( ph → ( ch ∧ th ∧ ta ) ) ;;
	step 2 : wff = syl2anc (hyp 1, step 1, hyp 5) |- ( ph → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl31anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → et ) ;;
}

proof of syl31anc {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = syl2anc (step 1, hyp 4, hyp 5) |- ( ph → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl112anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ( ps ∧ ch ∧ ( th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → et ) ;;
}

proof of syl112anc {
	step 1 : wff = jca (hyp 3, hyp 4) |- ( ph → ( th ∧ ta ) ) ;;
	step 2 : wff = syl3anc (hyp 1, hyp 2, step 1, hyp 5) |- ( ph → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl121anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ( ps ∧ ( ch ∧ th ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → et ) ;;
}

proof of syl121anc {
	step 1 : wff = jca (hyp 2, hyp 3) |- ( ph → ( ch ∧ th ) ) ;;
	step 2 : wff = syl3anc (hyp 1, step 1, hyp 4, hyp 5) |- ( ph → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl211anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ( ( ps ∧ ch ) ∧ th ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → et ) ;;
}

proof of syl211anc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = syl3anc (step 1, hyp 3, hyp 4, hyp 5) |- ( ph → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl23anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl23anc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = syl13anc (step 1, hyp 3, hyp 4, hyp 5, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl32anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ) ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl32anc {
	step 1 : wff = jca (hyp 4, hyp 5) |- ( ph → ( ta ∧ et ) ) ;;
	step 2 : wff = syl31anc (hyp 1, hyp 2, hyp 3, step 1, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl122anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ps ∧ ( ch ∧ th ) ∧ ( ta ∧ et ) ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl122anc {
	step 1 : wff = jca (hyp 4, hyp 5) |- ( ph → ( ta ∧ et ) ) ;;
	step 2 : wff = syl121anc (hyp 1, hyp 2, hyp 3, step 1, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl212anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ( ps ∧ ch ) ∧ th ∧ ( ta ∧ et ) ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl212anc {
	step 1 : wff = jca (hyp 4, hyp 5) |- ( ph → ( ta ∧ et ) ) ;;
	step 2 : wff = syl211anc (hyp 1, hyp 2, hyp 3, step 1, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl221anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ) ∧ et ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl221anc {
	step 1 : wff = jca (hyp 3, hyp 4) |- ( ph → ( th ∧ ta ) ) ;;
	step 2 : wff = syl211anc (hyp 1, hyp 2, step 1, hyp 5, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl113anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ps ∧ ch ∧ ( th ∧ ta ∧ et ) ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl113anc {
	step 1 : wff = 3jca (hyp 3, hyp 4, hyp 5) |- ( ph → ( th ∧ ta ∧ et ) ) ;;
	step 2 : wff = syl3anc (hyp 1, hyp 2, step 1, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl131anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ps ∧ ( ch ∧ th ∧ ta ) ∧ et ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl131anc {
	step 1 : wff = 3jca (hyp 2, hyp 3, hyp 4) |- ( ph → ( ch ∧ th ∧ ta ) ) ;;
	step 2 : wff = syl3anc (hyp 1, step 1, hyp 5, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl311anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ∧ et ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ze ) ;;
}

proof of syl311anc {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = syl3anc (step 1, hyp 4, hyp 5, hyp 6) |- ( ph → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl33anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ∧ ze ) ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl33anc {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = syl13anc (step 1, hyp 4, hyp 5, hyp 6, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl222anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ) ∧ ( et ∧ ze ) ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl222anc {
	step 1 : wff = jca (hyp 5, hyp 6) |- ( ph → ( et ∧ ze ) ) ;;
	step 2 : wff = syl221anc (hyp 1, hyp 2, hyp 3, hyp 4, step 1, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl123anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ps ∧ ( ch ∧ th ) ∧ ( ta ∧ et ∧ ze ) ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl123anc {
	step 1 : wff = jca (hyp 2, hyp 3) |- ( ph → ( ch ∧ th ) ) ;;
	step 2 : wff = syl113anc (hyp 1, step 1, hyp 4, hyp 5, hyp 6, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Jul-2012.) */

theorem syl132anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ps ∧ ( ch ∧ th ∧ ta ) ∧ ( et ∧ ze ) ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl132anc {
	step 1 : wff = jca (hyp 5, hyp 6) |- ( ph → ( et ∧ ze ) ) ;;
	step 2 : wff = syl131anc (hyp 1, hyp 2, hyp 3, hyp 4, step 1, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl213anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ( ps ∧ ch ) ∧ th ∧ ( ta ∧ et ∧ ze ) ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl213anc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = syl113anc (step 1, hyp 3, hyp 4, hyp 5, hyp 6, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl231anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ∧ ze ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl231anc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = syl131anc (step 1, hyp 3, hyp 4, hyp 5, hyp 6, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Jul-2012.) */

theorem syl312anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ∧ ( et ∧ ze ) ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl312anc {
	step 1 : wff = jca (hyp 5, hyp 6) |- ( ph → ( et ∧ ze ) ) ;;
	step 2 : wff = syl311anc (hyp 1, hyp 2, hyp 3, hyp 4, step 1, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Jul-2012.) */

theorem syl321anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ) ∧ ze ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → si ) ;;
}

proof of syl321anc {
	step 1 : wff = jca (hyp 4, hyp 5) |- ( ph → ( ta ∧ et ) ) ;;
	step 2 : wff = syl311anc (hyp 1, hyp 2, hyp 3, step 1, hyp 6, hyp 7) |- ( ph → si ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl133anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ( ps ∧ ( ch ∧ th ∧ ta ) ∧ ( et ∧ ze ∧ si ) ) → rh ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → rh ) ;;
}

proof of syl133anc {
	step 1 : wff = 3jca (hyp 5, hyp 6, hyp 7) |- ( ph → ( et ∧ ze ∧ si ) ) ;;
	step 2 : wff = syl131anc (hyp 1, hyp 2, hyp 3, hyp 4, step 1, hyp 8) |- ( ph → rh ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl313anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ∧ ( et ∧ ze ∧ si ) ) → rh ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → rh ) ;;
}

proof of syl313anc {
	step 1 : wff = 3jca (hyp 5, hyp 6, hyp 7) |- ( ph → ( et ∧ ze ∧ si ) ) ;;
	step 2 : wff = syl311anc (hyp 1, hyp 2, hyp 3, hyp 4, step 1, hyp 8) |- ( ph → rh ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl331anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ∧ ze ) ∧ si ) → rh ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → rh ) ;;
}

proof of syl331anc {
	step 1 : wff = 3jca (hyp 4, hyp 5, hyp 6) |- ( ph → ( ta ∧ et ∧ ze ) ) ;;
	step 2 : wff = syl311anc (hyp 1, hyp 2, hyp 3, step 1, hyp 7, hyp 8) |- ( ph → rh ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl223anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ) ∧ ( et ∧ ze ∧ si ) ) → rh ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → rh ) ;;
}

proof of syl223anc {
	step 1 : wff = jca (hyp 3, hyp 4) |- ( ph → ( th ∧ ta ) ) ;;
	step 2 : wff = syl213anc (hyp 1, hyp 2, step 1, hyp 5, hyp 6, hyp 7, hyp 8) |- ( ph → rh ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl232anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ∧ ( ze ∧ si ) ) → rh ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → rh ) ;;
}

proof of syl232anc {
	step 1 : wff = jca (hyp 6, hyp 7) |- ( ph → ( ze ∧ si ) ) ;;
	step 2 : wff = syl231anc (hyp 1, hyp 2, hyp 3, hyp 4, hyp 5, step 1, hyp 8) |- ( ph → rh ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl322anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ) ∧ ( ze ∧ si ) ) → rh ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → rh ) ;;
}

proof of syl322anc {
	step 1 : wff = jca (hyp 6, hyp 7) |- ( ph → ( ze ∧ si ) ) ;;
	step 2 : wff = syl321anc (hyp 1, hyp 2, hyp 3, hyp 4, hyp 5, step 1, hyp 8) |- ( ph → rh ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl233anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ph → rh ) ;;
	hyp 9 : wff = |- ( ( ( ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ∧ ( ze ∧ si ∧ rh ) ) → mu ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → mu ) ;;
}

proof of syl233anc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = syl133anc (step 1, hyp 3, hyp 4, hyp 5, hyp 6, hyp 7, hyp 8, hyp 9) |- ( ph → mu ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl323anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ph → rh ) ;;
	hyp 9 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ) ∧ ( ze ∧ si ∧ rh ) ) → mu ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → mu ) ;;
}

proof of syl323anc {
	step 1 : wff = jca (hyp 4, hyp 5) |- ( ph → ( ta ∧ et ) ) ;;
	step 2 : wff = syl313anc (hyp 1, hyp 2, hyp 3, step 1, hyp 6, hyp 7, hyp 8, hyp 9) |- ( ph → mu ) ;;
	qed prop 1 = step 2 ;;
}

/*Syllogism combined with contraction.  (Contributed by NM,
         11-Mar-2012.) */

theorem syl332anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ph → rh ) ;;
	hyp 9 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ∧ ze ) ∧ ( si ∧ rh ) ) → mu ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → mu ) ;;
}

proof of syl332anc {
	step 1 : wff = jca (hyp 7, hyp 8) |- ( ph → ( si ∧ rh ) ) ;;
	step 2 : wff = syl331anc (hyp 1, hyp 2, hyp 3, hyp 4, hyp 5, hyp 6, step 1, hyp 9) |- ( ph → mu ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference combined with contraction.  (Contributed by NM,
         10-Mar-2012.) */

theorem syl333anc (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ta ) ;;
	hyp 5 : wff = |- ( ph → et ) ;;
	hyp 6 : wff = |- ( ph → ze ) ;;
	hyp 7 : wff = |- ( ph → si ) ;;
	hyp 8 : wff = |- ( ph → rh ) ;;
	hyp 9 : wff = |- ( ph → mu ) ;;
	hyp 10 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ( ta ∧ et ∧ ze ) ∧ ( si ∧ rh ∧ mu ) ) → la ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → la ) ;;
}

proof of syl333anc {
	step 1 : wff = 3jca (hyp 7, hyp 8, hyp 9) |- ( ph → ( si ∧ rh ∧ mu ) ) ;;
	step 2 : wff = syl331anc (hyp 1, hyp 2, hyp 3, hyp 4, hyp 5, hyp 6, step 1, hyp 10) |- ( ph → la ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
}

proof of syl3an1 {
	step 1 : wff = 3anim1i (hyp 1) |- ( ( ph ∧ ch ∧ th ) → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = syl (step 1, hyp 2) |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ∧ th ) → ta ) ;;
}

proof of syl3an2 {
	step 1 : wff = 3exp (hyp 2) |- ( ps → ( ch → ( th → ta ) ) ) ;;
	step 2 : wff = syl5 (hyp 1, step 1) |- ( ps → ( ph → ( th → ta ) ) ) ;;
	step 3 : wff = 3imp (step 2) |- ( ( ps ∧ ph ∧ th ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → th ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ch ∧ ph ) → ta ) ;;
}

proof of syl3an3 {
	step 1 : wff = 3exp (hyp 2) |- ( ps → ( ch → ( th → ta ) ) ) ;;
	step 2 : wff = syl7 (hyp 1, step 1) |- ( ps → ( ch → ( ph → ta ) ) ) ;;
	step 3 : wff = 3imp (step 2) |- ( ( ps ∧ ch ∧ ph ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an1b (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
}

proof of syl3an1b {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = syl3an1 (step 1, hyp 2) |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an2b (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph ↔ ch ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ∧ th ) → ta ) ;;
}

proof of syl3an2b {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ch ) ;;
	step 2 : wff = syl3an2 (step 1, hyp 2) |- ( ( ps ∧ ph ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an3b (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph ↔ th ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ch ∧ ph ) → ta ) ;;
}

proof of syl3an3b {
	step 1 : wff = biimpi (hyp 1) |- ( ph → th ) ;;
	step 2 : wff = syl3an3 (step 1, hyp 2) |- ( ( ps ∧ ch ∧ ph ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an1br (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ps ↔ ph ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
}

proof of syl3an1br {
	step 1 : wff = biimpri (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = syl3an1 (step 1, hyp 2) |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an2br (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ch ↔ ph ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ∧ th ) → ta ) ;;
}

proof of syl3an2br {
	step 1 : wff = biimpri (hyp 1) |- ( ph → ch ) ;;
	step 2 : wff = syl3an2 (step 1, hyp 2) |- ( ( ps ∧ ph ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 22-Aug-1995.) */

theorem syl3an3br (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( th ↔ ph ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ch ∧ ph ) → ta ) ;;
}

proof of syl3an3br {
	step 1 : wff = biimpri (hyp 1) |- ( ph → th ) ;;
	step 2 : wff = syl3an3 (step 1, hyp 2) |- ( ( ps ∧ ch ∧ ph ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple syllogism inference.  (Contributed by NM, 13-May-2004.) */

theorem syl3an (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	hyp 3 : wff = |- ( ta → et ) ;;
	hyp 4 : wff = |- ( ( ps ∧ th ∧ et ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ta ) → ze ) ;;
}

proof of syl3an {
	step 1 : wff = 3anim123i (hyp 1, hyp 2, hyp 3) |- ( ( ph ∧ ch ∧ ta ) → ( ps ∧ th ∧ et ) ) ;;
	step 2 : wff = syl (step 1, hyp 4) |- ( ( ph ∧ ch ∧ ta ) → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple syllogism inference.  (Contributed by NM, 15-Oct-2005.) */

theorem syl3anb (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch ↔ th ) ;;
	hyp 3 : wff = |- ( ta ↔ et ) ;;
	hyp 4 : wff = |- ( ( ps ∧ th ∧ et ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ta ) → ze ) ;;
}

proof of syl3anb {
	step 1 : wff = 3anbi123i (hyp 1, hyp 2, hyp 3) |- ( ( ph ∧ ch ∧ ta ) ↔ ( ps ∧ th ∧ et ) ) ;;
	step 2 : wff = sylbi (step 1, hyp 4) |- ( ( ph ∧ ch ∧ ta ) → ze ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple syllogism inference.  (Contributed by NM, 29-Dec-2011.) */

theorem syl3anbr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ps ↔ ph ) ;;
	hyp 2 : wff = |- ( th ↔ ch ) ;;
	hyp 3 : wff = |- ( et ↔ ta ) ;;
	hyp 4 : wff = |- ( ( ps ∧ th ∧ et ) → ze ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ta ) → ze ) ;;
}

proof of syl3anbr {
	step 1 : wff = bicomi (hyp 1) |- ( ph ↔ ps ) ;;
	step 2 : wff = bicomi (hyp 2) |- ( ch ↔ th ) ;;
	step 3 : wff = bicomi (hyp 3) |- ( ta ↔ et ) ;;
	step 4 : wff = syl3anb (step 1, step 2, step 3, hyp 4) |- ( ( ph ∧ ch ∧ ta ) → ze ) ;;
	qed prop 1 = step 4 ;;
}

/*A syllogism inference.  (Contributed by NM, 20-May-2007.) */

theorem syld3an3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → ta ) ;;
}

proof of syld3an3 {
	step 1 : wff = simp1 () |- ( ( ph ∧ ps ∧ ch ) → ph ) ;;
	step 2 : wff = simp2 () |- ( ( ph ∧ ps ∧ ch ) → ps ) ;;
	step 3 : wff = syl3anc (step 1, step 2, hyp 1, hyp 2) |- ( ( ph ∧ ps ∧ ch ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*A syllogism inference.  (Contributed by NM, 7-Jul-2008.) */

theorem syld3an1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ch ∧ ps ∧ th ) → ph ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ps ∧ th ) → ta ) ;;
}

proof of syld3an1 {
	step 1 : wff = 3com13 (hyp 1) |- ( ( th ∧ ps ∧ ch ) → ph ) ;;
	step 2 : wff = 3com13 (hyp 2) |- ( ( th ∧ ps ∧ ph ) → ta ) ;;
	step 3 : wff = syld3an3 (step 1, step 2) |- ( ( th ∧ ps ∧ ch ) → ta ) ;;
	step 4 : wff = 3com13 (step 3) |- ( ( ch ∧ ps ∧ th ) → ta ) ;;
	qed prop 1 = step 4 ;;
}

/*A syllogism inference.  (Contributed by NM, 20-May-2007.) */

theorem syld3an2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ch ∧ th ) → ps ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
}

proof of syld3an2 {
	step 1 : wff = 3com23 (hyp 1) |- ( ( ph ∧ th ∧ ch ) → ps ) ;;
	step 2 : wff = 3com23 (hyp 2) |- ( ( ph ∧ th ∧ ps ) → ta ) ;;
	step 3 : wff = syld3an3 (step 1, step 2) |- ( ( ph ∧ th ∧ ch ) → ta ) ;;
	step 4 : wff = 3com23 (step 3) |- ( ( ph ∧ ch ∧ th ) → ta ) ;;
	qed prop 1 = step 4 ;;
}

/*A syllogism inference.  (Contributed by NM, 24-Feb-2005.) */

theorem syl3anl1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ∧ th ) ∧ ta ) → et ) ;;
}

proof of syl3anl1 {
	step 1 : wff = 3anim1i (hyp 1) |- ( ( ph ∧ ch ∧ th ) → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ( ph ∧ ch ∧ th ) ∧ ta ) → et ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 24-Feb-2005.) */

theorem syl3anl2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ph ∧ th ) ∧ ta ) → et ) ;;
}

proof of syl3anl2 {
	step 1 : wff = ex (hyp 2) |- ( ( ps ∧ ch ∧ th ) → ( ta → et ) ) ;;
	step 2 : wff = syl3an2 (hyp 1, step 1) |- ( ( ps ∧ ph ∧ th ) → ( ta → et ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ( ps ∧ ph ∧ th ) ∧ ta ) → et ) ;;
	qed prop 1 = step 3 ;;
}

/*A syllogism inference.  (Contributed by NM, 24-Feb-2005.) */

theorem syl3anl3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → th ) ;;
	hyp 2 : wff = |- ( ( ( ps ∧ ch ∧ th ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ch ∧ ph ) ∧ ta ) → et ) ;;
}

proof of syl3anl3 {
	step 1 : wff = 3anim3i (hyp 1) |- ( ( ps ∧ ch ∧ ph ) → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ( ps ∧ ch ∧ ph ) ∧ ta ) → et ) ;;
	qed prop 1 = step 2 ;;
}

/*A triple syllogism inference.  (Contributed by NM, 24-Dec-2006.) */

theorem syl3anl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	hyp 3 : wff = |- ( ta → et ) ;;
	hyp 4 : wff = |- ( ( ( ps ∧ th ∧ et ) ∧ ze ) → si ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ∧ ta ) ∧ ze ) → si ) ;;
}

proof of syl3anl {
	step 1 : wff = 3anim123i (hyp 1, hyp 2, hyp 3) |- ( ( ph ∧ ch ∧ ta ) → ( ps ∧ th ∧ et ) ) ;;
	step 2 : wff = sylan (step 1, hyp 4) |- ( ( ( ph ∧ ch ∧ ta ) ∧ ze ) → si ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 31-Jul-2007.) */

theorem syl3anr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ( ch ∧ ( ps ∧ th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ( ph ∧ th ∧ ta ) ) → et ) ;;
}

proof of syl3anr1 {
	step 1 : wff = 3anim1i (hyp 1) |- ( ( ph ∧ th ∧ ta ) → ( ps ∧ th ∧ ta ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ch ∧ ( ph ∧ th ∧ ta ) ) → et ) ;;
	qed prop 1 = step 2 ;;
}

/*A syllogism inference.  (Contributed by NM, 1-Aug-2007.) */

theorem syl3anr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → th ) ;;
	hyp 2 : wff = |- ( ( ch ∧ ( ps ∧ th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ( ps ∧ ph ∧ ta ) ) → et ) ;;
}

proof of syl3anr2 {
	step 1 : wff = ancoms (hyp 2) |- ( ( ( ps ∧ th ∧ ta ) ∧ ch ) → et ) ;;
	step 2 : wff = syl3anl2 (hyp 1, step 1) |- ( ( ( ps ∧ ph ∧ ta ) ∧ ch ) → et ) ;;
	step 3 : wff = ancoms (step 2) |- ( ( ch ∧ ( ps ∧ ph ∧ ta ) ) → et ) ;;
	qed prop 1 = step 3 ;;
}

/*A syllogism inference.  (Contributed by NM, 23-Aug-2007.) */

theorem syl3anr3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ta ) ;;
	hyp 2 : wff = |- ( ( ch ∧ ( ps ∧ th ∧ ta ) ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ( ps ∧ th ∧ ph ) ) → et ) ;;
}

proof of syl3anr3 {
	step 1 : wff = 3anim3i (hyp 1) |- ( ( ps ∧ th ∧ ph ) → ( ps ∧ th ∧ ta ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ch ∧ ( ps ∧ th ∧ ph ) ) → et ) ;;
	qed prop 1 = step 2 ;;
}

/*Importation inference (undistribute conjunction).  (Contributed by NM,
       14-Aug-1995.) */

theorem 3impdi (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ph ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of 3impdi {
	step 1 : wff = anandis (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = 3impb (step 1) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Importation inference (undistribute conjunction).  (Contributed by NM,
       20-Aug-1995.) */

theorem 3impdir (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ ps ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ∧ ps ) → th ) ;;
}

proof of 3impdir {
	step 1 : wff = anandirs (hyp 1) |- ( ( ( ph ∧ ch ) ∧ ps ) → th ) ;;
	step 2 : wff = 3impa (step 1) |- ( ( ph ∧ ch ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference from idempotent law for conjunction.  (Contributed by NM,
       7-Mar-2008.) */

theorem 3anidm12 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of 3anidm12 {
	step 1 : wff = 3expib (hyp 1) |- ( ph → ( ( ph ∧ ps ) → ch ) ) ;;
	step 2 : wff = anabsi5 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference from idempotent law for conjunction.  (Contributed by NM,
       7-Mar-2008.) */

theorem 3anidm13 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ph ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of 3anidm13 {
	step 1 : wff = 3com23 (hyp 1) |- ( ( ph ∧ ph ∧ ps ) → ch ) ;;
	step 2 : wff = 3anidm12 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference from idempotent law for conjunction.  (Contributed by NM,
       1-Feb-2007.) */

theorem 3anidm23 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of 3anidm23 {
	step 1 : wff = 3expa (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ps ) → ch ) ;;
	step 2 : wff = anabss3 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Infer implication from triple disjunction.  (Contributed by NM,
       26-Sep-2006.) */

theorem 3ori (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ∨ ps ∨ ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ¬ ph ∧ ¬ ps ) → ch ) ;;
}

proof of 3ori {
	step 1 : wff = ioran () |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = df-3or () |- ( ( ph ∨ ps ∨ ch ) ↔ ( ( ph ∨ ps ) ∨ ch ) ) ;;
	step 3 : wff = mpbi (hyp 1, step 2) |- ( ( ph ∨ ps ) ∨ ch ) ;;
	step 4 : wff = ori (step 3) |- ( ¬ ( ph ∨ ps ) → ch ) ;;
	step 5 : wff = sylbir (step 1, step 4) |- ( ( ¬ ph ∧ ¬ ps ) → ch ) ;;
	qed prop 1 = step 5 ;;
}

/*Disjunction of 3 antecedents.  (Contributed by NM, 8-Apr-1994.) */

theorem 3jao (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) → ( ( ph ∨ ch ∨ th ) → ps ) ) ;;
}

proof of 3jao {
	step 1 : wff = df-3or () |- ( ( ph ∨ ch ∨ th ) ↔ ( ( ph ∨ ch ) ∨ th ) ) ;;
	step 2 : wff = jao () |- ( ( ph → ps ) → ( ( ch → ps ) → ( ( ph ∨ ch ) → ps ) ) ) ;;
	step 3 : wff = jao () |- ( ( ( ph ∨ ch ) → ps ) → ( ( th → ps ) → ( ( ( ph ∨ ch ) ∨ th ) → ps ) ) ) ;;
	step 4 : wff = syl6 (step 2, step 3) |- ( ( ph → ps ) → ( ( ch → ps ) → ( ( th → ps ) → ( ( ( ph ∨ ch ) ∨ th ) → ps ) ) ) ) ;;
	step 5 : wff = 3imp (step 4) |- ( ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) → ( ( ( ph ∨ ch ) ∨ th ) → ps ) ) ;;
	step 6 : wff = syl5bi (step 1, step 5) |- ( ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) → ( ( ph ∨ ch ∨ th ) → ps ) ) ;;
	qed prop 1 = step 6 ;;
}

/*Disjunction of 3 antecedents.  (Contributed by NM, 13-Sep-2011.) */

theorem 3jaob (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ch ∨ th ) → ps ) ↔ ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) ) ;;
}

proof of 3jaob {
	step 1 : wff = 3mix1 () |- ( ph → ( ph ∨ ch ∨ th ) ) ;;
	step 2 : wff = imim1i (step 1) |- ( ( ( ph ∨ ch ∨ th ) → ps ) → ( ph → ps ) ) ;;
	step 3 : wff = 3mix2 () |- ( ch → ( ph ∨ ch ∨ th ) ) ;;
	step 4 : wff = imim1i (step 3) |- ( ( ( ph ∨ ch ∨ th ) → ps ) → ( ch → ps ) ) ;;
	step 5 : wff = 3mix3 () |- ( th → ( ph ∨ ch ∨ th ) ) ;;
	step 6 : wff = imim1i (step 5) |- ( ( ( ph ∨ ch ∨ th ) → ps ) → ( th → ps ) ) ;;
	step 7 : wff = 3jca (step 2, step 4, step 6) |- ( ( ( ph ∨ ch ∨ th ) → ps ) → ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) ) ;;
	step 8 : wff = 3jao () |- ( ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) → ( ( ph ∨ ch ∨ th ) → ps ) ) ;;
	step 9 : wff = impbii (step 7, step 8) |- ( ( ( ph ∨ ch ∨ th ) → ps ) ↔ ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) ) ;;
	qed prop 1 = step 9 ;;
}

/*Disjunction of 3 antecedents (inference).  (Contributed by NM,
       12-Sep-1995.) */

theorem 3jaoi (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ps ) ;;
	hyp 3 : wff = |- ( th → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ∨ th ) → ps ) ;;
}

proof of 3jaoi {
	step 1 : wff = 3pm3.2i (hyp 1, hyp 2, hyp 3) |- ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) ;;
	step 2 : wff = 3jao () |- ( ( ( ph → ps ) ∧ ( ch → ps ) ∧ ( th → ps ) ) → ( ( ph ∨ ch ∨ th ) → ps ) ) ;;
	step 3 : wff = ax-mp (step 1, step 2) |- ( ( ph ∨ ch ∨ th ) → ps ) ;;
	qed prop 1 = step 3 ;;
}

/*Disjunction of 3 antecedents (deduction).  (Contributed by NM,
       14-Oct-2005.) */

theorem 3jaod (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ch ) ) ;;
	hyp 3 : wff = |- ( ph → ( ta → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ∨ ta ) → ch ) ) ;;
}

proof of 3jaod {
	step 1 : wff = 3jao () |- ( ( ( ps → ch ) ∧ ( th → ch ) ∧ ( ta → ch ) ) → ( ( ps ∨ th ∨ ta ) → ch ) ) ;;
	step 2 : wff = syl3anc (hyp 1, hyp 2, hyp 3, step 1) |- ( ph → ( ( ps ∨ th ∨ ta ) → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Disjunction of 3 antecedents (inference).  (Contributed by NM,
       14-Oct-2005.) */

theorem 3jaoian (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( th ∧ ps ) → ch ) ;;
	hyp 3 : wff = |- ( ( ta ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∨ th ∨ ta ) ∧ ps ) → ch ) ;;
}

proof of 3jaoian {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( th → ( ps → ch ) ) ;;
	step 3 : wff = ex (hyp 3) |- ( ta → ( ps → ch ) ) ;;
	step 4 : wff = 3jaoi (step 1, step 2, step 3) |- ( ( ph ∨ th ∨ ta ) → ( ps → ch ) ) ;;
	step 5 : wff = imp (step 4) |- ( ( ( ph ∨ th ∨ ta ) ∧ ps ) → ch ) ;;
	qed prop 1 = step 5 ;;
}

/*Disjunction of 3 antecedents (deduction).  (Contributed by NM,
       14-Oct-2005.) */

theorem 3jaodan (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ th ) → ch ) ;;
	hyp 3 : wff = |- ( ( ph ∧ ta ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∨ th ∨ ta ) ) → ch ) ;;
}

proof of 3jaodan {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ph → ( th → ch ) ) ;;
	step 3 : wff = ex (hyp 3) |- ( ph → ( ta → ch ) ) ;;
	step 4 : wff = 3jaod (step 1, step 2, step 3) |- ( ph → ( ( ps ∨ th ∨ ta ) → ch ) ) ;;
	step 5 : wff = imp (step 4) |- ( ( ph ∧ ( ps ∨ th ∨ ta ) ) → ch ) ;;
	qed prop 1 = step 5 ;;
}

/*Inference conjoining and disjoining the antecedents of three
       implications.  (Contributed by Jeff Hankins, 15-Aug-2009.)  (Proof
       shortened by Andrew Salmon, 13-May-2011.) */

theorem 3jaao (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta → ch ) ) ;;
	hyp 3 : wff = |- ( et → ( ze → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ∧ et ) → ( ( ps ∨ ta ∨ ze ) → ch ) ) ;;
}

proof of 3jaao {
	step 1 : wff = 3ad2ant1 (hyp 1) |- ( ( ph ∧ th ∧ et ) → ( ps → ch ) ) ;;
	step 2 : wff = 3ad2ant2 (hyp 2) |- ( ( ph ∧ th ∧ et ) → ( ta → ch ) ) ;;
	step 3 : wff = 3ad2ant3 (hyp 3) |- ( ( ph ∧ th ∧ et ) → ( ze → ch ) ) ;;
	step 4 : wff = 3jaod (step 1, step 2, step 3) |- ( ( ph ∧ th ∧ et ) → ( ( ps ∨ ta ∨ ze ) → ch ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Nested syllogism inference conjoining 3 dissimilar antecedents.
       (Contributed by NM, 1-May-1995.) */

theorem syl3an9b (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch ↔ ta ) ) ;;
	hyp 3 : wff = |- ( et → ( ta ↔ ze ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ∧ et ) → ( ps ↔ ze ) ) ;;
}

proof of syl3an9b {
	step 1 : wff = sylan9bb (hyp 1, hyp 2) |- ( ( ph ∧ th ) → ( ps ↔ ta ) ) ;;
	step 2 : wff = sylan9bb (step 1, hyp 3) |- ( ( ( ph ∧ th ) ∧ et ) → ( ps ↔ ze ) ) ;;
	step 3 : wff = 3impa (step 2) |- ( ( ph ∧ th ∧ et ) → ( ps ↔ ze ) ) ;;
	qed prop 1 = step 3 ;;
}

/*Deduction joining 3 equivalences to form equivalence of disjunctions.
       (Contributed by NM, 20-Apr-1994.) */

theorem 3orbi123d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	hyp 3 : wff = |- ( ph → ( et ↔ ze ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ∨ et ) ↔ ( ch ∨ ta ∨ ze ) ) ) ;;
}

proof of 3orbi123d {
	step 1 : wff = orbi12d (hyp 1, hyp 2) |- ( ph → ( ( ps ∨ th ) ↔ ( ch ∨ ta ) ) ) ;;
	step 2 : wff = orbi12d (step 1, hyp 3) |- ( ph → ( ( ( ps ∨ th ) ∨ et ) ↔ ( ( ch ∨ ta ) ∨ ze ) ) ) ;;
	step 3 : wff = df-3or () |- ( ( ps ∨ th ∨ et ) ↔ ( ( ps ∨ th ) ∨ et ) ) ;;
	step 4 : wff = df-3or () |- ( ( ch ∨ ta ∨ ze ) ↔ ( ( ch ∨ ta ) ∨ ze ) ) ;;
	step 5 : wff = 3bitr4g (step 2, step 3, step 4) |- ( ph → ( ( ps ∨ th ∨ et ) ↔ ( ch ∨ ta ∨ ze ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Deduction joining 3 equivalences to form equivalence of conjunctions.
       (Contributed by NM, 22-Apr-1994.) */

theorem 3anbi123d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	hyp 3 : wff = |- ( ph → ( et ↔ ze ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ∧ et ) ↔ ( ch ∧ ta ∧ ze ) ) ) ;;
}

proof of 3anbi123d {
	step 1 : wff = anbi12d (hyp 1, hyp 2) |- ( ph → ( ( ps ∧ th ) ↔ ( ch ∧ ta ) ) ) ;;
	step 2 : wff = anbi12d (step 1, hyp 3) |- ( ph → ( ( ( ps ∧ th ) ∧ et ) ↔ ( ( ch ∧ ta ) ∧ ze ) ) ) ;;
	step 3 : wff = df-3an () |- ( ( ps ∧ th ∧ et ) ↔ ( ( ps ∧ th ) ∧ et ) ) ;;
	step 4 : wff = df-3an () |- ( ( ch ∧ ta ∧ ze ) ↔ ( ( ch ∧ ta ) ∧ ze ) ) ;;
	step 5 : wff = 3bitr4g (step 2, step 3, step 4) |- ( ph → ( ( ps ∧ th ∧ et ) ↔ ( ch ∧ ta ∧ ze ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Deduction conjoining and adding a conjunct to equivalences.
       (Contributed by NM, 8-Sep-2006.) */

theorem 3anbi12d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ∧ et ) ↔ ( ch ∧ ta ∧ et ) ) ) ;;
}

proof of 3anbi12d {
	step 1 : wff = biidd () |- ( ph → ( et ↔ et ) ) ;;
	step 2 : wff = 3anbi123d (hyp 1, hyp 2, step 1) |- ( ph → ( ( ps ∧ th ∧ et ) ↔ ( ch ∧ ta ∧ et ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction conjoining and adding a conjunct to equivalences.
       (Contributed by NM, 8-Sep-2006.) */

theorem 3anbi13d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ et ∧ th ) ↔ ( ch ∧ et ∧ ta ) ) ) ;;
}

proof of 3anbi13d {
	step 1 : wff = biidd () |- ( ph → ( et ↔ et ) ) ;;
	step 2 : wff = 3anbi123d (hyp 1, step 1, hyp 2) |- ( ph → ( ( ps ∧ et ∧ th ) ↔ ( ch ∧ et ∧ ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction conjoining and adding a conjunct to equivalences.
       (Contributed by NM, 8-Sep-2006.) */

theorem 3anbi23d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( et ∧ ps ∧ th ) ↔ ( et ∧ ch ∧ ta ) ) ) ;;
}

proof of 3anbi23d {
	step 1 : wff = biidd () |- ( ph → ( et ↔ et ) ) ;;
	step 2 : wff = 3anbi123d (step 1, hyp 1, hyp 2) |- ( ph → ( ( et ∧ ps ∧ th ) ↔ ( et ∧ ch ∧ ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to an equivalence.  (Contributed by NM,
       8-Sep-2006.) */

theorem 3anbi1d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ∧ ta ) ↔ ( ch ∧ th ∧ ta ) ) ) ;;
}

proof of 3anbi1d {
	step 1 : wff = biidd () |- ( ph → ( th ↔ th ) ) ;;
	step 2 : wff = 3anbi12d (hyp 1, step 1) |- ( ph → ( ( ps ∧ th ∧ ta ) ↔ ( ch ∧ th ∧ ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to an equivalence.  (Contributed by NM,
       8-Sep-2006.) */

theorem 3anbi2d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∧ ps ∧ ta ) ↔ ( th ∧ ch ∧ ta ) ) ) ;;
}

proof of 3anbi2d {
	step 1 : wff = biidd () |- ( ph → ( th ↔ th ) ) ;;
	step 2 : wff = 3anbi12d (step 1, hyp 1) |- ( ph → ( ( th ∧ ps ∧ ta ) ↔ ( th ∧ ch ∧ ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction adding conjuncts to an equivalence.  (Contributed by NM,
       8-Sep-2006.) */

theorem 3anbi3d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∧ ta ∧ ps ) ↔ ( th ∧ ta ∧ ch ) ) ) ;;
}

proof of 3anbi3d {
	step 1 : wff = biidd () |- ( ph → ( th ↔ th ) ) ;;
	step 2 : wff = 3anbi13d (step 1, hyp 1) |- ( ph → ( ( th ∧ ta ∧ ps ) ↔ ( th ∧ ta ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Deduction joining 3 implications to form implication of conjunctions.
       (Contributed by NM, 24-Feb-2005.) */

theorem 3anim123d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	hyp 3 : wff = |- ( ph → ( et → ze ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ∧ et ) → ( ch ∧ ta ∧ ze ) ) ) ;;
}

proof of 3anim123d {
	step 1 : wff = anim12d (hyp 1, hyp 2) |- ( ph → ( ( ps ∧ th ) → ( ch ∧ ta ) ) ) ;;
	step 2 : wff = anim12d (step 1, hyp 3) |- ( ph → ( ( ( ps ∧ th ) ∧ et ) → ( ( ch ∧ ta ) ∧ ze ) ) ) ;;
	step 3 : wff = df-3an () |- ( ( ps ∧ th ∧ et ) ↔ ( ( ps ∧ th ) ∧ et ) ) ;;
	step 4 : wff = df-3an () |- ( ( ch ∧ ta ∧ ze ) ↔ ( ( ch ∧ ta ) ∧ ze ) ) ;;
	step 5 : wff = 3imtr4g (step 2, step 3, step 4) |- ( ph → ( ( ps ∧ th ∧ et ) → ( ch ∧ ta ∧ ze ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Deduction joining 3 implications to form implication of disjunctions.
       (Contributed by NM, 4-Apr-1997.) */

theorem 3orim123d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	hyp 3 : wff = |- ( ph → ( et → ze ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ∨ et ) → ( ch ∨ ta ∨ ze ) ) ) ;;
}

proof of 3orim123d {
	step 1 : wff = orim12d (hyp 1, hyp 2) |- ( ph → ( ( ps ∨ th ) → ( ch ∨ ta ) ) ) ;;
	step 2 : wff = orim12d (step 1, hyp 3) |- ( ph → ( ( ( ps ∨ th ) ∨ et ) → ( ( ch ∨ ta ) ∨ ze ) ) ) ;;
	step 3 : wff = df-3or () |- ( ( ps ∨ th ∨ et ) ↔ ( ( ps ∨ th ) ∨ et ) ) ;;
	step 4 : wff = df-3or () |- ( ( ch ∨ ta ∨ ze ) ↔ ( ( ch ∨ ta ) ∨ ze ) ) ;;
	step 5 : wff = 3imtr4g (step 2, step 3, step 4) |- ( ph → ( ( ps ∨ th ∨ et ) → ( ch ∨ ta ∨ ze ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/*Rearrangement of 6 conjuncts.  (Contributed by NM, 13-Mar-1995.) */

theorem an6 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ) ↔ ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ∧ ( ch ∧ et ) ) ) ;;
}

proof of an6 {
	step 1 : wff = an4 () |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ ( ( th ∧ ta ) ∧ et ) ) ↔ ( ( ( ph ∧ ps ) ∧ ( th ∧ ta ) ) ∧ ( ch ∧ et ) ) ) ;;
	step 2 : wff = an4 () |- ( ( ( ph ∧ ps ) ∧ ( th ∧ ta ) ) ↔ ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ) ) ;;
	step 3 : wff = anbi1i (step 2) |- ( ( ( ( ph ∧ ps ) ∧ ( th ∧ ta ) ) ∧ ( ch ∧ et ) ) ↔ ( ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ) ∧ ( ch ∧ et ) ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ ( ( th ∧ ta ) ∧ et ) ) ↔ ( ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ) ∧ ( ch ∧ et ) ) ) ;;
	step 5 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 6 : wff = df-3an () |- ( ( th ∧ ta ∧ et ) ↔ ( ( th ∧ ta ) ∧ et ) ) ;;
	step 7 : wff = anbi12i (step 5, step 6) |- ( ( ( ph ∧ ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ) ↔ ( ( ( ph ∧ ps ) ∧ ch ) ∧ ( ( th ∧ ta ) ∧ et ) ) ) ;;
	step 8 : wff = df-3an () |- ( ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ∧ ( ch ∧ et ) ) ↔ ( ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ) ∧ ( ch ∧ et ) ) ) ;;
	step 9 : wff = 3bitr4i (step 4, step 7, step 8) |- ( ( ( ph ∧ ps ∧ ch ) ∧ ( th ∧ ta ∧ et ) ) ↔ ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ∧ ( ch ∧ et ) ) ) ;;
	qed prop 1 = step 9 ;;
}

/*Analog of ~ an4 for triple conjunction.  (Contributed by Scott Fenton,
     16-Mar-2011.)  (Proof shortened by Andrew Salmon, 25-May-2011.) */

theorem 3an6 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ∧ ( ta ∧ et ) ) ↔ ( ( ph ∧ ch ∧ ta ) ∧ ( ps ∧ th ∧ et ) ) ) ;;
}

proof of 3an6 {
	step 1 : wff = an6 () |- ( ( ( ph ∧ ch ∧ ta ) ∧ ( ps ∧ th ∧ et ) ) ↔ ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ∧ ( ta ∧ et ) ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ∧ ( ta ∧ et ) ) ↔ ( ( ph ∧ ch ∧ ta ) ∧ ( ps ∧ th ∧ et ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/*Analog of ~ or4 for triple conjunction.  (Contributed by Scott Fenton,
     16-Mar-2011.) */

theorem 3or6 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ∨ ( ta ∨ et ) ) ↔ ( ( ph ∨ ch ∨ ta ) ∨ ( ps ∨ th ∨ et ) ) ) ;;
}

proof of 3or6 {
	step 1 : wff = or4 () |- ( ( ( ( ph ∨ ch ) ∨ ta ) ∨ ( ( ps ∨ th ) ∨ et ) ) ↔ ( ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ∨ ( ta ∨ et ) ) ) ;;
	step 2 : wff = or4 () |- ( ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ↔ ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ) ;;
	step 3 : wff = orbi1i (step 2) |- ( ( ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ∨ ( ta ∨ et ) ) ↔ ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ∨ ( ta ∨ et ) ) ) ;;
	step 4 : wff = bitr2i (step 1, step 3) |- ( ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ∨ ( ta ∨ et ) ) ↔ ( ( ( ph ∨ ch ) ∨ ta ) ∨ ( ( ps ∨ th ) ∨ et ) ) ) ;;
	step 5 : wff = df-3or () |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ∨ ( ta ∨ et ) ) ↔ ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ∨ ( ta ∨ et ) ) ) ;;
	step 6 : wff = df-3or () |- ( ( ph ∨ ch ∨ ta ) ↔ ( ( ph ∨ ch ) ∨ ta ) ) ;;
	step 7 : wff = df-3or () |- ( ( ps ∨ th ∨ et ) ↔ ( ( ps ∨ th ) ∨ et ) ) ;;
	step 8 : wff = orbi12i (step 6, step 7) |- ( ( ( ph ∨ ch ∨ ta ) ∨ ( ps ∨ th ∨ et ) ) ↔ ( ( ( ph ∨ ch ) ∨ ta ) ∨ ( ( ps ∨ th ) ∨ et ) ) ) ;;
	step 9 : wff = 3bitr4i (step 4, step 5, step 8) |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ∨ ( ta ∨ et ) ) ↔ ( ( ph ∨ ch ∨ ta ) ∨ ( ps ∨ th ∨ et ) ) ) ;;
	qed prop 1 = step 9 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       21-Nov-1994.) */

theorem mp3an1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ch ) → th ) ;;
}

proof of mp3an1 {
	step 1 : wff = 3expb (hyp 2) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	step 2 : wff = mpan (hyp 1, step 1) |- ( ( ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       21-Nov-1994.) */

theorem mp3an2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of mp3an2 {
	step 1 : wff = 3expa (hyp 2) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = mpanl2 (hyp 1, step 1) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       21-Nov-1994.) */

theorem mp3an3 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ch ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
}

proof of mp3an3 {
	step 1 : wff = 3expia (hyp 2) |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	step 2 : wff = mpi (hyp 1, step 1) |- ( ( ph ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       13-Jul-2005.) */

theorem mp3an12 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → th ) ;;
}

proof of mp3an12 {
	step 1 : wff = mp3an1 (hyp 1, hyp 3) |- ( ( ps ∧ ch ) → th ) ;;
	step 2 : wff = mpan (hyp 2, step 1) |- ( ch → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       14-Jul-2005.) */

theorem mp3an13 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ch ;;
	hyp 3 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → th ) ;;
}

proof of mp3an13 {
	step 1 : wff = mp3an3 (hyp 2, hyp 3) |- ( ( ph ∧ ps ) → th ) ;;
	step 2 : wff = mpan (hyp 1, step 1) |- ( ps → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       14-Jul-2005.) */

theorem mp3an23 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ch ;;
	hyp 3 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of mp3an23 {
	step 1 : wff = mp3an3 (hyp 2, hyp 3) |- ( ( ph ∧ ps ) → th ) ;;
	step 2 : wff = mpan2 (hyp 1, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM, 5-Jul-2005.) */

theorem mp3an1i (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ch ∧ th ) → ta ) ) ;;
}

proof of mp3an1i {
	step 1 : wff = com12 (hyp 2) |- ( ( ps ∧ ch ∧ th ) → ( ph → ta ) ) ;;
	step 2 : wff = mp3an1 (hyp 1, step 1) |- ( ( ch ∧ th ) → ( ph → ta ) ) ;;
	step 3 : wff = com12 (step 2) |- ( ph → ( ( ch ∧ th ) → ta ) ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       24-Feb-2005.) */

theorem mp3anl1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ch ) ∧ th ) → ta ) ;;
}

proof of mp3anl1 {
	step 1 : wff = ex (hyp 2) |- ( ( ph ∧ ps ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = mp3an1 (hyp 1, step 1) |- ( ( ps ∧ ch ) → ( th → ta ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ( ps ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       24-Feb-2005.) */

theorem mp3anl2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ th ) → ta ) ;;
}

proof of mp3anl2 {
	step 1 : wff = ex (hyp 2) |- ( ( ph ∧ ps ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = mp3an2 (hyp 1, step 1) |- ( ( ph ∧ ch ) → ( th → ta ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ( ph ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       24-Feb-2005.) */

theorem mp3anl3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ch ;;
	hyp 2 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ th ) → ta ) ;;
}

proof of mp3anl3 {
	step 1 : wff = ex (hyp 2) |- ( ( ph ∧ ps ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = mp3an3 (hyp 1, step 1) |- ( ( ph ∧ ps ) → ( th → ta ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ( ph ∧ ps ) ∧ th ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM, 4-Nov-2006.) */

theorem mp3anr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ch ∧ th ) ) → ta ) ;;
}

proof of mp3anr1 {
	step 1 : wff = ancoms (hyp 2) |- ( ( ( ps ∧ ch ∧ th ) ∧ ph ) → ta ) ;;
	step 2 : wff = mp3anl1 (hyp 1, step 1) |- ( ( ( ch ∧ th ) ∧ ph ) → ta ) ;;
	step 3 : wff = ancoms (step 2) |- ( ( ph ∧ ( ch ∧ th ) ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       24-Nov-2006.) */

theorem mp3anr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ch ;;
	hyp 2 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ th ) ) → ta ) ;;
}

proof of mp3anr2 {
	step 1 : wff = ancoms (hyp 2) |- ( ( ( ps ∧ ch ∧ th ) ∧ ph ) → ta ) ;;
	step 2 : wff = mp3anl2 (hyp 1, step 1) |- ( ( ( ps ∧ th ) ∧ ph ) → ta ) ;;
	step 3 : wff = ancoms (step 2) |- ( ( ph ∧ ( ps ∧ th ) ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       19-Oct-2007.) */

theorem mp3anr3 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- th ;;
	hyp 2 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → ta ) ;;
}

proof of mp3anr3 {
	step 1 : wff = ancoms (hyp 2) |- ( ( ( ps ∧ ch ∧ th ) ∧ ph ) → ta ) ;;
	step 2 : wff = mp3anl3 (hyp 1, step 1) |- ( ( ( ps ∧ ch ) ∧ ph ) → ta ) ;;
	step 3 : wff = ancoms (step 2) |- ( ( ph ∧ ( ps ∧ ch ) ) → ta ) ;;
	qed prop 1 = step 3 ;;
}

/*An inference based on modus ponens.  (Contributed by NM,
       14-May-1999.) */

theorem mp3an (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ch ;;
	hyp 4 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- th ;;
}

proof of mp3an {
	step 1 : wff = mp3an1 (hyp 1, hyp 4) |- ( ( ps ∧ ch ) → th ) ;;
	step 2 : wff = mp2an (hyp 2, hyp 3, step 1) |- th ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM, 8-Nov-2007.) */

theorem mpd3an3 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
}

proof of mpd3an3 {
	step 1 : wff = 3expa (hyp 2) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = mpdan (hyp 1, step 1) |- ( ( ph ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*An inference based on modus ponens.  (Contributed by NM, 4-Dec-2006.) */

theorem mpd3an23 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of mpd3an23 {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = syl3anc (step 1, hyp 1, hyp 2, hyp 3) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/*A deduction based on modus ponens.  (Contributed by Mario Carneiro,
       24-Dec-2016.) */

theorem mp3and (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	hyp 4 : wff = |- ( ph → ( ( ps ∧ ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ta ) ;;
}

proof of mp3and {
	step 1 : wff = 3jca (hyp 1, hyp 2, hyp 3) |- ( ph → ( ps ∧ ch ∧ th ) ) ;;
	step 2 : wff = mpd (step 1, hyp 4) |- ( ph → ta ) ;;
	qed prop 1 = step 2 ;;
}

/*Infer implication from a logical equivalence.  Similar to ~ biimpa .
       (Contributed by NM, 4-Sep-2005.) */

theorem biimp3a (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch ↔ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
}

proof of biimp3a {
	step 1 : wff = biimpa (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = 3impa (step 1) |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/*Infer implication from a logical equivalence.  Similar to ~ biimpar .
       (Contributed by NM, 2-Jan-2009.) */

theorem biimp3ar (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch ↔ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ∧ th ) → ch ) ;;
}

proof of biimp3ar {
	step 1 : wff = exbiri (hyp 1) |- ( ph → ( ps → ( th → ch ) ) ) ;;
	step 2 : wff = 3imp (step 1) |- ( ( ph ∧ ps ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/*Inference that undistributes a triple conjunction in the antecedent.
       (Contributed by NM, 18-Apr-2007.) */

theorem 3anandis (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ph ∧ ch ) ∧ ( ph ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
}

proof of 3anandis {
	step 1 : wff = simpl () |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ph ) ;;
	step 2 : wff = simpr1 () |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ps ) ;;
	step 3 : wff = simpl () |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ph ) ;;
	step 4 : wff = simpr2 () |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ch ) ;;
	step 5 : wff = simpl () |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ph ) ;;
	step 6 : wff = simpr3 () |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → th ) ;;
	step 7 : wff = syl222anc (step 1, step 2, step 3, step 4, step 5, step 6, hyp 1) |- ( ( ph ∧ ( ps ∧ ch ∧ th ) ) → ta ) ;;
	qed prop 1 = step 7 ;;
}

/*Inference that undistributes a triple conjunction in the antecedent.
       (Contributed by NM, 25-Jul-2006.) */

theorem 3anandirs (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ th ) ∧ ( ps ∧ th ) ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
}

proof of 3anandirs {
	step 1 : wff = simpl1 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = simpr () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → th ) ;;
	step 3 : wff = simpl2 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ps ) ;;
	step 4 : wff = simpr () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → th ) ;;
	step 5 : wff = simpl3 () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ch ) ;;
	step 6 : wff = simpr () |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → th ) ;;
	step 7 : wff = syl222anc (step 1, step 2, step 3, step 4, step 5, step 6, hyp 1) |- ( ( ( ph ∧ ps ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 7 ;;
}

/*Deduction for elimination by cases.  (Contributed by NM,
       22-Apr-1994.) */

theorem ecase23d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ¬ ch ) ;;
	hyp 2 : wff = |- ( ph → ¬ th ) ;;
	hyp 3 : wff = |- ( ph → ( ps ∨ ch ∨ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of ecase23d {
	step 1 : wff = ioran () |- ( ¬ ( ch ∨ th ) ↔ ( ¬ ch ∧ ¬ th ) ) ;;
	step 2 : wff = sylanbrc (hyp 1, hyp 2, step 1) |- ( ph → ¬ ( ch ∨ th ) ) ;;
	step 3 : wff = 3orass () |- ( ( ps ∨ ch ∨ th ) ↔ ( ps ∨ ( ch ∨ th ) ) ) ;;
	step 4 : wff = sylib (hyp 3, step 3) |- ( ph → ( ps ∨ ( ch ∨ th ) ) ) ;;
	step 5 : wff = ord (step 4) |- ( ph → ( ¬ ps → ( ch ∨ th ) ) ) ;;
	step 6 : wff = mt3d (step 2, step 5) |- ( ph → ps ) ;;
	qed prop 1 = step 6 ;;
}

/*Inference for elimination by cases.  (Contributed by NM,
       13-Jul-2005.) */

theorem 3ecase (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ¬ ph → th ) ;;
	hyp 2 : wff = |- ( ¬ ps → th ) ;;
	hyp 3 : wff = |- ( ¬ ch → th ) ;;
	hyp 4 : wff = |- ( ( ph ∧ ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- th ;;
}

proof of 3ecase {
	step 1 : wff = 3exp (hyp 4) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = a1d (hyp 1) |- ( ¬ ph → ( ch → th ) ) ;;
	step 3 : wff = a1d (step 2) |- ( ¬ ph → ( ps → ( ch → th ) ) ) ;;
	step 4 : wff = pm2.61i (step 1, step 3) |- ( ps → ( ch → th ) ) ;;
	step 5 : wff = pm2.61nii (step 4, hyp 2, hyp 3) |- th ;;
	qed prop 1 = step 5 ;;
}


