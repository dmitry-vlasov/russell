import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Propositional_calculus/Logical__xor_.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                True and false constants

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

constant {
	symbol T. ;;
}

constant {
	symbol F. ;;
}

/* ` T. ` is a wff. */

rule wtru () {
	term : wff = # T. ;;
}

/* ` F. ` is a wff. */

rule wfal () {
	term : wff = # F. ;;
}

/* Soundness justification theorem for ~ df-tru .  (Contributed by Mario
     Carneiro, 17-Nov-2013.) */

theorem trujust (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ph ) ↔ ( ps ↔ ps ) ) ;;
}

proof of trujust {
	step 1 : wff = biid () |- ( ph ↔ ph ) ;;
	step 2 : wff = biid () |- ( ps ↔ ps ) ;;
	step 3 : wff = 2th (step 1, step 2) |- ( ( ph ↔ ph ) ↔ ( ps ↔ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Definition of ` T. ` , a tautology. ` T. ` is a constant true.  In this
     definition ~ biid is used as an antecedent, however, any true wff, such as
     an axiom, can be used in its place.  (Contributed by Anthony Hart,
     13-Oct-2010.) */

definition df-tru (ph : wff)  {
	defiendum : wff = # T. ;;
	definiens : wff = # ( ph ↔ ph ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/* Definition of ` F. ` , a contradiction. ` F. ` is a constant false.
     (Contributed by Anthony Hart, 22-Oct-2010.) */

definition df-fal ()  {
	defiendum : wff = # F. ;;
	definiens : wff = # ¬ T. ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/* ` T. ` is provable.  (Contributed by Anthony Hart, 13-Oct-2010.) */

theorem tru ()  {
	prop 1 : wff = |- T. ;;
}

proof of tru {
	var ph : wff;;
	step 1 : wff = biid () |- ( ph ↔ ph ) ;;
	step 2 : wff = df-tru () |- ( T. ↔ ( ph ↔ ph ) ) ;;
	step 3 : wff = mpbir (step 1, step 2) |- T. ;;
	qed prop 1 = step 3 ;;
}

/* ` F. ` is refutable.  (Contributed by Anthony Hart, 22-Oct-2010.)  (Proof
     shortened by Mel L. O'Cat, 11-Mar-2012.) */

theorem fal ()  {
	prop 1 : wff = |- ¬ F. ;;
}

proof of fal {
	step 1 : wff = tru () |- T. ;;
	step 2 : wff = notnoti (step 1) |- ¬ ¬ T. ;;
	step 3 : wff = df-fal () |- ( F. ↔ ¬ T. ) ;;
	step 4 : wff = mtbir (step 2, step 3) |- ¬ F. ;;
	qed prop 1 = step 4 ;;
}

/* Eliminate ` T. ` as an antecedent.  (Contributed by Mario Carneiro,
       13-Mar-2014.) */

theorem trud (ph : wff)  {
	hyp 1 : wff = |- ( T. → ph ) ;;
	-----------------------
	prop 1 : wff = |- ph ;;
}

proof of trud {
	step 1 : wff = tru () |- T. ;;
	step 2 : wff = ax-mp (step 1, hyp 1) |- ph ;;
	qed prop 1 = step 2 ;;
}

/* If something is true, it outputs ` T. ` .  (Contributed by Anthony Hart,
     14-Aug-2011.) */

theorem tbtru (ph : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ph ↔ T. ) ) ;;
}

proof of tbtru {
	step 1 : wff = tru () |- T. ;;
	step 2 : wff = tbt (step 1) |- ( ph ↔ ( ph ↔ T. ) ) ;;
	qed prop 1 = step 2 ;;
}

/* If something is not true, it outputs ` F. ` .  (Contributed by Anthony
     Hart, 14-Aug-2011.) */

theorem nbfal (ph : wff)  {
	prop 1 : wff = |- ( ¬ ph ↔ ( ph ↔ F. ) ) ;;
}

proof of nbfal {
	step 1 : wff = fal () |- ¬ F. ;;
	step 2 : wff = nbn (step 1) |- ( ¬ ph ↔ ( ph ↔ F. ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A theorem is equivalent to truth.  (Contributed by Mario Carneiro,
       9-May-2015.) */

theorem bitru (ph : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ph ↔ T. ) ;;
}

proof of bitru {
	step 1 : wff = tru () |- T. ;;
	step 2 : wff = 2th (hyp 1, step 1) |- ( ph ↔ T. ) ;;
	qed prop 1 = step 2 ;;
}

/* A contradiction is equivalent to falsehood.  (Contributed by Mario
       Carneiro, 9-May-2015.) */

theorem bifal (ph : wff)  {
	hyp 1 : wff = |- ¬ ph ;;
	-----------------------
	prop 1 : wff = |- ( ph ↔ F. ) ;;
}

proof of bifal {
	step 1 : wff = fal () |- ¬ F. ;;
	step 2 : wff = 2false (hyp 1, step 1) |- ( ph ↔ F. ) ;;
	qed prop 1 = step 2 ;;
}

/* ` F. ` implies anything.  (Contributed by FL, 20-Mar-2011.)  (Proof
     shortened by Anthony Hart, 1-Aug-2011.) */

theorem falim (ph : wff)  {
	prop 1 : wff = |- ( F. → ph ) ;;
}

proof of falim {
	step 1 : wff = fal () |- ¬ F. ;;
	step 2 : wff = pm2.21i (step 1) |- ( F. → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* ` F. ` implies anything.  (Contributed by Mario Carneiro, 9-Feb-2017.) */

theorem falimd (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ F. ) → ps ) ;;
}

proof of falimd {
	step 1 : wff = falim () |- ( F. → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ph ∧ F. ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Anything implies ` T. ` .  (Contributed by FL, 20-Mar-2011.)  (Proof
     shortened by Anthony Hart, 1-Aug-2011.) */

theorem a1tru (ph : wff)  {
	prop 1 : wff = |- ( ph → T. ) ;;
}

proof of a1tru {
	step 1 : wff = tru () |- T. ;;
	step 2 : wff = a1i (step 1) |- ( ph → T. ) ;;
	qed prop 1 = step 2 ;;
}

/* Given falsum, we can define the negation of a wff ` ph ` as the statement
     that a contradiction follows from assuming ` ph ` .  (Contributed by Mario
     Carneiro, 9-Feb-2017.) */

theorem dfnot (ph : wff)  {
	prop 1 : wff = |- ( ¬ ph ↔ ( ph → F. ) ) ;;
}

proof of dfnot {
	step 1 : wff = pm2.21 () |- ( ¬ ph → ( ph → F. ) ) ;;
	step 2 : wff = id () |- ( ¬ ph → ¬ ph ) ;;
	step 3 : wff = falim () |- ( F. → ¬ ph ) ;;
	step 4 : wff = ja (step 2, step 3) |- ( ( ph → F. ) → ¬ ph ) ;;
	step 5 : wff = impbii (step 1, step 4) |- ( ¬ ph ↔ ( ph → F. ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Negation introduction rule from natural deduction.  (Contributed by
       Mario Carneiro, 9-Feb-2017.) */

theorem inegd (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → F. ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ps ) ;;
}

proof of inegd {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → F. ) ) ;;
	step 2 : wff = dfnot () |- ( ¬ ps ↔ ( ps → F. ) ) ;;
	step 3 : wff = sylibr (step 1, step 2) |- ( ph → ¬ ps ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction based on reductio ad absurdum.  (Contributed by Mario
       Carneiro, 9-Feb-2017.) */

theorem efald (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ¬ ps ) → F. ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of efald {
	step 1 : wff = inegd (hyp 1) |- ( ph → ¬ ¬ ps ) ;;
	step 2 : wff = notnotrd (step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* If a wff and its negation are provable, then falsum is provable.
       (Contributed by Mario Carneiro, 9-Feb-2017.) */

theorem pm2.21fal (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ¬ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → F. ) ;;
}

proof of pm2.21fal {
	step 1 : wff = pm2.21dd (hyp 1, hyp 2) |- ( ph → F. ) ;;
	qed prop 1 = step 1 ;;
}


