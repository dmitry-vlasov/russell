import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Propositional_calculus/Logical_equivalence.rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Logical disjunction and conjunction

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  Here we define disjunction (logical 'or') ` \/ ` ( ~ df-or ) and conjunction
  (logical 'and') ` /\ ` ( ~ df-an ). We also define various rules for
  simplifying and applying them, e.g., ~ olc , ~ orc , and ~ orcom .

*/

/* Declare connectives for disjunction ('or') and conjunction ('and'). */

constant {
	symbol ∨ ;;
	ascii \/ ;;
	latex \lor ;;
}

/* Vee (read:  'or') */

constant {
	symbol ∧ ;;
	ascii /\ ;;
	latex \land ;;
}

/* Wedge (read:  'and') */

/* Extend wff definition to include disjunction ('or'). */

rule wo (ph : wff, ps : wff) {
	term : wff = # ( ph ∨ ps ) ;;
}

/* Extend wff definition to include conjunction ('and'). */

rule wa (ph : wff, ps : wff) {
	term : wff = # ( ph ∧ ps ) ;;
}

/* Define disjunction (logical 'or').  Definition of [Margaris] p. 49.  When
     the left operand, right operand, or both are true, the result is true;
     when both sides are false, the result is false.  For example, it is true
     that ` ( 2 = 3 \/ 4 = 4 ) ` ( ~ ex-or ).  After we define the constant
     true ` T. ` ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we
     will be able to prove these truth table values:
     ` ( ( T. \/ T. ) <-> T. ) ` ( ~ truortru ), ` ( ( T. \/ F. ) <-> T. ) `
     ( ~ truorfal ), ` ( ( F. \/ T. ) <-> T. ) ` ( ~ falortru ), and
     ` ( ( F. \/ F. ) <-> F. ) ` ( ~ falorfal ).

     This is our first use of the biconditional connective in a definition; we
     use the biconditional connective in place of the traditional "<=def=>",
     which means the same thing, except that we can manipulate the
     biconditional connective directly in proofs rather than having to rely on
     an informal definition substitution rule.  Note that if we mechanically
     substitute ` ( -. ph -> ps ) ` for ` ( ph \/ ps ) ` , we end up with an
     instance of previously proved theorem ~ biid .  This is the justification
     for the definition, along with the fact that it introduces a new symbol
     ` \/ ` .  Contrast with ` /\ ` ( ~ df-an ), ` -> ` ( ~ wi ), ` -/\ `
     ( ~ df-nan ), and ` \/_ ` ( ~ df-xor ) .  (Contributed by NM,
     5-Aug-1993.) */

definition df-or (ph : wff, ps : wff)  {
	defiendum : wff = # ( ph ∨ ps ) ;;
	definiens : wff = # ( ¬ ph → ps ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/* Define conjunction (logical 'and').  Definition of [Margaris] p. 49.  When
     both the left and right operand are true, the result is true; when either
     is false, the result is false.  For example, it is true that
     ` ( 2 = 2 /\ 3 = 3 ) ` .  After we define the constant true ` T. `
     ( ~ df-tru ) and the constant false ` F. ` ( ~ df-fal ), we will be able
     to prove these truth table values: ` ( ( T. /\ T. ) <-> T. ) `
     ( ~ truantru ), ` ( ( T. /\ F. ) <-> F. ) ` ( ~ truanfal ),
     ` ( ( F. /\ T. ) <-> F. ) ` ( ~ falantru ), and
     ` ( ( F. /\ F. ) <-> F. ) ` ( ~ falanfal ).

     Contrast with ` \/ ` ( ~ df-or ), ` -> ` ( ~ wi ), ` -/\ ` ( ~ df-nan ),
     and ` \/_ ` ( ~ df-xor ) .  (Contributed by NM, 5-Aug-1993.) */

definition df-an (ph : wff, ps : wff)  {
	defiendum : wff = # ( ph ∧ ps ) ;;
	definiens : wff = # ¬ ( ph → ¬ ps ) ;;
	-----------------------
	prop : wff = |- ( defiendum ↔ definiens ) ;;
}

/* Theorem *4.64 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.64 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph → ps ) ↔ ( ph ∨ ps ) ) ;;
}

proof of pm4.64 {
	step 1 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ¬ ph → ps ) ↔ ( ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.53 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.53 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ¬ ph → ps ) ) ;;
}

proof of pm2.53 {
	step 1 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph ∨ ps ) → ( ¬ ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.54 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.54 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph → ps ) → ( ph ∨ ps ) ) ;;
}

proof of pm2.54 {
	step 1 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 2 : wff = biimpri (step 1) |- ( ( ¬ ph → ps ) → ( ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Infer implication from disjunction.  (Contributed by NM,
       11-Jun-1994.) */

theorem ori (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph ∨ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ¬ ph → ps ) ;;
}

proof of ori {
	step 1 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- ( ¬ ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Infer implication from disjunction.  (Contributed by NM,
       11-Jun-1994.) */

theorem orri (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ¬ ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph ∨ ps ) ;;
}

proof of orri {
	step 1 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 2 : wff = mpbir (hyp 1, step 1) |- ( ph ∨ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduce implication from disjunction.  (Contributed by NM,
       18-May-1994.) */

theorem ord (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∨ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ¬ ps → ch ) ) ;;
}

proof of ord {
	step 1 : wff = df-or () |- ( ( ps ∨ ch ) ↔ ( ¬ ps → ch ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ¬ ps → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduce implication from disjunction.  (Contributed by NM,
       27-Nov-1995.) */

theorem orrd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ¬ ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∨ ch ) ) ;;
}

proof of orrd {
	step 1 : wff = pm2.54 () |- ( ( ¬ ps → ch ) → ( ps ∨ ch ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ps ∨ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference disjoining the antecedents of two implications.  (Contributed
       by NM, 5-Apr-1994.) */

theorem jaoi (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ) → ps ) ;;
}

proof of jaoi {
	step 1 : wff = pm2.53 () |- ( ( ph ∨ ch ) → ( ¬ ph → ch ) ) ;;
	step 2 : wff = syl6 (step 1, hyp 2) |- ( ( ph ∨ ch ) → ( ¬ ph → ps ) ) ;;
	step 3 : wff = pm2.61d2 (step 2, hyp 1) |- ( ( ph ∨ ch ) → ps ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction disjoining the antecedents of two implications.  (Contributed
       by NM, 18-Aug-1994.) */

theorem jaod (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ) → ch ) ) ;;
}

proof of jaod {
	step 1 : wff = com12 (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = com12 (hyp 2) |- ( th → ( ph → ch ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ps ∨ th ) → ( ph → ch ) ) ;;
	step 4 : wff = com12 (step 3) |- ( ph → ( ( ps ∨ th ) → ch ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Eliminate a disjunction in a deduction.  (Contributed by Mario Carneiro,
       29-May-2016.) */

theorem mpjaod (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ch ) ) ;;
	hyp 3 : wff = |- ( ph → ( ps ∨ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of mpjaod {
	step 1 : wff = jaod (hyp 1, hyp 2) |- ( ph → ( ( ps ∨ th ) → ch ) ) ;;
	step 2 : wff = mpd (hyp 3, step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Elimination of disjunction by denial of a disjunct.  Theorem *2.55 of
     [WhiteheadRussell] p. 107.  (Contributed by NM, 12-Aug-1994.)  (Proof
     shortened by Wolf Lammen, 21-Jul-2012.) */

theorem orel1 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ph → ( ( ph ∨ ps ) → ps ) ) ;;
}

proof of orel1 {
	step 1 : wff = pm2.53 () |- ( ( ph ∨ ps ) → ( ¬ ph → ps ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ¬ ph → ( ( ph ∨ ps ) → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Elimination of disjunction by denial of a disjunct.  Theorem *2.56 of
     [WhiteheadRussell] p. 107.  (Contributed by NM, 12-Aug-1994.)  (Proof
     shortened by Wolf Lammen, 5-Apr-2013.) */

theorem orel2 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ph → ( ( ps ∨ ph ) → ps ) ) ;;
}

proof of orel2 {
	step 1 : wff = idd () |- ( ¬ ph → ( ps → ps ) ) ;;
	step 2 : wff = pm2.21 () |- ( ¬ ph → ( ph → ps ) ) ;;
	step 3 : wff = jaod (step 1, step 2) |- ( ¬ ph → ( ( ps ∨ ph ) → ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Introduction of a disjunct.  Axiom *1.3 of [WhiteheadRussell] p. 96.
     (Contributed by NM, 30-Aug-1993.) */

theorem olc (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps ∨ ph ) ) ;;
}

proof of olc {
	step 1 : wff = ax-1 () |- ( ph → ( ¬ ps → ph ) ) ;;
	step 2 : wff = orrd (step 1) |- ( ph → ( ps ∨ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduction of a disjunct.  Theorem *2.2 of [WhiteheadRussell] p. 104.
     (Contributed by NM, 30-Aug-1993.) */

theorem orc (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ph ∨ ps ) ) ;;
}

proof of orc {
	step 1 : wff = pm2.24 () |- ( ph → ( ¬ ph → ps ) ) ;;
	step 2 : wff = orrd (step 1) |- ( ph → ( ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Axiom *1.4 of [WhiteheadRussell] p. 96.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm1.4 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ps ∨ ph ) ) ;;
}

proof of pm1.4 {
	step 1 : wff = olc () |- ( ph → ( ps ∨ ph ) ) ;;
	step 2 : wff = orc () |- ( ps → ( ps ∨ ph ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ ps ) → ( ps ∨ ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Commutative law for disjunction.  Theorem *4.31 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 15-Nov-2012.) */

theorem orcom (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) ↔ ( ps ∨ ph ) ) ;;
}

proof of orcom {
	step 1 : wff = pm1.4 () |- ( ( ph ∨ ps ) → ( ps ∨ ph ) ) ;;
	step 2 : wff = pm1.4 () |- ( ( ps ∨ ph ) → ( ph ∨ ps ) ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ( ph ∨ ps ) ↔ ( ps ∨ ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Commutation of disjuncts in consequent.  (Contributed by NM,
       2-Dec-2010.) */

theorem orcomd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∨ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch ∨ ps ) ) ;;
}

proof of orcomd {
	step 1 : wff = orcom () |- ( ( ps ∨ ch ) ↔ ( ch ∨ ps ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ch ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Commutation of disjuncts in antecedent.  (Contributed by NM,
       2-Dec-2012.) */

theorem orcoms (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∨ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∨ ph ) → ch ) ;;
}

proof of orcoms {
	step 1 : wff = pm1.4 () |- ( ( ps ∨ ph ) → ( ph ∨ ps ) ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ( ps ∨ ph ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction introducing a disjunct.  (Contributed by NM, 19-Jan-2008.)
       (Proof shortened by Wolf Lammen, 14-Nov-2012.) */

theorem orci (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ph ∨ ps ) ;;
}

proof of orci {
	step 1 : wff = pm2.24i (hyp 1) |- ( ¬ ph → ps ) ;;
	step 2 : wff = orri (step 1) |- ( ph ∨ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction introducing a disjunct.  (Contributed by NM, 19-Jan-2008.)
       (Proof shortened by Wolf Lammen, 14-Nov-2012.) */

theorem olci (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ps ∨ ph ) ;;
}

proof of olci {
	step 1 : wff = a1i (hyp 1) |- ( ¬ ps → ph ) ;;
	step 2 : wff = orri (step 1) |- ( ps ∨ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction introducing a disjunct.  A translation of natural deduction
       rule ` \/ ` IR ( ` \/ ` insertion right), see ~ natded .  (Contributed
       by NM, 20-Sep-2007.) */

theorem orcd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∨ ch ) ) ;;
}

proof of orcd {
	step 1 : wff = orc () |- ( ps → ( ps ∨ ch ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ps ∨ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction introducing a disjunct.  A translation of natural deduction
       rule ` \/ ` IL ( ` \/ ` insertion left), see ~ natded .  (Contributed by
       NM, 11-Apr-2008.)  (Proof shortened by Wolf Lammen, 3-Oct-2013.) */

theorem olcd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch ∨ ps ) ) ;;
}

proof of olcd {
	step 1 : wff = orcd (hyp 1) |- ( ph → ( ps ∨ ch ) ) ;;
	step 2 : wff = orcomd (step 1) |- ( ph → ( ch ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating disjunct. _Notational convention_:  We sometimes
       suffix with "s" the label of an inference that manipulates an
       antecedent, leaving the consequent unchanged.  The "s" means that the
       inference eliminates the need for a syllogism ( ~ syl ) -type inference
       in a proof.  (Contributed by NM, 21-Jun-1994.) */

theorem orcs (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∨ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of orcs {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = syl (step 1, hyp 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating disjunct.  (Contributed by NM, 21-Jun-1994.)
       (Proof shortened by Wolf Lammen, 3-Oct-2013.) */

theorem olcs (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∨ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ch ) ;;
}

proof of olcs {
	step 1 : wff = orcoms (hyp 1) |- ( ( ps ∨ ph ) → ch ) ;;
	step 2 : wff = orcs (step 1) |- ( ps → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.07 of [WhiteheadRussell] p. 101.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.07 (ph : wff)  {
	prop 1 : wff = |- ( ph → ( ph ∨ ph ) ) ;;
}

proof of pm2.07 {
	step 1 : wff = olc () |- ( ph → ( ph ∨ ph ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Theorem *2.45 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.45 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ) → ¬ ph ) ;;
}

proof of pm2.45 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = con3i (step 1) |- ( ¬ ( ph ∨ ps ) → ¬ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.46 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.46 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ) → ¬ ps ) ;;
}

proof of pm2.46 {
	step 1 : wff = olc () |- ( ps → ( ph ∨ ps ) ) ;;
	step 2 : wff = con3i (step 1) |- ( ¬ ( ph ∨ ps ) → ¬ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.47 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.47 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ) → ( ¬ ph ∨ ps ) ) ;;
}

proof of pm2.47 {
	step 1 : wff = pm2.45 () |- ( ¬ ( ph ∨ ps ) → ¬ ph ) ;;
	step 2 : wff = orcd (step 1) |- ( ¬ ( ph ∨ ps ) → ( ¬ ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.48 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.48 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ) → ( ph ∨ ¬ ps ) ) ;;
}

proof of pm2.48 {
	step 1 : wff = pm2.46 () |- ( ¬ ( ph ∨ ps ) → ¬ ps ) ;;
	step 2 : wff = olcd (step 1) |- ( ¬ ( ph ∨ ps ) → ( ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.49 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.49 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ) → ( ¬ ph ∨ ¬ ps ) ) ;;
}

proof of pm2.49 {
	step 1 : wff = pm2.46 () |- ( ¬ ( ph ∨ ps ) → ¬ ps ) ;;
	step 2 : wff = olcd (step 1) |- ( ¬ ( ph ∨ ps ) → ( ¬ ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Slight generalization of Theorem *2.67 of [WhiteheadRussell] p. 107.
     (Contributed by NM, 3-Jan-2005.) */

theorem pm2.67-2 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ch ) → ps ) → ( ph → ps ) ) ;;
}

proof of pm2.67-2 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ch ) ) ;;
	step 2 : wff = imim1i (step 1) |- ( ( ( ph ∨ ch ) → ps ) → ( ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.67 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.67 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) → ps ) → ( ph → ps ) ) ;;
}

proof of pm2.67 {
	step 1 : wff = pm2.67-2 () |- ( ( ( ph ∨ ps ) → ps ) → ( ph → ps ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Theorem *2.25 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.25 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph ∨ ( ( ph ∨ ps ) → ps ) ) ;;
}

proof of pm2.25 {
	step 1 : wff = orel1 () |- ( ¬ ph → ( ( ph ∨ ps ) → ps ) ) ;;
	step 2 : wff = orri (step 1) |- ( ph ∨ ( ( ph ∨ ps ) → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A wff is equivalent to its disjunction with falsehood.  Theorem *4.74 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 23-Mar-1995.)  (Proof
     shortened by Wolf Lammen, 18-Nov-2012.) */

theorem biorf (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ph → ( ps ↔ ( ph ∨ ps ) ) ) ;;
}

proof of biorf {
	step 1 : wff = olc () |- ( ps → ( ph ∨ ps ) ) ;;
	step 2 : wff = orel1 () |- ( ¬ ph → ( ( ph ∨ ps ) → ps ) ) ;;
	step 3 : wff = impbid2 (step 1, step 2) |- ( ¬ ph → ( ps ↔ ( ph ∨ ps ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A wff is equivalent to its negated disjunction with falsehood.
     (Contributed by NM, 9-Jul-2012.) */

theorem biortn (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps ↔ ( ¬ ph ∨ ps ) ) ) ;;
}

proof of biortn {
	step 1 : wff = notnot1 () |- ( ph → ¬ ¬ ph ) ;;
	step 2 : wff = biorf () |- ( ¬ ¬ ph → ( ps ↔ ( ¬ ph ∨ ps ) ) ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ph → ( ps ↔ ( ¬ ph ∨ ps ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A wff is equivalent to its disjunction with falsehood.  (Contributed by
       NM, 23-Mar-1995.) */

theorem biorfi (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ¬ ph ;;
	-----------------------
	prop 1 : wff = |- ( ps ↔ ( ps ∨ ph ) ) ;;
}

proof of biorfi {
	step 1 : wff = orc () |- ( ps → ( ps ∨ ph ) ) ;;
	step 2 : wff = orel2 () |- ( ¬ ph → ( ( ps ∨ ph ) → ps ) ) ;;
	step 3 : wff = impbid2 (step 1, step 2) |- ( ¬ ph → ( ps ↔ ( ps ∨ ph ) ) ) ;;
	step 4 : wff = ax-mp (hyp 1, step 3) |- ( ps ↔ ( ps ∨ ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem *2.621 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.621 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ph ∨ ps ) → ps ) ) ;;
}

proof of pm2.621 {
	step 1 : wff = id () |- ( ( ph → ps ) → ( ph → ps ) ) ;;
	step 2 : wff = idd () |- ( ( ph → ps ) → ( ps → ps ) ) ;;
	step 3 : wff = jaod (step 1, step 2) |- ( ( ph → ps ) → ( ( ph ∨ ps ) → ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.62 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 13-Dec-2013.) */

theorem pm2.62 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ( ph → ps ) → ps ) ) ;;
}

proof of pm2.62 {
	step 1 : wff = pm2.621 () |- ( ( ph → ps ) → ( ( ph ∨ ps ) → ps ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ( ph ∨ ps ) → ( ( ph → ps ) → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.68 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.68 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) → ps ) → ( ph ∨ ps ) ) ;;
}

proof of pm2.68 {
	step 1 : wff = jarl () |- ( ( ( ph → ps ) → ps ) → ( ¬ ph → ps ) ) ;;
	step 2 : wff = orrd (step 1) |- ( ( ( ph → ps ) → ps ) → ( ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Logical 'or' expressed in terms of implication only.  Theorem *5.25 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 12-Aug-2004.)  (Proof
     shortened by Wolf Lammen, 20-Oct-2012.) */

theorem dfor2 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) ↔ ( ( ph → ps ) → ps ) ) ;;
}

proof of dfor2 {
	step 1 : wff = pm2.62 () |- ( ( ph ∨ ps ) → ( ( ph → ps ) → ps ) ) ;;
	step 2 : wff = pm2.68 () |- ( ( ( ph → ps ) → ps ) → ( ph ∨ ps ) ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ( ph ∨ ps ) ↔ ( ( ph → ps ) → ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Implication in terms of disjunction.  Theorem *4.6 of [WhiteheadRussell]
     p. 120.  (Contributed by NM, 5-Aug-1993.) */

theorem imor (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
}

proof of imor {
	step 1 : wff = notnot () |- ( ph ↔ ¬ ¬ ph ) ;;
	step 2 : wff = imbi1i (step 1) |- ( ( ph → ps ) ↔ ( ¬ ¬ ph → ps ) ) ;;
	step 3 : wff = df-or () |- ( ( ¬ ph ∨ ps ) ↔ ( ¬ ¬ ph → ps ) ) ;;
	step 4 : wff = bitr4i (step 2, step 3) |- ( ( ph → ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Infer disjunction from implication.  (Contributed by NM,
       12-Mar-2012.) */

theorem imori (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ¬ ph ∨ ps ) ;;
}

proof of imori {
	step 1 : wff = imor () |- ( ( ph → ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- ( ¬ ph ∨ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Infer implication from disjunction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) */

theorem imorri (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ¬ ph ∨ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of imorri {
	step 1 : wff = imor () |- ( ( ph → ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
	step 2 : wff = mpbir (hyp 1, step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Law of excluded middle, also called the principle of _tertium non datur_.
     Theorem *2.11 of [WhiteheadRussell] p. 101.  It says that something is
     either true or not true; there are no in-between values of truth.  This is
     an essential distinction of our classical logic and is not a theorem of
     intuitionistic logic.  (Contributed by NM, 5-Aug-1993.) */

theorem exmid (ph : wff)  {
	prop 1 : wff = |- ( ph ∨ ¬ ph ) ;;
}

proof of exmid {
	step 1 : wff = id () |- ( ¬ ph → ¬ ph ) ;;
	step 2 : wff = orri (step 1) |- ( ph ∨ ¬ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Law of excluded middle in a context.  (Contributed by Mario Carneiro,
     9-Feb-2017.) */

theorem exmidd (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps ∨ ¬ ps ) ) ;;
}

proof of exmidd {
	step 1 : wff = exmid () |- ( ps ∨ ¬ ps ) ;;
	step 2 : wff = a1i (step 1) |- ( ph → ( ps ∨ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.1 of [WhiteheadRussell] p. 101.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Nov-2012.) */

theorem pm2.1 (ph : wff)  {
	prop 1 : wff = |- ( ¬ ph ∨ ph ) ;;
}

proof of pm2.1 {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = imori (step 1) |- ( ¬ ph ∨ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.13 of [WhiteheadRussell] p. 101.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.13 (ph : wff)  {
	prop 1 : wff = |- ( ph ∨ ¬ ¬ ¬ ph ) ;;
}

proof of pm2.13 {
	step 1 : wff = notnot1 () |- ( ¬ ph → ¬ ¬ ¬ ph ) ;;
	step 2 : wff = orri (step 1) |- ( ph ∨ ¬ ¬ ¬ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.62 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.62 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ¬ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
}

proof of pm4.62 {
	step 1 : wff = imor () |- ( ( ph → ¬ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Theorem *4.66 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.66 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph → ¬ ps ) ↔ ( ph ∨ ¬ ps ) ) ;;
}

proof of pm4.66 {
	step 1 : wff = pm4.64 () |- ( ( ¬ ph → ¬ ps ) ↔ ( ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Theorem *4.63 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.63 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph → ¬ ps ) ↔ ( ph ∧ ps ) ) ;;
}

proof of pm4.63 {
	step 1 : wff = df-an () |- ( ( ph ∧ ps ) ↔ ¬ ( ph → ¬ ps ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ¬ ( ph → ¬ ps ) ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Express implication in terms of conjunction.  (Contributed by NM,
     9-Apr-1994.) */

theorem imnan (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
}

proof of imnan {
	step 1 : wff = df-an () |- ( ( ph ∧ ps ) ↔ ¬ ( ph → ¬ ps ) ) ;;
	step 2 : wff = con2bii (step 1) |- ( ( ph → ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Express implication in terms of conjunction.  (Contributed by Mario
       Carneiro, 28-Sep-2015.) */

theorem imnani (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ¬ ( ph ∧ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ps ) ;;
}

proof of imnani {
	step 1 : wff = imnan () |- ( ( ph → ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
	step 2 : wff = mpbir (hyp 1, step 1) |- ( ph → ¬ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Express implication in terms of conjunction.  Theorem 3.4(27) of [Stoll]
     p. 176.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 30-Oct-2012.) */

theorem iman (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ¬ ( ph ∧ ¬ ps ) ) ;;
}

proof of iman {
	step 1 : wff = notnot () |- ( ps ↔ ¬ ¬ ps ) ;;
	step 2 : wff = imbi2i (step 1) |- ( ( ph → ps ) ↔ ( ph → ¬ ¬ ps ) ) ;;
	step 3 : wff = imnan () |- ( ( ph → ¬ ¬ ps ) ↔ ¬ ( ph ∧ ¬ ps ) ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ( ph → ps ) ↔ ¬ ( ph ∧ ¬ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Express conjunction in terms of implication.  (Contributed by NM,
     2-Aug-1994.) */

theorem annim (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ph → ps ) ) ;;
}

proof of annim {
	step 1 : wff = iman () |- ( ( ph → ps ) ↔ ¬ ( ph ∧ ¬ ps ) ) ;;
	step 2 : wff = con2bii (step 1) |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.61 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.61 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph → ps ) ↔ ( ph ∧ ¬ ps ) ) ;;
}

proof of pm4.61 {
	step 1 : wff = annim () |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ph → ps ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ¬ ( ph → ps ) ↔ ( ph ∧ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.65 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.65 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ¬ ph → ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
}

proof of pm4.65 {
	step 1 : wff = pm4.61 () |- ( ¬ ( ¬ ph → ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Theorem *4.67 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.67 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ¬ ph → ¬ ps ) ↔ ( ¬ ph ∧ ps ) ) ;;
}

proof of pm4.67 {
	step 1 : wff = pm4.63 () |- ( ¬ ( ¬ ph → ¬ ps ) ↔ ( ¬ ph ∧ ps ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Importation inference.  (Contributed by NM, 5-Aug-1993.)  (Proof
       shortened by Eric Schmidt, 22-Dec-2006.) */

theorem imp (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of imp {
	step 1 : wff = df-an () |- ( ( ph ∧ ps ) ↔ ¬ ( ph → ¬ ps ) ) ;;
	step 2 : wff = impi (hyp 1) |- ( ¬ ( ph → ¬ ps ) → ch ) ;;
	step 3 : wff = sylbi (step 1, step 2) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 3 ;;
}

/* Importation inference with commuted antecedents.  (Contributed by NM,
       25-May-2005.) */

theorem impcom (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → ch ) ;;
}

proof of impcom {
	step 1 : wff = com12 (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ps ∧ ph ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Importation deduction.  (Contributed by NM, 31-Mar-1994.) */

theorem imp3a (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
}

proof of imp3a {
	step 1 : wff = com3l (hyp 1) |- ( ps → ( ch → ( ph → th ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ps ∧ ch ) → ( ph → th ) ) ;;
	step 3 : wff = com12 (step 2) |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	qed prop 1 = step 3 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp31 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
}

proof of imp31 {
	step 1 : wff = imp (hyp 1) |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp32 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
}

proof of imp32 {
	step 1 : wff = imp3a (hyp 1) |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Exportation inference.  (This theorem used to be labeled "exp" but was
       changed to "ex" so as not to conflict with the math token "exp", per the
       June 2006 Metamath spec change.)  A translation of natural deduction
       rule ` -> ` I ( ` -> ` introduction), see ~ natded .  (Contributed by
       NM, 5-Aug-1993.)  (Proof shortened by Eric Schmidt, 22-Dec-2006.) */

theorem ex (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ch ) ) ;;
}

proof of ex {
	step 1 : wff = df-an () |- ( ( ph ∧ ps ) ↔ ¬ ( ph → ¬ ps ) ) ;;
	step 2 : wff = sylbir (step 1, hyp 1) |- ( ¬ ( ph → ¬ ps ) → ch ) ;;
	step 3 : wff = expi (step 2) |- ( ph → ( ps → ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Exportation inference with commuted antecedents.  (Contributed by NM,
       25-May-2005.) */

theorem expcom (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ph → ch ) ) ;;
}

proof of expcom {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ps → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Exportation deduction.  (Contributed by NM, 20-Aug-1993.) */

theorem exp3a (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
}

proof of exp3a {
	step 1 : wff = com12 (hyp 1) |- ( ( ps ∧ ch ) → ( ph → th ) ) ;;
	step 2 : wff = ex (step 1) |- ( ps → ( ch → ( ph → th ) ) ) ;;
	step 3 : wff = com3r (step 2) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A deduction version of exportation, followed by importation.
       (Contributed by NM, 6-Sep-2008.) */

theorem expdimp (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
}

proof of expdimp {
	step 1 : wff = exp3a (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Mixed importation/commutation inference.  (Contributed by NM,
       22-Jun-2013.) */

theorem impancom (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → ( ps → th ) ) ;;
}

proof of impancom {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = com23 (step 1) |- ( ph → ( ch → ( ps → th ) ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ph ∧ ch ) → ( ps → th ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Variant of ~ con3d with importation.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) */

theorem con3and (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ¬ ch ) → ¬ ps ) ;;
}

proof of con3and {
	step 1 : wff = con3d (hyp 1) |- ( ph → ( ¬ ch → ¬ ps ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ¬ ch ) → ¬ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction based on reductio ad absurdum.  (Contributed by Mario
       Carneiro, 9-Feb-2017.) */

theorem pm2.01da (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ¬ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ps ) ;;
}

proof of pm2.01da {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ¬ ps ) ) ;;
	step 2 : wff = pm2.01d (step 1) |- ( ph → ¬ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction based on reductio ad absurdum.  (Contributed by Mario
       Carneiro, 9-Feb-2017.) */

theorem pm2.18da (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ¬ ps ) → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of pm2.18da {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ¬ ps → ps ) ) ;;
	step 2 : wff = pm2.18d (step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.3 (Exp) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 24-Mar-2013.) */

theorem pm3.3 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) → ch ) → ( ph → ( ps → ch ) ) ) ;;
}

proof of pm3.3 {
	step 1 : wff = id () |- ( ( ( ph ∧ ps ) → ch ) → ( ( ph ∧ ps ) → ch ) ) ;;
	step 2 : wff = exp3a (step 1) |- ( ( ( ph ∧ ps ) → ch ) → ( ph → ( ps → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.31 (Imp) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 24-Mar-2013.) */

theorem pm3.31 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) → ( ( ph ∧ ps ) → ch ) ) ;;
}

proof of pm3.31 {
	step 1 : wff = id () |- ( ( ph → ( ps → ch ) ) → ( ph → ( ps → ch ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ( ph → ( ps → ch ) ) → ( ( ph ∧ ps ) → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Import-export theorem.  Part of Theorem *4.87 of [WhiteheadRussell]
     p. 122.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 24-Mar-2013.) */

theorem impexp (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ;;
}

proof of impexp {
	step 1 : wff = pm3.3 () |- ( ( ( ph ∧ ps ) → ch ) → ( ph → ( ps → ch ) ) ) ;;
	step 2 : wff = pm3.31 () |- ( ( ph → ( ps → ch ) ) → ( ( ph ∧ ps ) → ch ) ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Join antecedents with conjunction.  Theorem *3.2 of [WhiteheadRussell]
     p. 111.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 12-Nov-2012.) */

theorem pm3.2 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps → ( ph ∧ ps ) ) ) ;;
}

proof of pm3.2 {
	step 1 : wff = id () |- ( ( ph ∧ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = ex (step 1) |- ( ph → ( ps → ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Join antecedents with conjunction.  Theorem *3.21 of [WhiteheadRussell]
     p. 111.  (Contributed by NM, 5-Aug-1993.) */

theorem pm3.21 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps → ( ps ∧ ph ) ) ) ;;
}

proof of pm3.21 {
	step 1 : wff = pm3.2 () |- ( ps → ( ph → ( ps ∧ ph ) ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ph → ( ps → ( ps ∧ ph ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.22 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 13-Nov-2012.) */

theorem pm3.22 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ps ∧ ph ) ) ;;
}

proof of pm3.22 {
	step 1 : wff = pm3.21 () |- ( ph → ( ps → ( ps ∧ ph ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ps ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Commutative law for conjunction.  Theorem *4.3 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 25-Jun-1998.)  (Proof shortened by Wolf
     Lammen, 4-Nov-2012.) */

theorem ancom (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) ↔ ( ps ∧ ph ) ) ;;
}

proof of ancom {
	step 1 : wff = pm3.22 () |- ( ( ph ∧ ps ) → ( ps ∧ ph ) ) ;;
	step 2 : wff = pm3.22 () |- ( ( ps ∧ ph ) → ( ph ∧ ps ) ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ( ph ∧ ps ) ↔ ( ps ∧ ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Commutation of conjuncts in consequent.  (Contributed by Jeff Hankins,
       14-Aug-2009.) */

theorem ancomd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch ∧ ps ) ) ;;
}

proof of ancomd {
	step 1 : wff = ancom () |- ( ( ps ∧ ch ) ↔ ( ch ∧ ps ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ch ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference commuting conjunction in antecedent.  (Contributed by NM,
       21-Apr-1994.) */

theorem ancoms (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → ch ) ;;
}

proof of ancoms {
	step 1 : wff = expcom (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ps ∧ ph ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction commuting conjunction in antecedent.  (Contributed by NM,
       12-Dec-2004.) */

theorem ancomsd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ch ∧ ps ) → th ) ) ;;
}

proof of ancomsd {
	step 1 : wff = ancom () |- ( ( ch ∧ ps ) ↔ ( ps ∧ ch ) ) ;;
	step 2 : wff = syl5bi (step 1, hyp 1) |- ( ph → ( ( ch ∧ ps ) → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Infer conjunction of premises.  (Contributed by NM, 5-Aug-1993.) */

theorem pm3.2i (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	-----------------------
	prop 1 : wff = |- ( ph ∧ ps ) ;;
}

proof of pm3.2i {
	step 1 : wff = pm3.2 () |- ( ph → ( ps → ( ph ∧ ps ) ) ) ;;
	step 2 : wff = mp2 (hyp 1, hyp 2, step 1) |- ( ph ∧ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Nested conjunction of antecedents.  (Contributed by NM, 5-Aug-1993.) */

theorem pm3.43i (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ph → ch ) → ( ph → ( ps ∧ ch ) ) ) ) ;;
}

proof of pm3.43i {
	step 1 : wff = pm3.2 () |- ( ps → ( ch → ( ps ∧ ch ) ) ) ;;
	step 2 : wff = imim3i (step 1) |- ( ( ph → ps ) → ( ( ph → ch ) → ( ph → ( ps ∧ ch ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Elimination of a conjunct.  Theorem *3.26 (Simp) of [WhiteheadRussell]
     p. 112.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 13-Nov-2012.) */

theorem simpl (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) → ph ) ;;
}

proof of simpl {
	step 1 : wff = ax-1 () |- ( ph → ( ps → ph ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference eliminating a conjunct.  (Contributed by NM, 15-Jun-1994.) */

theorem simpli (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph ∧ ps ) ;;
	-----------------------
	prop 1 : wff = |- ph ;;
}

proof of simpli {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ph ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  A translation of natural deduction
       rule ` /\ ` EL ( ` /\ ` elimination left), see ~ natded .  (Contributed
       by NM, 5-Aug-1993.) */

theorem simpld (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of simpld {
	step 1 : wff = simpl () |- ( ( ps ∧ ch ) → ps ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  (Contributed by NM, 27-May-1998.) */

theorem simplbi (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of simplbi {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = simpld (step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Elimination of a conjunct.  Theorem *3.27 (Simp) of [WhiteheadRussell]
     p. 112.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 13-Nov-2012.) */

theorem simpr (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) → ps ) ;;
}

proof of simpr {
	step 1 : wff = idd () |- ( ph → ( ps → ps ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference eliminating a conjunct.  (Contributed by NM, 15-Jun-1994.) */

theorem simpri (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph ∧ ps ) ;;
	-----------------------
	prop 1 : wff = |- ps ;;
}

proof of simpri {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ps ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  (Contributed by NM, 5-Aug-1993.)  A
       translation of natural deduction rule ` /\ ` ER ( ` /\ ` elimination
       right), see ~ natded .  (Proof shortened by Wolf Lammen, 3-Oct-2013.) */

theorem simprd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of simprd {
	step 1 : wff = ancomd (hyp 1) |- ( ph → ( ch ∧ ps ) ) ;;
	step 2 : wff = simpld (step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  (Contributed by NM, 27-May-1998.) */

theorem simprbi (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of simprbi {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = simprd (step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding a conjunct to the right of an antecedent.  (Contributed
       by NM, 30-Aug-1993.) */

theorem adantr (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → ps ) ;;
}

proof of adantr {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( ch → ps ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ch ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding a conjunct to the left of an antecedent.  (Contributed
       by NM, 30-Aug-1993.)  (Proof shortened by Wolf Lammen, 23-Nov-2012.) */

theorem adantl (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ph ) → ps ) ;;
}

proof of adantl {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ ch ) → ps ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ch ∧ ph ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to the left of an antecedent.  (Contributed
       by NM, 4-May-1994.)  (Proof shortened by Wolf Lammen, 20-Dec-2012.) */

theorem adantld (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∧ ps ) → ch ) ) ;;
}

proof of adantld {
	step 1 : wff = simpr () |- ( ( th ∧ ps ) → ps ) ;;
	step 2 : wff = syl5 (step 1, hyp 1) |- ( ph → ( ( th ∧ ps ) → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to the right of an antecedent.  (Contributed
       by NM, 4-May-1994.) */

theorem adantrd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) → ch ) ) ;;
}

proof of adantrd {
	step 1 : wff = simpl () |- ( ( ps ∧ th ) → ps ) ;;
	step 2 : wff = syl5 (step 1, hyp 1) |- ( ph → ( ( ps ∧ th ) → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Modus ponens conjoining dissimilar antecedents.  (Contributed by NM,
       1-Feb-2008.)  (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem mpan9 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → ( ps → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of mpan9 {
	step 1 : wff = syl5 (hyp 1, hyp 2) |- ( ch → ( ph → th ) ) ;;
	step 2 : wff = impcom (step 1) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism deduction with conjoined antecedents.  (Contributed by NM,
       24-Feb-2005.)  (Proof shortened by Wolf Lammen, 6-Apr-2013.) */

theorem syldan (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
}

proof of syldan {
	step 1 : wff = expcom (hyp 2) |- ( ch → ( ph → th ) ) ;;
	step 2 : wff = adantrd (step 1) |- ( ch → ( ( ph ∧ ps ) → th ) ) ;;
	step 3 : wff = mpcom (hyp 1, step 2) |- ( ( ph ∧ ps ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/* A syllogism inference.  (Contributed by NM, 21-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2012.) */

theorem sylan (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of sylan {
	step 1 : wff = expcom (hyp 2) |- ( ch → ( ps → th ) ) ;;
	step 2 : wff = mpan9 (hyp 1, step 1) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 18-May-1994.) */

theorem sylanb (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of sylanb {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 18-May-1994.) */

theorem sylanbr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ps ↔ ph ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of sylanbr {
	step 1 : wff = biimpri (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 21-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2012.) */

theorem sylan2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → th ) ;;
}

proof of sylan2 {
	step 1 : wff = adantl (hyp 1) |- ( ( ps ∧ ph ) → ch ) ;;
	step 2 : wff = syldan (step 1, hyp 2) |- ( ( ps ∧ ph ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 21-Apr-1994.) */

theorem sylan2b (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ch ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → th ) ;;
}

proof of sylan2b {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ch ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ps ∧ ph ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 21-Apr-1994.) */

theorem sylan2br (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ch ↔ ph ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → th ) ;;
}

proof of sylan2br {
	step 1 : wff = biimpri (hyp 1) |- ( ph → ch ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ps ∧ ph ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A double syllogism inference.  (Contributed by NM, 31-Jan-1997.) */

theorem syl2an (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ta → ch ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ta ) → th ) ;;
}

proof of syl2an {
	step 1 : wff = sylan (hyp 1, hyp 3) |- ( ( ph ∧ ch ) → th ) ;;
	step 2 : wff = sylan2 (hyp 2, step 1) |- ( ( ph ∧ ta ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A double syllogism inference.  (Contributed by NM, 17-Sep-2013.) */

theorem syl2anr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ta → ch ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ta ∧ ph ) → th ) ;;
}

proof of syl2anr {
	step 1 : wff = syl2an (hyp 1, hyp 2, hyp 3) |- ( ( ph ∧ ta ) → th ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ta ∧ ph ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A double syllogism inference.  (Contributed by NM, 29-Jul-1999.) */

theorem syl2anb (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ta ↔ ch ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ta ) → th ) ;;
}

proof of syl2anb {
	step 1 : wff = sylanb (hyp 1, hyp 3) |- ( ( ph ∧ ch ) → th ) ;;
	step 2 : wff = sylan2b (hyp 2, step 1) |- ( ( ph ∧ ta ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A double syllogism inference.  (Contributed by NM, 29-Jul-1999.) */

theorem syl2anbr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ps ↔ ph ) ;;
	hyp 2 : wff = |- ( ch ↔ ta ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ta ) → th ) ;;
}

proof of syl2anbr {
	step 1 : wff = sylanbr (hyp 1, hyp 3) |- ( ( ph ∧ ch ) → th ) ;;
	step 2 : wff = sylan2br (hyp 2, step 1) |- ( ( ph ∧ ta ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism deduction.  (Contributed by NM, 15-Dec-2004.) */

theorem syland (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ( ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) → ta ) ) ;;
}

proof of syland {
	step 1 : wff = exp3a (hyp 2) |- ( ph → ( ch → ( th → ta ) ) ) ;;
	step 2 : wff = syld (hyp 1, step 1) |- ( ph → ( ps → ( th → ta ) ) ) ;;
	step 3 : wff = imp3a (step 2) |- ( ph → ( ( ps ∧ th ) → ta ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A syllogism deduction.  (Contributed by NM, 15-Dec-2004.) */

theorem sylan2d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ( th ∧ ch ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∧ ps ) → ta ) ) ;;
}

proof of sylan2d {
	step 1 : wff = ancomsd (hyp 2) |- ( ph → ( ( ch ∧ th ) → ta ) ) ;;
	step 2 : wff = syland (hyp 1, step 1) |- ( ph → ( ( ps ∧ th ) → ta ) ) ;;
	step 3 : wff = ancomsd (step 2) |- ( ph → ( ( th ∧ ps ) → ta ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A syllogism deduction.  (Contributed by NM, 15-Dec-2004.) */

theorem syl2and (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	hyp 3 : wff = |- ( ph → ( ( ch ∧ ta ) → et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) → et ) ) ;;
}

proof of syl2and {
	step 1 : wff = sylan2d (hyp 2, hyp 3) |- ( ph → ( ( ch ∧ th ) → et ) ) ;;
	step 2 : wff = syland (hyp 1, step 1) |- ( ph → ( ( ps ∧ th ) → et ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) */

theorem biimpa (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of biimpa {
	step 1 : wff = biimpd (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) */

theorem biimpar (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → ps ) ;;
}

proof of biimpar {
	step 1 : wff = biimprd (hyp 1) |- ( ph → ( ch → ps ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ch ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) */

theorem biimpac (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → ch ) ;;
}

proof of biimpac {
	step 1 : wff = biimpcd (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ps ∧ ph ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference from a logical equivalence.  (Contributed by NM,
       3-May-1994.) */

theorem biimparc (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ph ) → ps ) ;;
}

proof of biimparc {
	step 1 : wff = biimprcd (hyp 1) |- ( ch → ( ph → ps ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ch ∧ ph ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Negated conjunction in terms of disjunction (De Morgan's law).  Theorem
     *4.51 of [WhiteheadRussell] p. 120.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Andrew Salmon, 13-May-2011.) */

theorem ianor (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∧ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
}

proof of ianor {
	step 1 : wff = imnan () |- ( ( ph → ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
	step 2 : wff = pm4.62 () |- ( ( ph → ¬ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
	step 3 : wff = bitr3i (step 1, step 2) |- ( ¬ ( ph ∧ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Conjunction in terms of disjunction (De Morgan's law).  Theorem *4.5 of
     [WhiteheadRussell] p. 120.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 3-Nov-2012.) */

theorem anor (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) ↔ ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
}

proof of anor {
	step 1 : wff = ianor () |- ( ¬ ( ph ∧ ps ) ↔ ( ¬ ph ∨ ¬ ps ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ¬ ph ∨ ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
	step 3 : wff = con2bii (step 2) |- ( ( ph ∧ ps ) ↔ ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Negated disjunction in terms of conjunction (De Morgan's law).  Compare
     Theorem *4.56 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     5-Aug-1993.)  (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem ioran (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
}

proof of ioran {
	step 1 : wff = pm4.65 () |- ( ¬ ( ¬ ph → ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = pm4.64 () |- ( ( ¬ ph → ps ) ↔ ( ph ∨ ps ) ) ;;
	step 3 : wff = xchnxbi (step 1, step 2) |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.52 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Nov-2012.) */

theorem pm4.52 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ¬ ph ∨ ps ) ) ;;
}

proof of pm4.52 {
	step 1 : wff = annim () |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ph → ps ) ) ;;
	step 2 : wff = imor () |- ( ( ph → ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
	step 3 : wff = xchbinx (step 1, step 2) |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ¬ ph ∨ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.53 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.53 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∧ ¬ ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
}

proof of pm4.53 {
	step 1 : wff = pm4.52 () |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ¬ ph ∨ ps ) ) ;;
	step 2 : wff = con2bii (step 1) |- ( ( ¬ ph ∨ ps ) ↔ ¬ ( ph ∧ ¬ ps ) ) ;;
	step 3 : wff = bicomi (step 2) |- ( ¬ ( ph ∧ ¬ ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.54 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Nov-2012.) */

theorem pm4.54 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph ∧ ps ) ↔ ¬ ( ph ∨ ¬ ps ) ) ;;
}

proof of pm4.54 {
	step 1 : wff = df-an () |- ( ( ¬ ph ∧ ps ) ↔ ¬ ( ¬ ph → ¬ ps ) ) ;;
	step 2 : wff = pm4.66 () |- ( ( ¬ ph → ¬ ps ) ↔ ( ph ∨ ¬ ps ) ) ;;
	step 3 : wff = xchbinx (step 1, step 2) |- ( ( ¬ ph ∧ ps ) ↔ ¬ ( ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.55 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.55 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ¬ ph ∧ ps ) ↔ ( ph ∨ ¬ ps ) ) ;;
}

proof of pm4.55 {
	step 1 : wff = pm4.54 () |- ( ( ¬ ph ∧ ps ) ↔ ¬ ( ph ∨ ¬ ps ) ) ;;
	step 2 : wff = con2bii (step 1) |- ( ( ph ∨ ¬ ps ) ↔ ¬ ( ¬ ph ∧ ps ) ) ;;
	step 3 : wff = bicomi (step 2) |- ( ¬ ( ¬ ph ∧ ps ) ↔ ( ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.56 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.56 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph ∧ ¬ ps ) ↔ ¬ ( ph ∨ ps ) ) ;;
}

proof of pm4.56 {
	step 1 : wff = ioran () |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ¬ ph ∧ ¬ ps ) ↔ ¬ ( ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Disjunction in terms of conjunction (De Morgan's law).  Compare Theorem
     *4.57 of [WhiteheadRussell] p. 120.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem oran (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) ↔ ¬ ( ¬ ph ∧ ¬ ps ) ) ;;
}

proof of oran {
	step 1 : wff = pm4.56 () |- ( ( ¬ ph ∧ ¬ ps ) ↔ ¬ ( ph ∨ ps ) ) ;;
	step 2 : wff = con2bii (step 1) |- ( ( ph ∨ ps ) ↔ ¬ ( ¬ ph ∧ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.57 of [WhiteheadRussell] p. 120.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.57 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ¬ ph ∧ ¬ ps ) ↔ ( ph ∨ ps ) ) ;;
}

proof of pm4.57 {
	step 1 : wff = oran () |- ( ( ph ∨ ps ) ↔ ¬ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ¬ ( ¬ ph ∧ ¬ ps ) ↔ ( ph ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.1 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.1 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) → ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
}

proof of pm3.1 {
	step 1 : wff = anor () |- ( ( ph ∧ ps ) ↔ ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph ∧ ps ) → ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.11 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.11 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ¬ ph ∨ ¬ ps ) → ( ph ∧ ps ) ) ;;
}

proof of pm3.11 {
	step 1 : wff = anor () |- ( ( ph ∧ ps ) ↔ ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
	step 2 : wff = biimpri (step 1) |- ( ¬ ( ¬ ph ∨ ¬ ps ) → ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.12 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.12 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph ∨ ¬ ps ) ∨ ( ph ∧ ps ) ) ;;
}

proof of pm3.12 {
	step 1 : wff = pm3.11 () |- ( ¬ ( ¬ ph ∨ ¬ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = orri (step 1) |- ( ( ¬ ph ∨ ¬ ps ) ∨ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.13 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.13 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ∧ ps ) → ( ¬ ph ∨ ¬ ps ) ) ;;
}

proof of pm3.13 {
	step 1 : wff = pm3.11 () |- ( ¬ ( ¬ ph ∨ ¬ ps ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = con1i (step 1) |- ( ¬ ( ph ∧ ps ) → ( ¬ ph ∨ ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.14 of [WhiteheadRussell] p. 111.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.14 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph ∨ ¬ ps ) → ¬ ( ph ∧ ps ) ) ;;
}

proof of pm3.14 {
	step 1 : wff = pm3.1 () |- ( ( ph ∧ ps ) → ¬ ( ¬ ph ∨ ¬ ps ) ) ;;
	step 2 : wff = con2i (step 1) |- ( ( ¬ ph ∨ ¬ ps ) → ¬ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduction of antecedent as conjunct.  Theorem *4.73 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 30-Mar-1994.) */

theorem iba (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps ↔ ( ps ∧ ph ) ) ) ;;
}

proof of iba {
	step 1 : wff = pm3.21 () |- ( ph → ( ps → ( ps ∧ ph ) ) ) ;;
	step 2 : wff = simpl () |- ( ( ps ∧ ph ) → ps ) ;;
	step 3 : wff = impbid1 (step 1, step 2) |- ( ph → ( ps ↔ ( ps ∧ ph ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Introduction of antecedent as conjunct.  (Contributed by NM,
     5-Dec-1995.) */

theorem ibar (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ps ↔ ( ph ∧ ps ) ) ) ;;
}

proof of ibar {
	step 1 : wff = pm3.2 () |- ( ph → ( ps → ( ph ∧ ps ) ) ) ;;
	step 2 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 3 : wff = impbid1 (step 1, step 2) |- ( ph → ( ps ↔ ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       5-Aug-1993.) */

theorem biantru (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ps ↔ ( ps ∧ ph ) ) ;;
}

proof of biantru {
	step 1 : wff = iba () |- ( ph → ( ps ↔ ( ps ∧ ph ) ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ps ↔ ( ps ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       3-Aug-1994.) */

theorem biantrur (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ph ;;
	-----------------------
	prop 1 : wff = |- ( ps ↔ ( ph ∧ ps ) ) ;;
}

proof of biantrur {
	step 1 : wff = ibar () |- ( ph → ( ps ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = ax-mp (hyp 1, step 1) |- ( ps ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       2-Aug-1994.)  (Proof shortened by Wolf Lammen, 23-Oct-2013.) */

theorem biantrud (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch ↔ ( ch ∧ ps ) ) ) ;;
}

proof of biantrud {
	step 1 : wff = iba () |- ( ps → ( ch ↔ ( ch ∧ ps ) ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ch ↔ ( ch ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A wff is equivalent to its conjunction with truth.  (Contributed by NM,
       1-May-1995.)  (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem biantrurd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch ↔ ( ps ∧ ch ) ) ) ;;
}

proof of biantrurd {
	step 1 : wff = ibar () |- ( ps → ( ch ↔ ( ps ∧ ch ) ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ch ↔ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference conjoining and disjoining the antecedents of two
       implications.  (Contributed by NM, 30-Sep-1999.) */

theorem jaao (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ( ps ∨ ta ) → ch ) ) ;;
}

proof of jaao {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ( ps → ch ) ) ;;
	step 2 : wff = adantl (hyp 2) |- ( ( ph ∧ th ) → ( ta → ch ) ) ;;
	step 3 : wff = jaod (step 1, step 2) |- ( ( ph ∧ th ) → ( ( ps ∨ ta ) → ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Inference disjoining and conjoining the antecedents of two
       implications.  (Contributed by Stefan Allan, 1-Nov-2008.) */

theorem jaoa (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ th ) → ( ( ps ∧ ta ) → ch ) ) ;;
}

proof of jaoa {
	step 1 : wff = adantrd (hyp 1) |- ( ph → ( ( ps ∧ ta ) → ch ) ) ;;
	step 2 : wff = adantld (hyp 2) |- ( th → ( ( ps ∧ ta ) → ch ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ th ) → ( ( ps ∧ ta ) → ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *3.44 of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 3-Oct-2013.) */

theorem pm3.44 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ps → ph ) ∧ ( ch → ph ) ) → ( ( ps ∨ ch ) → ph ) ) ;;
}

proof of pm3.44 {
	step 1 : wff = id () |- ( ( ps → ph ) → ( ps → ph ) ) ;;
	step 2 : wff = id () |- ( ( ch → ph ) → ( ch → ph ) ) ;;
	step 3 : wff = jaao (step 1, step 2) |- ( ( ( ps → ph ) ∧ ( ch → ph ) ) → ( ( ps ∨ ch ) → ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Disjunction of antecedents.  Compare Theorem *3.44 of [WhiteheadRussell]
     p. 113.  (Contributed by NM, 5-Apr-1994.)  (Proof shortened by Wolf
     Lammen, 4-Apr-2013.) */

theorem jao (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ch → ps ) → ( ( ph ∨ ch ) → ps ) ) ) ;;
}

proof of jao {
	step 1 : wff = pm3.44 () |- ( ( ( ph → ps ) ∧ ( ch → ps ) ) → ( ( ph ∨ ch ) → ps ) ) ;;
	step 2 : wff = ex (step 1) |- ( ( ph → ps ) → ( ( ch → ps ) → ( ( ph ∨ ch ) → ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Axiom *1.2 of [WhiteheadRussell] p. 96, which they call "Taut".
     (Contributed by NM, 3-Jan-2005.) */

theorem pm1.2 (ph : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ph ) → ph ) ;;
}

proof of pm1.2 {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = id () |- ( ph → ph ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ ph ) → ph ) ;;
	qed prop 1 = step 3 ;;
}

/* Idempotent law for disjunction.  Theorem *4.25 of [WhiteheadRussell]
     p. 117.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
     Salmon, 16-Apr-2011.)  (Proof shortened by Wolf Lammen, 10-Mar-2013.) */

theorem oridm (ph : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ph ) ↔ ph ) ;;
}

proof of oridm {
	step 1 : wff = pm1.2 () |- ( ( ph ∨ ph ) → ph ) ;;
	step 2 : wff = pm2.07 () |- ( ph → ( ph ∨ ph ) ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ( ph ∨ ph ) ↔ ph ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.25 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.25 (ph : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ph ∨ ph ) ) ;;
}

proof of pm4.25 {
	step 1 : wff = oridm () |- ( ( ph ∨ ph ) ↔ ph ) ;;
	step 2 : wff = bicomi (step 1) |- ( ph ↔ ( ph ∨ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Disjoin antecedents and consequents of two premises.  (Contributed by
       NM, 6-Jun-1994.)  (Proof shortened by Wolf Lammen, 25-Jul-2012.) */

theorem orim12i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ) → ( ps ∨ th ) ) ;;
}

proof of orim12i {
	step 1 : wff = orcd (hyp 1) |- ( ph → ( ps ∨ th ) ) ;;
	step 2 : wff = olcd (hyp 2) |- ( ch → ( ps ∨ th ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ ch ) → ( ps ∨ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Introduce disjunct to both sides of an implication.  (Contributed by NM,
       6-Jun-1994.) */

theorem orim1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ) → ( ps ∨ ch ) ) ;;
}

proof of orim1i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = orim12i (hyp 1, step 1) |- ( ( ph ∨ ch ) → ( ps ∨ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce disjunct to both sides of an implication.  (Contributed by NM,
       6-Jun-1994.) */

theorem orim2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∨ ph ) → ( ch ∨ ps ) ) ;;
}

proof of orim2i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = orim12i (step 1, hyp 1) |- ( ( ch ∨ ph ) → ( ch ∨ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding a left disjunct to both sides of a logical
       equivalence.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
       Lammen, 12-Dec-2012.) */

theorem orbi2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∨ ph ) ↔ ( ch ∨ ps ) ) ;;
}

proof of orbi2i {
	step 1 : wff = biimpi (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = orim2i (step 1) |- ( ( ch ∨ ph ) → ( ch ∨ ps ) ) ;;
	step 3 : wff = biimpri (hyp 1) |- ( ps → ph ) ;;
	step 4 : wff = orim2i (step 3) |- ( ( ch ∨ ps ) → ( ch ∨ ph ) ) ;;
	step 5 : wff = impbii (step 2, step 4) |- ( ( ch ∨ ph ) ↔ ( ch ∨ ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Inference adding a right disjunct to both sides of a logical
       equivalence.  (Contributed by NM, 5-Aug-1993.) */

theorem orbi1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ) ↔ ( ps ∨ ch ) ) ;;
}

proof of orbi1i {
	step 1 : wff = orcom () |- ( ( ph ∨ ch ) ↔ ( ch ∨ ph ) ) ;;
	step 2 : wff = orbi2i (hyp 1) |- ( ( ch ∨ ph ) ↔ ( ch ∨ ps ) ) ;;
	step 3 : wff = orcom () |- ( ( ch ∨ ps ) ↔ ( ps ∨ ch ) ) ;;
	step 4 : wff = 3bitri (step 1, step 2, step 3) |- ( ( ph ∨ ch ) ↔ ( ps ∨ ch ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Infer the disjunction of two equivalences.  (Contributed by NM,
       5-Aug-1993.) */

theorem orbi12i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch ↔ th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∨ ch ) ↔ ( ps ∨ th ) ) ;;
}

proof of orbi12i {
	step 1 : wff = orbi2i (hyp 2) |- ( ( ph ∨ ch ) ↔ ( ph ∨ th ) ) ;;
	step 2 : wff = orbi1i (hyp 1) |- ( ( ph ∨ th ) ↔ ( ps ∨ th ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∨ ch ) ↔ ( ps ∨ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Axiom *1.5 (Assoc) of [WhiteheadRussell] p. 96.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm1.5 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ps ∨ ( ph ∨ ch ) ) ) ;;
}

proof of pm1.5 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ch ) ) ;;
	step 2 : wff = olcd (step 1) |- ( ph → ( ps ∨ ( ph ∨ ch ) ) ) ;;
	step 3 : wff = olc () |- ( ch → ( ph ∨ ch ) ) ;;
	step 4 : wff = orim2i (step 3) |- ( ( ps ∨ ch ) → ( ps ∨ ( ph ∨ ch ) ) ) ;;
	step 5 : wff = jaoi (step 2, step 4) |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ps ∨ ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Swap two disjuncts.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by
     Wolf Lammen, 14-Nov-2012.) */

theorem or12 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ps ∨ ( ph ∨ ch ) ) ) ;;
}

proof of or12 {
	step 1 : wff = pm1.5 () |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ps ∨ ( ph ∨ ch ) ) ) ;;
	step 2 : wff = pm1.5 () |- ( ( ps ∨ ( ph ∨ ch ) ) → ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = impbii (step 1, step 2) |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ps ∨ ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Associative law for disjunction.  Theorem *4.33 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) */

theorem orass (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
}

proof of orass {
	step 1 : wff = orcom () |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ch ∨ ( ph ∨ ps ) ) ) ;;
	step 2 : wff = or12 () |- ( ( ch ∨ ( ph ∨ ps ) ) ↔ ( ph ∨ ( ch ∨ ps ) ) ) ;;
	step 3 : wff = orcom () |- ( ( ch ∨ ps ) ↔ ( ps ∨ ch ) ) ;;
	step 4 : wff = orbi2i (step 3) |- ( ( ph ∨ ( ch ∨ ps ) ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 5 : wff = 3bitri (step 1, step 2, step 4) |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem *2.31 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.31 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ( ph ∨ ps ) ∨ ch ) ) ;;
}

proof of pm2.31 {
	step 1 : wff = orass () |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 2 : wff = biimpri (step 1) |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ( ph ∨ ps ) ∨ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.32 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.32 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ch ) → ( ph ∨ ( ps ∨ ch ) ) ) ;;
}

proof of pm2.32 {
	step 1 : wff = orass () |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ( ph ∨ ps ) ∨ ch ) → ( ph ∨ ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A rearrangement of disjuncts.  (Contributed by NM, 18-Oct-1995.)  (Proof
     shortened by Andrew Salmon, 26-Jun-2011.) */

theorem or32 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ( ph ∨ ch ) ∨ ps ) ) ;;
}

proof of or32 {
	step 1 : wff = orass () |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 2 : wff = or12 () |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ps ∨ ( ph ∨ ch ) ) ) ;;
	step 3 : wff = orcom () |- ( ( ps ∨ ( ph ∨ ch ) ) ↔ ( ( ph ∨ ch ) ∨ ps ) ) ;;
	step 4 : wff = 3bitri (step 1, step 2, step 3) |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ( ph ∨ ch ) ∨ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Rearrangement of 4 disjuncts.  (Contributed by NM, 12-Aug-1994.) */

theorem or4 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ↔ ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ) ;;
}

proof of or4 {
	step 1 : wff = or12 () |- ( ( ps ∨ ( ch ∨ th ) ) ↔ ( ch ∨ ( ps ∨ th ) ) ) ;;
	step 2 : wff = orbi2i (step 1) |- ( ( ph ∨ ( ps ∨ ( ch ∨ th ) ) ) ↔ ( ph ∨ ( ch ∨ ( ps ∨ th ) ) ) ) ;;
	step 3 : wff = orass () |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ↔ ( ph ∨ ( ps ∨ ( ch ∨ th ) ) ) ) ;;
	step 4 : wff = orass () |- ( ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ↔ ( ph ∨ ( ch ∨ ( ps ∨ th ) ) ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ↔ ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Rearrangement of 4 disjuncts.  (Contributed by NM, 10-Jan-2005.) */

theorem or42 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ↔ ( ( ph ∨ ch ) ∨ ( th ∨ ps ) ) ) ;;
}

proof of or42 {
	step 1 : wff = or4 () |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ↔ ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ) ;;
	step 2 : wff = orcom () |- ( ( ps ∨ th ) ↔ ( th ∨ ps ) ) ;;
	step 3 : wff = orbi2i (step 2) |- ( ( ( ph ∨ ch ) ∨ ( ps ∨ th ) ) ↔ ( ( ph ∨ ch ) ∨ ( th ∨ ps ) ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ th ) ) ↔ ( ( ph ∨ ch ) ∨ ( th ∨ ps ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Distribution of disjunction over disjunction.  (Contributed by NM,
     25-Feb-1995.) */

theorem orordi (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ( ph ∨ ps ) ∨ ( ph ∨ ch ) ) ) ;;
}

proof of orordi {
	step 1 : wff = oridm () |- ( ( ph ∨ ph ) ↔ ph ) ;;
	step 2 : wff = orbi1i (step 1) |- ( ( ( ph ∨ ph ) ∨ ( ps ∨ ch ) ) ↔ ( ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = or4 () |- ( ( ( ph ∨ ph ) ∨ ( ps ∨ ch ) ) ↔ ( ( ph ∨ ps ) ∨ ( ph ∨ ch ) ) ) ;;
	step 4 : wff = bitr3i (step 2, step 3) |- ( ( ph ∨ ( ps ∨ ch ) ) ↔ ( ( ph ∨ ps ) ∨ ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Distribution of disjunction over disjunction.  (Contributed by NM,
     25-Feb-1995.) */

theorem orordir (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ( ph ∨ ch ) ∨ ( ps ∨ ch ) ) ) ;;
}

proof of orordir {
	step 1 : wff = oridm () |- ( ( ch ∨ ch ) ↔ ch ) ;;
	step 2 : wff = orbi2i (step 1) |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ ch ) ) ↔ ( ( ph ∨ ps ) ∨ ch ) ) ;;
	step 3 : wff = or4 () |- ( ( ( ph ∨ ps ) ∨ ( ch ∨ ch ) ) ↔ ( ( ph ∨ ch ) ∨ ( ps ∨ ch ) ) ) ;;
	step 4 : wff = bitr3i (step 2, step 3) |- ( ( ( ph ∨ ps ) ∨ ch ) ↔ ( ( ph ∨ ch ) ∨ ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduce conjunction of the consequents of two implications ("join
       consequents with 'and'").  Equivalent to the natural deduction rule
       ` /\ ` I ( ` /\ ` introduction), see ~ natded .  (Contributed by NM,
       5-Aug-1993.)  (Proof shortened by Wolf Lammen, 25-Oct-2012.) */

theorem jca (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ch ) ) ;;
}

proof of jca {
	step 1 : wff = pm3.2 () |- ( ps → ( ch → ( ps ∧ ch ) ) ) ;;
	step 2 : wff = sylc (hyp 1, hyp 2, step 1) |- ( ph → ( ps ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining the consequents of two implications.  (Contributed
       by NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen, 23-Jul-2013.) */

theorem jcad (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( ps → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch ∧ th ) ) ) ;;
}

proof of jcad {
	step 1 : wff = pm3.2 () |- ( ch → ( th → ( ch ∧ th ) ) ) ;;
	step 2 : wff = syl6c (hyp 1, hyp 2, step 1) |- ( ph → ( ps → ( ch ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Join three consequents.  (Contributed by Jeff Hankins, 1-Aug-2009.) */

theorem jca31 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) ∧ th ) ) ;;
}

proof of jca31 {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = jca (step 1, hyp 3) |- ( ph → ( ( ps ∧ ch ) ∧ th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Join three consequents.  (Contributed by FL, 1-Aug-2009.) */

theorem jca32 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ( ch ∧ th ) ) ) ;;
}

proof of jca32 {
	step 1 : wff = jca (hyp 2, hyp 3) |- ( ph → ( ch ∧ th ) ) ;;
	step 2 : wff = jca (hyp 1, step 1) |- ( ph → ( ps ∧ ( ch ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction replacing implication with conjunction.  (Contributed by NM,
       5-Aug-1993.) */

theorem jcai (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ch ) ) ;;
}

proof of jcai {
	step 1 : wff = mpd (hyp 1, hyp 2) |- ( ph → ch ) ;;
	step 2 : wff = jca (hyp 1, step 1) |- ( ph → ( ps ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference conjoining a theorem to left of consequent in an implication.
       (Contributed by NM, 31-Dec-1993.) */

theorem jctil (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ch ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch ∧ ps ) ) ;;
}

proof of jctil {
	step 1 : wff = a1i (hyp 2) |- ( ph → ch ) ;;
	step 2 : wff = jca (step 1, hyp 1) |- ( ph → ( ch ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference conjoining a theorem to right of consequent in an
       implication.  (Contributed by NM, 31-Dec-1993.) */

theorem jctir (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ch ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ch ) ) ;;
}

proof of jctir {
	step 1 : wff = a1i (hyp 2) |- ( ph → ch ) ;;
	step 2 : wff = jca (hyp 1, step 1) |- ( ph → ( ps ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference conjoining a theorem to the left of a consequent.
       (Contributed by NM, 31-Dec-1993.)  (Proof shortened by Wolf Lammen,
       24-Oct-2012.) */

theorem jctl (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ps ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ph ) ) ;;
}

proof of jctl {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = jctil (step 1, hyp 1) |- ( ph → ( ps ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference conjoining a theorem to the right of a consequent.
       (Contributed by NM, 18-Aug-1993.)  (Proof shortened by Wolf Lammen,
       24-Oct-2012.) */

theorem jctr (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ps ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ph ∧ ps ) ) ;;
}

proof of jctr {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = jctir (step 1, hyp 1) |- ( ph → ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining a theorem to left of consequent in an implication.
       (Contributed by NM, 21-Apr-2005.) */

theorem jctild (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( th ∧ ch ) ) ) ;;
}

proof of jctild {
	step 1 : wff = a1d (hyp 2) |- ( ph → ( ps → th ) ) ;;
	step 2 : wff = jcad (step 1, hyp 1) |- ( ph → ( ps → ( th ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining a theorem to right of consequent in an
       implication.  (Contributed by NM, 21-Apr-2005.) */

theorem jctird (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch ∧ th ) ) ) ;;
}

proof of jctird {
	step 1 : wff = a1d (hyp 2) |- ( ph → ( ps → th ) ) ;;
	step 2 : wff = jcad (hyp 1, step 1) |- ( ph → ( ps → ( ch ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedent to left of consequent.  (Contributed by NM,
     15-Aug-1994.) */

theorem ancl (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ph → ( ph ∧ ps ) ) ) ;;
}

proof of ancl {
	step 1 : wff = pm3.2 () |- ( ph → ( ps → ( ph ∧ ps ) ) ) ;;
	step 2 : wff = a2i (step 1) |- ( ( ph → ps ) → ( ph → ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedent to left of consequent.  Theorem *4.7 of
     [WhiteheadRussell] p. 120.  (Contributed by NM, 25-Jul-1999.)  (Proof
     shortened by Wolf Lammen, 24-Mar-2013.) */

theorem anclb (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ( ph → ( ph ∧ ps ) ) ) ;;
}

proof of anclb {
	step 1 : wff = ibar () |- ( ph → ( ps ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = pm5.74i (step 1) |- ( ( ph → ps ) ↔ ( ph → ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *5.42 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.42 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) ↔ ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
}

proof of pm5.42 {
	step 1 : wff = ibar () |- ( ph → ( ch ↔ ( ph ∧ ch ) ) ) ;;
	step 2 : wff = imbi2d (step 1) |- ( ph → ( ( ps → ch ) ↔ ( ps → ( ph ∧ ch ) ) ) ) ;;
	step 3 : wff = pm5.74i (step 2) |- ( ( ph → ( ps → ch ) ) ↔ ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Conjoin antecedent to right of consequent.  (Contributed by NM,
     15-Aug-1994.) */

theorem ancr (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ph → ( ps ∧ ph ) ) ) ;;
}

proof of ancr {
	step 1 : wff = pm3.21 () |- ( ph → ( ps → ( ps ∧ ph ) ) ) ;;
	step 2 : wff = a2i (step 1) |- ( ( ph → ps ) → ( ph → ( ps ∧ ph ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedent to right of consequent.  (Contributed by NM,
     25-Jul-1999.)  (Proof shortened by Wolf Lammen, 24-Mar-2013.) */

theorem ancrb (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ( ph → ( ps ∧ ph ) ) ) ;;
}

proof of ancrb {
	step 1 : wff = iba () |- ( ph → ( ps ↔ ( ps ∧ ph ) ) ) ;;
	step 2 : wff = pm5.74i (step 1) |- ( ( ph → ps ) ↔ ( ph → ( ps ∧ ph ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining antecedent to left of consequent.  (Contributed by
       NM, 12-Aug-1993.) */

theorem ancli (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ph ∧ ps ) ) ;;
}

proof of ancli {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = jca (step 1, hyp 1) |- ( ph → ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining antecedent to right of consequent.  (Contributed by
       NM, 15-Aug-1994.) */

theorem ancri (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ∧ ph ) ) ;;
}

proof of ancri {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = jca (hyp 1, step 1) |- ( ph → ( ps ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining antecedent to left of consequent in nested
       implication.  (Contributed by NM, 15-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 1-Nov-2012.) */

theorem ancld (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ps ∧ ch ) ) ) ;;
}

proof of ancld {
	step 1 : wff = idd () |- ( ph → ( ps → ps ) ) ;;
	step 2 : wff = jcad (step 1, hyp 1) |- ( ph → ( ps → ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining antecedent to right of consequent in nested
       implication.  (Contributed by NM, 15-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 1-Nov-2012.) */

theorem ancrd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch ∧ ps ) ) ) ;;
}

proof of ancrd {
	step 1 : wff = idd () |- ( ph → ( ps → ps ) ) ;;
	step 2 : wff = jcad (hyp 1, step 1) |- ( ph → ( ps → ( ch ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedent to left of consequent in nested implication.
     (Contributed by NM, 10-Aug-1994.)  (Proof shortened by Wolf Lammen,
     14-Jul-2013.) */

theorem anc2l (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) → ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
}

proof of anc2l {
	step 1 : wff = pm5.42 () |- ( ( ph → ( ps → ch ) ) ↔ ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph → ( ps → ch ) ) → ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedent to right of consequent in nested implication.
     (Contributed by NM, 15-Aug-1994.) */

theorem anc2r (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) → ( ph → ( ps → ( ch ∧ ph ) ) ) ) ;;
}

proof of anc2r {
	step 1 : wff = pm3.21 () |- ( ph → ( ch → ( ch ∧ ph ) ) ) ;;
	step 2 : wff = imim2d (step 1) |- ( ph → ( ( ps → ch ) → ( ps → ( ch ∧ ph ) ) ) ) ;;
	step 3 : wff = a2i (step 2) |- ( ( ph → ( ps → ch ) ) → ( ph → ( ps → ( ch ∧ ph ) ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction conjoining antecedent to left of consequent in nested
       implication.  (Contributed by NM, 10-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 7-Dec-2012.) */

theorem anc2li (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ph ∧ ch ) ) ) ;;
}

proof of anc2li {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = jctild (hyp 1, step 1) |- ( ph → ( ps → ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction conjoining antecedent to right of consequent in nested
       implication.  (Contributed by NM, 15-Aug-1994.)  (Proof shortened by
       Wolf Lammen, 7-Dec-2012.) */

theorem anc2ri (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch ∧ ph ) ) ) ;;
}

proof of anc2ri {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = jctird (hyp 1, step 1) |- ( ph → ( ps → ( ch ∧ ph ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.41 of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.41 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ch ) → ( ( ph ∧ ps ) → ch ) ) ;;
}

proof of pm3.41 {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = imim1i (step 1) |- ( ( ph → ch ) → ( ( ph ∧ ps ) → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.42 of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.42 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ps → ch ) → ( ( ph ∧ ps ) → ch ) ) ;;
}

proof of pm3.42 {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = imim1i (step 1) |- ( ( ps → ch ) → ( ( ph ∧ ps ) → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjunction implies implication.  Theorem *3.4 of [WhiteheadRussell]
     p. 113.  (Contributed by NM, 31-Jul-1995.) */

theorem pm3.4 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ph → ps ) ) ;;
}

proof of pm3.4 {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = a1d (step 1) |- ( ( ph ∧ ps ) → ( ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjunction with implication.  Compare Theorem *4.45 of [WhiteheadRussell]
     p. 119.  (Contributed by NM, 17-May-1998.) */

theorem pm4.45im (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ph ∧ ( ps → ph ) ) ) ;;
}

proof of pm4.45im {
	step 1 : wff = ax-1 () |- ( ph → ( ps → ph ) ) ;;
	step 2 : wff = ancli (step 1) |- ( ph → ( ph ∧ ( ps → ph ) ) ) ;;
	step 3 : wff = simpl () |- ( ( ph ∧ ( ps → ph ) ) → ph ) ;;
	step 4 : wff = impbii (step 2, step 3) |- ( ph ↔ ( ph ∧ ( ps → ph ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Conjoin antecedents and consequents in a deduction.  (Contributed by NM,
       3-Apr-1994.)  (Proof shortened by Wolf Lammen, 18-Dec-2013.) */

theorem anim12d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) → ( ch ∧ ta ) ) ) ;;
}

proof of anim12d {
	step 1 : wff = idd () |- ( ph → ( ( ch ∧ ta ) → ( ch ∧ ta ) ) ) ;;
	step 2 : wff = syl2and (hyp 1, hyp 2, step 1) |- ( ph → ( ( ps ∧ th ) → ( ch ∧ ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Add a conjunct to right of antecedent and consequent in a deduction.
       (Contributed by NM, 3-Apr-1994.) */

theorem anim1d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) → ( ch ∧ th ) ) ) ;;
}

proof of anim1d {
	step 1 : wff = idd () |- ( ph → ( th → th ) ) ;;
	step 2 : wff = anim12d (hyp 1, step 1) |- ( ph → ( ( ps ∧ th ) → ( ch ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Add a conjunct to left of antecedent and consequent in a deduction.
       (Contributed by NM, 5-Aug-1993.) */

theorem anim2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∧ ps ) → ( th ∧ ch ) ) ) ;;
}

proof of anim2d {
	step 1 : wff = idd () |- ( ph → ( th → th ) ) ;;
	step 2 : wff = anim12d (step 1, hyp 1) |- ( ph → ( ( th ∧ ps ) → ( th ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedents and consequents of two premises.  (Contributed by
       NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen, 14-Dec-2013.) */

theorem anim12i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → ( ps ∧ th ) ) ;;
}

proof of anim12i {
	step 1 : wff = id () |- ( ( ps ∧ th ) → ( ps ∧ th ) ) ;;
	step 2 : wff = syl2an (hyp 1, hyp 2, step 1) |- ( ( ph ∧ ch ) → ( ps ∧ th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Variant of ~ anim12i with commutation.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) */

theorem anim12ci (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ch → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → ( th ∧ ps ) ) ;;
}

proof of anim12ci {
	step 1 : wff = anim12i (hyp 2, hyp 1) |- ( ( ch ∧ ph ) → ( th ∧ ps ) ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ph ∧ ch ) → ( th ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce conjunct to both sides of an implication.  (Contributed by NM,
       5-Aug-1993.) */

theorem anim1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → ( ps ∧ ch ) ) ;;
}

proof of anim1i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = anim12i (hyp 1, step 1) |- ( ( ph ∧ ch ) → ( ps ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce conjunct to both sides of an implication.  (Contributed by NM,
       5-Aug-1993.) */

theorem anim2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ph ) → ( ch ∧ ps ) ) ;;
}

proof of anim2i {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = anim12i (step 1, hyp 1) |- ( ( ch ∧ ph ) → ( ch ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedents and consequents in a deduction.  (Contributed by NM,
       11-Nov-2007.)  (Proof shortened by Wolf Lammen, 19-Jul-2013.) */

theorem anim12ii (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ps → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ps → ( ch ∧ ta ) ) ) ;;
}

proof of anim12ii {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ( ps → ch ) ) ;;
	step 2 : wff = adantl (hyp 2) |- ( ( ph ∧ th ) → ( ps → ta ) ) ;;
	step 3 : wff = jcad (step 1, step 2) |- ( ( ph ∧ th ) → ( ps → ( ch ∧ ta ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Conjoin antecedents and consequents of two premises.  This is the closed
     theorem form of ~ anim12d .  Theorem *3.47 of [WhiteheadRussell] p. 113.
     It was proved by Leibniz, and it evidently pleased him enough to call it
     _praeclarum theorema_ (splendid theorem).  (Contributed by NM,
     12-Aug-1993.)  (Proof shortened by Wolf Lammen, 7-Apr-2013.) */

theorem prth (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∧ ( ch → th ) ) → ( ( ph ∧ ch ) → ( ps ∧ th ) ) ) ;;
}

proof of prth {
	step 1 : wff = simpl () |- ( ( ( ph → ps ) ∧ ( ch → th ) ) → ( ph → ps ) ) ;;
	step 2 : wff = simpr () |- ( ( ( ph → ps ) ∧ ( ch → th ) ) → ( ch → th ) ) ;;
	step 3 : wff = anim12d (step 1, step 2) |- ( ( ( ph → ps ) ∧ ( ch → th ) ) → ( ( ph ∧ ch ) → ( ps ∧ th ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.3 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.3 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ph ∨ ( ch ∨ ps ) ) ) ;;
}

proof of pm2.3 {
	step 1 : wff = pm1.4 () |- ( ( ps ∨ ch ) → ( ch ∨ ps ) ) ;;
	step 2 : wff = orim2i (step 1) |- ( ( ph ∨ ( ps ∨ ch ) ) → ( ph ∨ ( ch ∨ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.41 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.41 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ps ∨ ( ph ∨ ps ) ) → ( ph ∨ ps ) ) ;;
}

proof of pm2.41 {
	step 1 : wff = olc () |- ( ps → ( ph ∨ ps ) ) ;;
	step 2 : wff = id () |- ( ( ph ∨ ps ) → ( ph ∨ ps ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ps ∨ ( ph ∨ ps ) ) → ( ph ∨ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.42 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.42 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph ∨ ( ph → ps ) ) → ( ph → ps ) ) ;;
}

proof of pm2.42 {
	step 1 : wff = pm2.21 () |- ( ¬ ph → ( ph → ps ) ) ;;
	step 2 : wff = id () |- ( ( ph → ps ) → ( ph → ps ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ¬ ph ∨ ( ph → ps ) ) → ( ph → ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.4 of [WhiteheadRussell] p. 106.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.4 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ph ∨ ps ) ) → ( ph ∨ ps ) ) ;;
}

proof of pm2.4 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = id () |- ( ( ph ∨ ps ) → ( ph ∨ ps ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ ( ph ∨ ps ) ) → ( ph ∨ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction rule for proof by contradiction.  (Contributed by NM,
       12-Jun-2014.) */

theorem pm2.65da (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ) → ¬ ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ps ) ;;
}

proof of pm2.65da {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ph → ( ps → ¬ ch ) ) ;;
	step 3 : wff = pm2.65d (step 1, step 2) |- ( ph → ¬ ps ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.44 of [WhiteheadRussell] p. 119.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.44 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ph ∨ ( ph ∧ ps ) ) ) ;;
}

proof of pm4.44 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = id () |- ( ph → ph ) ;;
	step 3 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 4 : wff = jaoi (step 2, step 3) |- ( ( ph ∨ ( ph ∧ ps ) ) → ph ) ;;
	step 5 : wff = impbii (step 1, step 4) |- ( ph ↔ ( ph ∨ ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem *4.14 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Oct-2012.) */

theorem pm4.14 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ( ph ∧ ¬ ch ) → ¬ ps ) ) ;;
}

proof of pm4.14 {
	step 1 : wff = con34b () |- ( ( ps → ch ) ↔ ( ¬ ch → ¬ ps ) ) ;;
	step 2 : wff = imbi2i (step 1) |- ( ( ph → ( ps → ch ) ) ↔ ( ph → ( ¬ ch → ¬ ps ) ) ) ;;
	step 3 : wff = impexp () |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ;;
	step 4 : wff = impexp () |- ( ( ( ph ∧ ¬ ch ) → ¬ ps ) ↔ ( ph → ( ¬ ch → ¬ ps ) ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ( ph ∧ ¬ ch ) → ¬ ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem *3.37 (Transp) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Oct-2012.) */

theorem pm3.37 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) → ch ) → ( ( ph ∧ ¬ ch ) → ¬ ps ) ) ;;
}

proof of pm3.37 {
	step 1 : wff = pm4.14 () |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ( ph ∧ ¬ ch ) → ¬ ps ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ( ph ∧ ps ) → ch ) → ( ( ph ∧ ¬ ch ) → ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem to move a conjunct in and out of a negation.  (Contributed by NM,
     9-Nov-2003.) */

theorem nan (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ¬ ( ps ∧ ch ) ) ↔ ( ( ph ∧ ps ) → ¬ ch ) ) ;;
}

proof of nan {
	step 1 : wff = impexp () |- ( ( ( ph ∧ ps ) → ¬ ch ) ↔ ( ph → ( ps → ¬ ch ) ) ) ;;
	step 2 : wff = imnan () |- ( ( ps → ¬ ch ) ↔ ¬ ( ps ∧ ch ) ) ;;
	step 3 : wff = imbi2i (step 2) |- ( ( ph → ( ps → ¬ ch ) ) ↔ ( ph → ¬ ( ps ∧ ch ) ) ) ;;
	step 4 : wff = bitr2i (step 1, step 3) |- ( ( ph → ¬ ( ps ∧ ch ) ) ↔ ( ( ph ∧ ps ) → ¬ ch ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem *4.15 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 18-Nov-2012.) */

theorem pm4.15 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) → ¬ ch ) ↔ ( ( ps ∧ ch ) → ¬ ph ) ) ;;
}

proof of pm4.15 {
	step 1 : wff = con2b () |- ( ( ( ps ∧ ch ) → ¬ ph ) ↔ ( ph → ¬ ( ps ∧ ch ) ) ) ;;
	step 2 : wff = nan () |- ( ( ph → ¬ ( ps ∧ ch ) ) ↔ ( ( ph ∧ ps ) → ¬ ch ) ) ;;
	step 3 : wff = bitr2i (step 1, step 2) |- ( ( ( ph ∧ ps ) → ¬ ch ) ↔ ( ( ps ∧ ch ) → ¬ ph ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.78 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 19-Nov-2012.) */

theorem pm4.78 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∨ ( ph → ch ) ) ↔ ( ph → ( ps ∨ ch ) ) ) ;;
}

proof of pm4.78 {
	step 1 : wff = orordi () |- ( ( ¬ ph ∨ ( ps ∨ ch ) ) ↔ ( ( ¬ ph ∨ ps ) ∨ ( ¬ ph ∨ ch ) ) ) ;;
	step 2 : wff = imor () |- ( ( ph → ( ps ∨ ch ) ) ↔ ( ¬ ph ∨ ( ps ∨ ch ) ) ) ;;
	step 3 : wff = imor () |- ( ( ph → ps ) ↔ ( ¬ ph ∨ ps ) ) ;;
	step 4 : wff = imor () |- ( ( ph → ch ) ↔ ( ¬ ph ∨ ch ) ) ;;
	step 5 : wff = orbi12i (step 3, step 4) |- ( ( ( ph → ps ) ∨ ( ph → ch ) ) ↔ ( ( ¬ ph ∨ ps ) ∨ ( ¬ ph ∨ ch ) ) ) ;;
	step 6 : wff = 3bitr4ri (step 1, step 2, step 5) |- ( ( ( ph → ps ) ∨ ( ph → ch ) ) ↔ ( ph → ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Theorem *4.79 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 27-Jun-2013.) */

theorem pm4.79 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ps → ph ) ∨ ( ch → ph ) ) ↔ ( ( ps ∧ ch ) → ph ) ) ;;
}

proof of pm4.79 {
	step 1 : wff = id () |- ( ( ps → ph ) → ( ps → ph ) ) ;;
	step 2 : wff = id () |- ( ( ch → ph ) → ( ch → ph ) ) ;;
	step 3 : wff = jaoa (step 1, step 2) |- ( ( ( ps → ph ) ∨ ( ch → ph ) ) → ( ( ps ∧ ch ) → ph ) ) ;;
	step 4 : wff = simplim () |- ( ¬ ( ps → ph ) → ps ) ;;
	step 5 : wff = pm3.3 () |- ( ( ( ps ∧ ch ) → ph ) → ( ps → ( ch → ph ) ) ) ;;
	step 6 : wff = syl5 (step 4, step 5) |- ( ( ( ps ∧ ch ) → ph ) → ( ¬ ( ps → ph ) → ( ch → ph ) ) ) ;;
	step 7 : wff = orrd (step 6) |- ( ( ( ps ∧ ch ) → ph ) → ( ( ps → ph ) ∨ ( ch → ph ) ) ) ;;
	step 8 : wff = impbii (step 3, step 7) |- ( ( ( ps → ph ) ∨ ( ch → ph ) ) ↔ ( ( ps ∧ ch ) → ph ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Theorem *4.87 of [WhiteheadRussell] p. 122.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Eric Schmidt, 26-Oct-2006.) */

theorem pm4.87 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ∧ ( ( ph → ( ps → ch ) ) ↔ ( ps → ( ph → ch ) ) ) ) ∧ ( ( ps → ( ph → ch ) ) ↔ ( ( ps ∧ ph ) → ch ) ) ) ;;
}

proof of pm4.87 {
	step 1 : wff = impexp () |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ;;
	step 2 : wff = bi2.04 () |- ( ( ph → ( ps → ch ) ) ↔ ( ps → ( ph → ch ) ) ) ;;
	step 3 : wff = pm3.2i (step 1, step 2) |- ( ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ∧ ( ( ph → ( ps → ch ) ) ↔ ( ps → ( ph → ch ) ) ) ) ;;
	step 4 : wff = impexp () |- ( ( ( ps ∧ ph ) → ch ) ↔ ( ps → ( ph → ch ) ) ) ;;
	step 5 : wff = bicomi (step 4) |- ( ( ps → ( ph → ch ) ) ↔ ( ( ps ∧ ph ) → ch ) ) ;;
	step 6 : wff = pm3.2i (step 3, step 5) |- ( ( ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ∧ ( ( ph → ( ps → ch ) ) ↔ ( ps → ( ph → ch ) ) ) ) ∧ ( ( ps → ( ph → ch ) ) ↔ ( ( ps ∧ ph ) → ch ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Theorem *3.33 (Syll) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.33 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∧ ( ps → ch ) ) → ( ph → ch ) ) ;;
}

proof of pm3.33 {
	step 1 : wff = imim1 () |- ( ( ph → ps ) → ( ( ps → ch ) → ( ph → ch ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ph → ps ) ∧ ( ps → ch ) ) → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.34 (Syll) of [WhiteheadRussell] p. 112.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.34 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ps → ch ) ∧ ( ph → ps ) ) → ( ph → ch ) ) ;;
}

proof of pm3.34 {
	step 1 : wff = imim2 () |- ( ( ps → ch ) → ( ( ph → ps ) → ( ph → ch ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ps → ch ) ∧ ( ph → ps ) ) → ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjunctive detachment.  Theorem *3.35 of [WhiteheadRussell] p. 112.
     (Contributed by NM, 14-Dec-2002.) */

theorem pm3.35 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ph → ps ) ) → ps ) ;;
}

proof of pm3.35 {
	step 1 : wff = pm2.27 () |- ( ph → ( ( ph → ps ) → ps ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ( ph → ps ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *5.31 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.31 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ch ∧ ( ph → ps ) ) → ( ph → ( ps ∧ ch ) ) ) ;;
}

proof of pm5.31 {
	step 1 : wff = pm3.21 () |- ( ch → ( ps → ( ps ∧ ch ) ) ) ;;
	step 2 : wff = imim2d (step 1) |- ( ch → ( ( ph → ps ) → ( ph → ( ps ∧ ch ) ) ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ch ∧ ( ph → ps ) ) → ( ph → ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp4a (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
}

proof of imp4a {
	step 1 : wff = impexp () |- ( ( ( ch ∧ th ) → ta ) ↔ ( ch → ( th → ta ) ) ) ;;
	step 2 : wff = syl6ibr (hyp 1, step 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp4b (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ( ch ∧ th ) → ta ) ) ;;
}

proof of imp4b {
	step 1 : wff = imp4a (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ( ch ∧ th ) → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp4c (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ( ps ∧ ch ) ∧ th ) → ta ) ) ;;
}

proof of imp4c {
	step 1 : wff = imp3a (hyp 1) |- ( ph → ( ( ps ∧ ch ) → ( th → ta ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ph → ( ( ( ps ∧ ch ) ∧ th ) → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp4d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ( ch ∧ th ) ) → ta ) ) ;;
}

proof of imp4d {
	step 1 : wff = imp4a (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ph → ( ( ps ∧ ( ch ∧ th ) ) → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp41 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ta ) ;;
}

proof of imp41 {
	step 1 : wff = imp (hyp 1) |- ( ( ph ∧ ps ) → ( ch → ( th → ta ) ) ) ;;
	step 2 : wff = imp31 (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp42 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ta ) ;;
}

proof of imp42 {
	step 1 : wff = imp32 (hyp 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → ( th → ta ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp43 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ta ) ;;
}

proof of imp43 {
	step 1 : wff = imp4b (hyp 1) |- ( ( ph ∧ ps ) → ( ( ch ∧ th ) → ta ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp44 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ta ) ;;
}

proof of imp44 {
	step 1 : wff = imp4c (hyp 1) |- ( ph → ( ( ( ps ∧ ch ) ∧ th ) → ta ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem imp45 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → ta ) ;;
}

proof of imp45 {
	step 1 : wff = imp4d (hyp 1) |- ( ph → ( ( ps ∧ ( ch ∧ th ) ) → ta ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) */

theorem imp5a (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( ( th ∧ ta ) → et ) ) ) ) ;;
}

proof of imp5a {
	step 1 : wff = pm3.31 () |- ( ( th → ( ta → et ) ) → ( ( th ∧ ta ) → et ) ) ;;
	step 2 : wff = syl8 (hyp 1, step 1) |- ( ph → ( ps → ( ch → ( ( th ∧ ta ) → et ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) */

theorem imp5d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → ( ( th ∧ ta ) → et ) ) ;;
}

proof of imp5d {
	step 1 : wff = imp31 (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ( th → ( ta → et ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ( ( th ∧ ta ) → et ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) */

theorem imp5g (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ( ( ch ∧ th ) ∧ ta ) → et ) ) ;;
}

proof of imp5g {
	step 1 : wff = imp (hyp 1) |- ( ( ph ∧ ps ) → ( ch → ( th → ( ta → et ) ) ) ) ;;
	step 2 : wff = imp4c (step 1) |- ( ( ph ∧ ps ) → ( ( ( ch ∧ th ) ∧ ta ) → et ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) */

theorem imp55 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) ∧ ta ) → et ) ;;
}

proof of imp55 {
	step 1 : wff = imp4a (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ( ta → et ) ) ) ) ;;
	step 2 : wff = imp42 (step 1) |- ( ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) ∧ ta ) → et ) ;;
	qed prop 1 = step 2 ;;
}

/* An importation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) */

theorem imp511 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ( ps ∧ ( ch ∧ th ) ) ∧ ta ) ) → et ) ;;
}

proof of imp511 {
	step 1 : wff = imp4a (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ( ta → et ) ) ) ) ;;
	step 2 : wff = imp44 (step 1) |- ( ( ph ∧ ( ( ps ∧ ( ch ∧ th ) ) ∧ ta ) ) → et ) ;;
	qed prop 1 = step 2 ;;
}

/* Exportation followed by a deduction version of importation.
       (Contributed by NM, 6-Sep-2008.) */

theorem expimpd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
}

proof of expimpd {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp31 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
}

proof of exp31 {
	step 1 : wff = ex (hyp 1) |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	step 2 : wff = ex (step 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp32 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
}

proof of exp32 {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	step 2 : wff = exp3a (step 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp4a (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp4a {
	step 1 : wff = impexp () |- ( ( ( ch ∧ th ) → ta ) ↔ ( ch → ( th → ta ) ) ) ;;
	step 2 : wff = syl6ib (hyp 1, step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2012.) */

theorem exp4b (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ( ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp4b {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	step 2 : wff = exp4a (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp4c (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ( ps ∧ ch ) ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp4c {
	step 1 : wff = exp3a (hyp 1) |- ( ph → ( ( ps ∧ ch ) → ( th → ta ) ) ) ;;
	step 2 : wff = exp3a (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp4d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ( ch ∧ th ) ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp4d {
	step 1 : wff = exp3a (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	step 2 : wff = exp4a (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp41 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp41 {
	step 1 : wff = ex (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ( th → ta ) ) ;;
	step 2 : wff = exp31 (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp42 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp42 {
	step 1 : wff = exp31 (hyp 1) |- ( ph → ( ( ps ∧ ch ) → ( th → ta ) ) ) ;;
	step 2 : wff = exp3a (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp43 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp43 {
	step 1 : wff = ex (hyp 1) |- ( ( ph ∧ ps ) → ( ( ch ∧ th ) → ta ) ) ;;
	step 2 : wff = exp4b (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp44 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp44 {
	step 1 : wff = exp32 (hyp 1) |- ( ph → ( ( ps ∧ ch ) → ( th → ta ) ) ) ;;
	step 2 : wff = exp3a (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by NM, 26-Apr-1994.) */

theorem exp45 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
}

proof of exp45 {
	step 1 : wff = exp32 (hyp 1) |- ( ph → ( ps → ( ( ch ∧ th ) → ta ) ) ) ;;
	step 2 : wff = exp4a (step 1) |- ( ph → ( ps → ( ch → ( th → ta ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Export a wff from a right conjunct.  (Contributed by Jeff Hankins,
       30-Aug-2009.) */

theorem expr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
}

proof of expr {
	step 1 : wff = exp32 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by Jeff Hankins, 7-Jul-2009.) */

theorem exp5c (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ) → ( ( th ∧ ta ) → et ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
}

proof of exp5c {
	step 1 : wff = exp4a (hyp 1) |- ( ph → ( ( ps ∧ ch ) → ( th → ( ta → et ) ) ) ) ;;
	step 2 : wff = exp3a (step 1) |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An exportation inference.  (Contributed by Jeff Hankins,
       30-Aug-2009.) */

theorem exp53 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ∧ ta ) → et ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
}

proof of exp53 {
	step 1 : wff = ex (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ( ta → et ) ) ;;
	step 2 : wff = exp43 (step 1) |- ( ph → ( ps → ( ch → ( th → ( ta → et ) ) ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Export a wff from a left conjunct.  (Contributed by Jeff Hankins,
       28-Aug-2009.) */

theorem expl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
}

proof of expl {
	step 1 : wff = exp31 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp3a (step 1) |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Import a wff into a right conjunct.  (Contributed by Jeff Hankins,
       30-Aug-2009.) */

theorem impr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
}

proof of impr {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp32 (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Export a wff from a left conjunct.  (Contributed by Mario Carneiro,
       9-Jul-2014.) */

theorem impl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
}

proof of impl {
	step 1 : wff = exp3a (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp31 (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Importation with conjunction in consequent.  (Contributed by NM,
       9-Aug-1994.) */

theorem impac (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ch ∧ ps ) ) ;;
}

proof of impac {
	step 1 : wff = ancrd (hyp 1) |- ( ph → ( ps → ( ch ∧ ps ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ch ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference form of ~ exbir .  This proof is ~ exbiriVD automatically
       translated and minimized.  (Contributed by Alan Sare, 31-Dec-2011.)
       (Proof shortened by Wolf Lammen, 27-Jan-2013.) */

theorem exbiri (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch ↔ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ( th → ch ) ) ) ;;
}

proof of exbiri {
	step 1 : wff = biimpar (hyp 1) |- ( ( ( ph ∧ ps ) ∧ th ) → ch ) ;;
	step 2 : wff = exp31 (step 1) |- ( ph → ( ps → ( th → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  (Contributed by NM, 22-Oct-2007.) */

theorem simprbda (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ( ch ∧ th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of simprbda {
	step 1 : wff = biimpa (hyp 1) |- ( ( ph ∧ ps ) → ( ch ∧ th ) ) ;;
	step 2 : wff = simpld (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  (Contributed by NM, 22-Oct-2007.) */

theorem simplbda (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ( ch ∧ th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
}

proof of simplbda {
	step 1 : wff = biimpa (hyp 1) |- ( ( ph ∧ ps ) → ( ch ∧ th ) ) ;;
	step 2 : wff = simprd (step 1) |- ( ( ph ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction eliminating a conjunct.  Automatically derived from
       ~ simplbi2VD .  (Contributed by Alan Sare, 31-Dec-2011.) */

theorem simplbi2 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ch → ph ) ) ;;
}

proof of simplbi2 {
	step 1 : wff = biimpri (hyp 1) |- ( ( ps ∧ ch ) → ph ) ;;
	step 2 : wff = ex (step 1) |- ( ps → ( ch → ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A theorem similar to the standard definition of the biconditional.
     Definition of [Margaris] p. 49.  (Contributed by NM, 5-Aug-1993.) */

theorem dfbi2 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ps ) ↔ ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
}

proof of dfbi2 {
	step 1 : wff = dfbi1 () |- ( ( ph ↔ ps ) ↔ ¬ ( ( ph → ps ) → ¬ ( ps → ph ) ) ) ;;
	step 2 : wff = df-an () |- ( ( ( ph → ps ) ∧ ( ps → ph ) ) ↔ ¬ ( ( ph → ps ) → ¬ ( ps → ph ) ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( ( ph ↔ ps ) ↔ ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Definition ~ df-bi rewritten in an abbreviated form to help intuitive
     understanding of that definition.  Note that it is a conjunction of two
     implications; one which asserts properties that follow from the
     biconditional and one which asserts properties that imply the
     biconditional.  (Contributed by NM, 15-Aug-2008.) */

theorem dfbi (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ↔ ps ) → ( ( ph → ps ) ∧ ( ps → ph ) ) ) ∧ ( ( ( ph → ps ) ∧ ( ps → ph ) ) → ( ph ↔ ps ) ) ) ;;
}

proof of dfbi {
	step 1 : wff = dfbi2 () |- ( ( ph ↔ ps ) ↔ ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph ↔ ps ) → ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	step 3 : wff = dfbi2 () |- ( ( ph ↔ ps ) ↔ ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	step 4 : wff = biimpri (step 3) |- ( ( ( ph → ps ) ∧ ( ps → ph ) ) → ( ph ↔ ps ) ) ;;
	step 5 : wff = pm3.2i (step 2, step 4) |- ( ( ( ph ↔ ps ) → ( ( ph → ps ) ∧ ( ps → ph ) ) ) ∧ ( ( ( ph → ps ) ∧ ( ps → ph ) ) → ( ph ↔ ps ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Implication in terms of biconditional and conjunction.  Theorem *4.71 of
     [WhiteheadRussell] p. 120.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 2-Dec-2012.) */

theorem pm4.71 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ( ph ↔ ( ph ∧ ps ) ) ) ;;
}

proof of pm4.71 {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = biantru (step 1) |- ( ( ph → ( ph ∧ ps ) ) ↔ ( ( ph → ( ph ∧ ps ) ) ∧ ( ( ph ∧ ps ) → ph ) ) ) ;;
	step 3 : wff = anclb () |- ( ( ph → ps ) ↔ ( ph → ( ph ∧ ps ) ) ) ;;
	step 4 : wff = dfbi2 () |- ( ( ph ↔ ( ph ∧ ps ) ) ↔ ( ( ph → ( ph ∧ ps ) ) ∧ ( ( ph ∧ ps ) → ph ) ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ph → ps ) ↔ ( ph ↔ ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Implication in terms of biconditional and conjunction.  Theorem *4.71 of
     [WhiteheadRussell] p. 120 (with conjunct reversed).  (Contributed by NM,
     25-Jul-1999.) */

theorem pm4.71r (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ( ph ↔ ( ps ∧ ph ) ) ) ;;
}

proof of pm4.71r {
	step 1 : wff = pm4.71 () |- ( ( ph → ps ) ↔ ( ph ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = ancom () |- ( ( ph ∧ ps ) ↔ ( ps ∧ ph ) ) ;;
	step 3 : wff = bibi2i (step 2) |- ( ( ph ↔ ( ph ∧ ps ) ) ↔ ( ph ↔ ( ps ∧ ph ) ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ( ph → ps ) ↔ ( ph ↔ ( ps ∧ ph ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Inference converting an implication to a biconditional with
       conjunction.  Inference from Theorem *4.71 of [WhiteheadRussell]
       p. 120.  (Contributed by NM, 4-Jan-2004.) */

theorem pm4.71i (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph ↔ ( ph ∧ ps ) ) ;;
}

proof of pm4.71i {
	step 1 : wff = pm4.71 () |- ( ( ph → ps ) ↔ ( ph ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- ( ph ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference converting an implication to a biconditional with
       conjunction.  Inference from Theorem *4.71 of [WhiteheadRussell] p. 120
       (with conjunct reversed).  (Contributed by NM, 1-Dec-2003.) */

theorem pm4.71ri (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph ↔ ( ps ∧ ph ) ) ;;
}

proof of pm4.71ri {
	step 1 : wff = pm4.71r () |- ( ( ph → ps ) ↔ ( ph ↔ ( ps ∧ ph ) ) ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- ( ph ↔ ( ps ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction converting an implication to a biconditional with
       conjunction.  Deduction from Theorem *4.71 of [WhiteheadRussell]
       p. 120.  (Contributed by Mario Carneiro, 25-Dec-2016.) */

theorem pm4.71d (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ↔ ( ps ∧ ch ) ) ) ;;
}

proof of pm4.71d {
	step 1 : wff = pm4.71 () |- ( ( ps → ch ) ↔ ( ps ↔ ( ps ∧ ch ) ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ps ↔ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction converting an implication to a biconditional with
       conjunction.  Deduction from Theorem *4.71 of [WhiteheadRussell]
       p. 120.  (Contributed by NM, 10-Feb-2005.) */

theorem pm4.71rd (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ↔ ( ch ∧ ps ) ) ) ;;
}

proof of pm4.71rd {
	step 1 : wff = pm4.71r () |- ( ( ps → ch ) ↔ ( ps ↔ ( ch ∧ ps ) ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ps ↔ ( ch ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication over biconditional.  Theorem *5.32 of
     [WhiteheadRussell] p. 125.  (Contributed by NM, 1-Aug-1994.) */

theorem pm5.32 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps ↔ ch ) ) ↔ ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ) ;;
}

proof of pm5.32 {
	step 1 : wff = notbi () |- ( ( ps ↔ ch ) ↔ ( ¬ ps ↔ ¬ ch ) ) ;;
	step 2 : wff = imbi2i (step 1) |- ( ( ph → ( ps ↔ ch ) ) ↔ ( ph → ( ¬ ps ↔ ¬ ch ) ) ) ;;
	step 3 : wff = pm5.74 () |- ( ( ph → ( ¬ ps ↔ ¬ ch ) ) ↔ ( ( ph → ¬ ps ) ↔ ( ph → ¬ ch ) ) ) ;;
	step 4 : wff = notbi () |- ( ( ( ph → ¬ ps ) ↔ ( ph → ¬ ch ) ) ↔ ( ¬ ( ph → ¬ ps ) ↔ ¬ ( ph → ¬ ch ) ) ) ;;
	step 5 : wff = 3bitri (step 2, step 3, step 4) |- ( ( ph → ( ps ↔ ch ) ) ↔ ( ¬ ( ph → ¬ ps ) ↔ ¬ ( ph → ¬ ch ) ) ) ;;
	step 6 : wff = df-an () |- ( ( ph ∧ ps ) ↔ ¬ ( ph → ¬ ps ) ) ;;
	step 7 : wff = df-an () |- ( ( ph ∧ ch ) ↔ ¬ ( ph → ¬ ch ) ) ;;
	step 8 : wff = bibi12i (step 6, step 7) |- ( ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ↔ ( ¬ ( ph → ¬ ps ) ↔ ¬ ( ph → ¬ ch ) ) ) ;;
	step 9 : wff = bitr4i (step 5, step 8) |- ( ( ph → ( ps ↔ ch ) ) ↔ ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 9 ;;
}

/* Distribution of implication over biconditional (inference rule).
       (Contributed by NM, 1-Aug-1994.) */

theorem pm5.32i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ;;
}

proof of pm5.32i {
	step 1 : wff = pm5.32 () |- ( ( ph → ( ps ↔ ch ) ) ↔ ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication over biconditional (inference rule).
       (Contributed by NM, 12-Mar-1995.) */

theorem pm5.32ri (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) ↔ ( ch ∧ ph ) ) ;;
}

proof of pm5.32ri {
	step 1 : wff = pm5.32i (hyp 1) |- ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ;;
	step 2 : wff = ancom () |- ( ( ps ∧ ph ) ↔ ( ph ∧ ps ) ) ;;
	step 3 : wff = ancom () |- ( ( ch ∧ ph ) ↔ ( ph ∧ ch ) ) ;;
	step 4 : wff = 3bitr4i (step 1, step 2, step 3) |- ( ( ps ∧ ph ) ↔ ( ch ∧ ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Distribution of implication over biconditional (deduction rule).
       (Contributed by NM, 29-Oct-1996.) */

theorem pm5.32d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch ↔ th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ) ;;
}

proof of pm5.32d {
	step 1 : wff = pm5.32 () |- ( ( ps → ( ch ↔ th ) ) ↔ ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication over biconditional (deduction rule).
       (Contributed by NM, 25-Dec-2004.) */

theorem pm5.32rd (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch ↔ th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ch ∧ ps ) ↔ ( th ∧ ps ) ) ) ;;
}

proof of pm5.32rd {
	step 1 : wff = pm5.32d (hyp 1) |- ( ph → ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ) ;;
	step 2 : wff = ancom () |- ( ( ch ∧ ps ) ↔ ( ps ∧ ch ) ) ;;
	step 3 : wff = ancom () |- ( ( th ∧ ps ) ↔ ( ps ∧ th ) ) ;;
	step 4 : wff = 3bitr4g (step 1, step 2, step 3) |- ( ph → ( ( ch ∧ ps ) ↔ ( th ∧ ps ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Distribution of implication over biconditional (deduction rule).
       (Contributed by NM, 9-Dec-2006.) */

theorem pm5.32da (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch ↔ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ) ;;
}

proof of pm5.32da {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch ↔ th ) ) ) ;;
	step 2 : wff = pm5.32d (step 1) |- ( ph → ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Add a conjunction to an equivalence.  (Contributed by Jeff Madsen,
       20-Jun-2011.) */

theorem biadan2 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ps → ( ph ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph ↔ ( ps ∧ ch ) ) ;;
}

proof of biadan2 {
	step 1 : wff = pm4.71ri (hyp 1) |- ( ph ↔ ( ps ∧ ph ) ) ;;
	step 2 : wff = pm5.32i (hyp 2) |- ( ( ps ∧ ph ) ↔ ( ps ∧ ch ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ph ↔ ( ps ∧ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.24 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.24 (ph : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ph ∧ ph ) ) ;;
}

proof of pm4.24 {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = pm4.71i (step 1) |- ( ph ↔ ( ph ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Idempotent law for conjunction.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 14-Mar-2014.) */

theorem anidm (ph : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ph ) ↔ ph ) ;;
}

proof of anidm {
	step 1 : wff = pm4.24 () |- ( ph ↔ ( ph ∧ ph ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ph ∧ ph ) ↔ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference from idempotent law for conjunction.  (Contributed by NM,
       15-Jun-1994.) */

theorem anidms (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ph ) → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of anidms {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ph → ps ) ) ;;
	step 2 : wff = pm2.43i (step 1) |- ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjunction idempotence with antecedent.  (Contributed by Roy F. Longton,
     8-Aug-2005.) */

theorem anidmdbi (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps ∧ ps ) ) ↔ ( ph → ps ) ) ;;
}

proof of anidmdbi {
	step 1 : wff = anidm () |- ( ( ps ∧ ps ) ↔ ps ) ;;
	step 2 : wff = imbi2i (step 1) |- ( ( ph → ( ps ∧ ps ) ) ↔ ( ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Associative law for conjunction applied to antecedent (eliminates
       syllogism).  (Contributed by NM, 15-Nov-2002.) */

theorem anasss (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
}

proof of anasss {
	step 1 : wff = exp31 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp32 (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Associative law for conjunction applied to antecedent (eliminates
       syllogism).  (Contributed by NM, 15-Nov-2002.) */

theorem anassrs (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
}

proof of anassrs {
	step 1 : wff = exp32 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imp31 (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Associative law for conjunction.  Theorem *4.32 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 24-Nov-2012.) */

theorem anass (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
}

proof of anass {
	step 1 : wff = id () |- ( ( ph ∧ ( ps ∧ ch ) ) → ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 2 : wff = anassrs (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 3 : wff = id () |- ( ( ( ph ∧ ps ) ∧ ch ) → ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 4 : wff = anasss (step 3) |- ( ( ph ∧ ( ps ∧ ch ) ) → ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 5 : wff = impbii (step 2, step 4) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* A syllogism inference.  (Contributed by NM, 10-Mar-2005.) */

theorem sylanl1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ( ( ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ th ) → ta ) ;;
}

proof of sylanl1 {
	step 1 : wff = anim1i (hyp 1) |- ( ( ph ∧ ch ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ( ph ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 1-Jan-2005.) */

theorem sylanl2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ( ( ps ∧ ch ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ph ) ∧ th ) → ta ) ;;
}

proof of sylanl2 {
	step 1 : wff = anim2i (hyp 1) |- ( ( ps ∧ ph ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ( ps ∧ ph ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 9-Apr-2005.) */

theorem sylanr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ( ph ∧ th ) ) → ta ) ;;
}

proof of sylanr1 {
	step 1 : wff = anim1i (hyp 1) |- ( ( ph ∧ th ) → ( ch ∧ th ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ps ∧ ( ph ∧ th ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 9-Apr-2005.) */

theorem sylanr2 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → th ) ;;
	hyp 2 : wff = |- ( ( ps ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ( ch ∧ ph ) ) → ta ) ;;
}

proof of sylanr2 {
	step 1 : wff = anim2i (hyp 1) |- ( ( ch ∧ ph ) → ( ch ∧ th ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ps ∧ ( ch ∧ ph ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 2-May-1996.) */

theorem sylani (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ps → ( ( ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ( ph ∧ th ) → ta ) ) ;;
}

proof of sylani {
	step 1 : wff = a1i (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = syland (step 1, hyp 2) |- ( ps → ( ( ph ∧ th ) → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 1-Aug-1994.) */

theorem sylan2i (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → th ) ;;
	hyp 2 : wff = |- ( ps → ( ( ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ( ch ∧ ph ) → ta ) ) ;;
}

proof of sylan2i {
	step 1 : wff = a1i (hyp 1) |- ( ps → ( ph → th ) ) ;;
	step 2 : wff = sylan2d (step 1, hyp 2) |- ( ps → ( ( ch ∧ ph ) → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference.  (Contributed by NM, 3-Aug-1999.) */

theorem syl2ani (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( et → th ) ;;
	hyp 3 : wff = |- ( ps → ( ( ch ∧ th ) → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ( ( ph ∧ et ) → ta ) ) ;;
}

proof of syl2ani {
	step 1 : wff = sylan2i (hyp 2, hyp 3) |- ( ps → ( ( ch ∧ et ) → ta ) ) ;;
	step 2 : wff = sylani (hyp 1, step 1) |- ( ps → ( ( ph ∧ et ) → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
       7-May-2011.) */

theorem sylan9 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ps → ta ) ) ;;
}

proof of sylan9 {
	step 1 : wff = syl9 (hyp 1, hyp 2) |- ( ph → ( th → ( ps → ta ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ th ) → ( ps → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 5-Aug-1993.) */

theorem sylan9r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( th ∧ ph ) → ( ps → ta ) ) ;;
}

proof of sylan9r {
	step 1 : wff = syl9r (hyp 1, hyp 2) |- ( th → ( ph → ( ps → ta ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( th ∧ ph ) → ( ps → ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A modus tollens deduction.  (Contributed by Jeff Hankins,
       19-Aug-2009.) */

theorem mtand (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ¬ ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ps ) ;;
}

proof of mtand {
	step 1 : wff = ex (hyp 2) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = mtod (hyp 1, step 1) |- ( ph → ¬ ps ) ;;
	qed prop 1 = step 2 ;;
}

/* A modus tollens deduction involving disjunction.  (Contributed by Jeff
       Hankins, 15-Jul-2009.) */

theorem mtord (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ¬ ch ) ;;
	hyp 2 : wff = |- ( ph → ¬ th ) ;;
	hyp 3 : wff = |- ( ph → ( ps → ( ch ∨ th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ps ) ;;
}

proof of mtord {
	step 1 : wff = df-or () |- ( ( ch ∨ th ) ↔ ( ¬ ch → th ) ) ;;
	step 2 : wff = syl6ib (hyp 3, step 1) |- ( ph → ( ps → ( ¬ ch → th ) ) ) ;;
	step 3 : wff = mpid (hyp 1, step 2) |- ( ph → ( ps → th ) ) ;;
	step 4 : wff = mtod (hyp 2, step 3) |- ( ph → ¬ ps ) ;;
	qed prop 1 = step 4 ;;
}

/* Syllogism inference combined with contraction.  (Contributed by NM,
       16-Mar-2012.) */

theorem syl2anc (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of syl2anc {
	step 1 : wff = ex (hyp 3) |- ( ps → ( ch → th ) ) ;;
	step 2 : wff = sylc (hyp 1, hyp 2, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Syllogism inference combined with modus ponens.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) */

theorem sylancl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ch ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of sylancl {
	step 1 : wff = a1i (hyp 2) |- ( ph → ch ) ;;
	step 2 : wff = syl2anc (hyp 1, step 1, hyp 3) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Syllogism inference combined with modus ponens.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) */

theorem sylancr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of sylancr {
	step 1 : wff = a1i (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = syl2anc (step 1, hyp 2, hyp 3) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Syllogism inference.  (Contributed by Jeff Madsen, 2-Sep-2009.) */

theorem sylanbrc (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( th ↔ ( ps ∧ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of sylanbrc {
	step 1 : wff = jca (hyp 1, hyp 2) |- ( ph → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylibr (step 1, hyp 3) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference combined with contraction.  (Contributed by NM,
       3-Sep-2004.) */

theorem sylancb (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ph ↔ ch ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of sylancb {
	step 1 : wff = syl2anb (hyp 1, hyp 2, hyp 3) |- ( ( ph ∧ ph ) → th ) ;;
	step 2 : wff = anidms (step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A syllogism inference combined with contraction.  (Contributed by NM,
       3-Sep-2004.) */

theorem sylancbr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ps ↔ ph ) ;;
	hyp 2 : wff = |- ( ch ↔ ph ) ;;
	hyp 3 : wff = |- ( ( ps ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of sylancbr {
	step 1 : wff = syl2anbr (hyp 1, hyp 2, hyp 3) |- ( ( ph ∧ ph ) → th ) ;;
	step 2 : wff = anidms (step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Syllogism inference with commutation of antecedents.  (Contributed by
       NM, 2-Jul-2008.) */

theorem sylancom (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ch ∧ ps ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
}

proof of sylancom {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = syl2anc (hyp 1, step 1, hyp 2) |- ( ( ph ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 23-May-1999.)
       (Proof shortened by Wolf Lammen, 22-Nov-2012.) */

theorem mpdan (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of mpdan {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = syl2anc (step 1, hyp 1, hyp 2) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens with commutation of antecedents.
       (Contributed by NM, 28-Oct-2003.)  (Proof shortened by Wolf Lammen,
       7-Apr-2013.) */

theorem mpancom (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ps → ph ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ch ) ;;
}

proof of mpancom {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = syl2anc (hyp 1, step 1, hyp 2) |- ( ps → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 30-Aug-1993.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) */

theorem mpan (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ch ) ;;
}

proof of mpan {
	step 1 : wff = a1i (hyp 1) |- ( ps → ph ) ;;
	step 2 : wff = mpancom (step 1, hyp 2) |- ( ps → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 16-Sep-1993.)
       (Proof shortened by Wolf Lammen, 19-Nov-2012.) */

theorem mpan2 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of mpan2 {
	step 1 : wff = a1i (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = mpdan (step 1, hyp 2) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM,
       13-Apr-1995.) */

theorem mp2an (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ch ;;
}

proof of mp2an {
	step 1 : wff = mpan (hyp 1, hyp 3) |- ( ps → ch ) ;;
	step 2 : wff = ax-mp (hyp 2, step 1) |- ch ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by Jeff Madsen,
       15-Jun-2010.) */

theorem mp4an (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ch ;;
	hyp 4 : wff = |- th ;;
	hyp 5 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ta ;;
}

proof of mp4an {
	step 1 : wff = pm3.2i (hyp 1, hyp 2) |- ( ph ∧ ps ) ;;
	step 2 : wff = pm3.2i (hyp 3, hyp 4) |- ( ch ∧ th ) ;;
	step 3 : wff = mp2an (step 1, step 2, hyp 5) |- ta ;;
	qed prop 1 = step 3 ;;
}

/* A deduction based on modus ponens.  (Contributed by NM, 12-Dec-2004.) */

theorem mpan2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ch ) ;;
	hyp 2 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of mpan2d {
	step 1 : wff = exp3a (hyp 2) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = mpid (hyp 1, step 1) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* A deduction based on modus ponens.  (Contributed by NM, 12-Dec-2004.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) */

theorem mpand (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → th ) ) ;;
}

proof of mpand {
	step 1 : wff = ancomsd (hyp 2) |- ( ph → ( ( ch ∧ ps ) → th ) ) ;;
	step 2 : wff = mpan2d (hyp 1, step 1) |- ( ph → ( ch → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 10-Apr-1994.)
       (Proof shortened by Wolf Lammen, 19-Nov-2012.) */

theorem mpani (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ch → th ) ) ;;
}

proof of mpani {
	step 1 : wff = a1i (hyp 1) |- ( ph → ps ) ;;
	step 2 : wff = mpand (step 1, hyp 2) |- ( ph → ( ch → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 10-Apr-1994.)
       (Proof shortened by Wolf Lammen, 19-Nov-2012.) */

theorem mpan2i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ch ;;
	hyp 2 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → th ) ) ;;
}

proof of mpan2i {
	step 1 : wff = a1i (hyp 1) |- ( ph → ch ) ;;
	step 2 : wff = mpan2d (step 1, hyp 2) |- ( ph → ( ps → th ) ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM,
       12-Dec-2004.) */

theorem mp2ani (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ch ;;
	hyp 3 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of mp2ani {
	step 1 : wff = mpani (hyp 1, hyp 3) |- ( ph → ( ch → th ) ) ;;
	step 2 : wff = mpi (hyp 2, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* A deduction based on modus ponens.  (Contributed by NM, 12-Dec-2004.) */

theorem mp2and (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	hyp 2 : wff = |- ( ph → ch ) ;;
	hyp 3 : wff = |- ( ph → ( ( ps ∧ ch ) → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of mp2and {
	step 1 : wff = mpand (hyp 1, hyp 3) |- ( ph → ( ch → th ) ) ;;
	step 2 : wff = mpd (hyp 2, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 16-Aug-1994.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) */

theorem mpanl1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ch ) → th ) ;;
}

proof of mpanl1 {
	step 1 : wff = jctl (hyp 1) |- ( ps → ( ph ∧ ps ) ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ps ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 16-Aug-1994.)
       (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem mpanl2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of mpanl2 {
	step 1 : wff = jctr (hyp 1) |- ( ph → ( ph ∧ ps ) ) ;;
	step 2 : wff = sylan (step 1, hyp 2) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM,
       13-Jul-2005.) */

theorem mpanl12 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ps ;;
	hyp 3 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → th ) ;;
}

proof of mpanl12 {
	step 1 : wff = mpanl1 (hyp 1, hyp 3) |- ( ( ps ∧ ch ) → th ) ;;
	step 2 : wff = mpan (hyp 2, step 1) |- ( ch → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 3-May-1994.)
       (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem mpanr1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) → th ) ;;
}

proof of mpanr1 {
	step 1 : wff = anassrs (hyp 2) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = mpanl2 (hyp 1, step 1) |- ( ( ph ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 3-May-1994.)
       (Proof shortened by Andrew Salmon, 7-May-2011.)  (Proof shortened by
       Wolf Lammen, 7-Apr-2013.) */

theorem mpanr2 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ch ;;
	hyp 2 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
}

proof of mpanr2 {
	step 1 : wff = jctr (hyp 1) |- ( ps → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 2) |- ( ( ph ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM,
       24-Jul-2009.) */

theorem mpanr12 (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ch ;;
	hyp 3 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of mpanr12 {
	step 1 : wff = mpanr1 (hyp 1, hyp 3) |- ( ( ph ∧ ch ) → th ) ;;
	step 2 : wff = mpan2 (hyp 2, step 1) |- ( ph → th ) ;;
	qed prop 1 = step 2 ;;
}

/* An inference based on modus ponens.  (Contributed by NM, 30-Dec-2004.)
       (Proof shortened by Wolf Lammen, 7-Apr-2013.) */

theorem mpanlr1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ps ;;
	hyp 2 : wff = |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ th ) → ta ) ;;
}

proof of mpanlr1 {
	step 1 : wff = jctl (hyp 1) |- ( ch → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylanl2 (step 1, hyp 2) |- ( ( ( ph ∧ ch ) ∧ th ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication over biconditional (deduction rule).
       (Contributed by NM, 4-May-2007.) */

theorem pm5.74da (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch ↔ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps → ch ) ↔ ( ps → th ) ) ) ;;
}

proof of pm5.74da {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch ↔ th ) ) ) ;;
	step 2 : wff = pm5.74d (step 1) |- ( ph → ( ( ps → ch ) ↔ ( ps → th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.45 of [WhiteheadRussell] p. 119.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.45 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ph ∧ ( ph ∨ ps ) ) ) ;;
}

proof of pm4.45 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = pm4.71i (step 1) |- ( ph ↔ ( ph ∧ ( ph ∨ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication with conjunction.  (Contributed by NM,
     31-May-1999.)  (Proof shortened by Wolf Lammen, 6-Dec-2012.) */

theorem imdistan (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps → ch ) ) ↔ ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ) ;;
}

proof of imdistan {
	step 1 : wff = pm5.42 () |- ( ( ph → ( ps → ch ) ) ↔ ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
	step 2 : wff = impexp () |- ( ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ↔ ( ph → ( ps → ( ph ∧ ch ) ) ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( ( ph → ( ps → ch ) ) ↔ ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Distribution of implication with conjunction.  (Contributed by NM,
       1-Aug-1994.) */

theorem imdistani (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ;;
}

proof of imdistani {
	step 1 : wff = anc2li (hyp 1) |- ( ph → ( ps → ( ph ∧ ch ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication with conjunction.  (Contributed by NM,
       8-Jan-2002.) */

theorem imdistanri (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ph ) → ( ch ∧ ph ) ) ;;
}

proof of imdistanri {
	step 1 : wff = com12 (hyp 1) |- ( ps → ( ph → ch ) ) ;;
	step 2 : wff = impac (step 1) |- ( ( ps ∧ ph ) → ( ch ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication with conjunction (deduction rule).
       (Contributed by NM, 27-Aug-2004.) */

theorem imdistand (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ( ch → th ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) → ( ps ∧ th ) ) ) ;;
}

proof of imdistand {
	step 1 : wff = imdistan () |- ( ( ps → ( ch → th ) ) ↔ ( ( ps ∧ ch ) → ( ps ∧ th ) ) ) ;;
	step 2 : wff = sylib (hyp 1, step 1) |- ( ph → ( ( ps ∧ ch ) → ( ps ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of implication with conjunction (deduction version with
       conjoined antecedent).  (Contributed by Jeff Madsen, 19-Jun-2011.) */

theorem imdistanda (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ( ch → th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ ch ) → ( ps ∧ th ) ) ) ;;
}

proof of imdistanda {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = imdistand (step 1) |- ( ph → ( ( ps ∧ ch ) → ( ps ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce a left conjunct to both sides of a logical equivalence.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen,
       16-Nov-2013.) */

theorem anbi2i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ph ) ↔ ( ch ∧ ps ) ) ;;
}

proof of anbi2i {
	step 1 : wff = a1i (hyp 1) |- ( ch → ( ph ↔ ps ) ) ;;
	step 2 : wff = pm5.32i (step 1) |- ( ( ch ∧ ph ) ↔ ( ch ∧ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce a right conjunct to both sides of a logical equivalence.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf Lammen,
       16-Nov-2013.) */

theorem anbi1i (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) ↔ ( ps ∧ ch ) ) ;;
}

proof of anbi1i {
	step 1 : wff = a1i (hyp 1) |- ( ch → ( ph ↔ ps ) ) ;;
	step 2 : wff = pm5.32ri (step 1) |- ( ( ph ∧ ch ) ↔ ( ps ∧ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Variant of ~ anbi2i with commutation.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.) */

theorem anbi2ci (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) ↔ ( ch ∧ ps ) ) ;;
}

proof of anbi2ci {
	step 1 : wff = anbi1i (hyp 1) |- ( ( ph ∧ ch ) ↔ ( ps ∧ ch ) ) ;;
	step 2 : wff = ancom () |- ( ( ps ∧ ch ) ↔ ( ch ∧ ps ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ch ) ↔ ( ch ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Conjoin both sides of two equivalences.  (Contributed by NM,
       5-Aug-1993.) */

theorem anbi12i (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch ↔ th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) ↔ ( ps ∧ th ) ) ;;
}

proof of anbi12i {
	step 1 : wff = anbi1i (hyp 1) |- ( ( ph ∧ ch ) ↔ ( ps ∧ ch ) ) ;;
	step 2 : wff = anbi2i (hyp 2) |- ( ( ps ∧ ch ) ↔ ( ps ∧ th ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ch ) ↔ ( ps ∧ th ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Variant of ~ anbi12i with commutation.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) */

theorem anbi12ci (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch ↔ th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ch ) ↔ ( th ∧ ps ) ) ;;
}

proof of anbi12ci {
	step 1 : wff = anbi12i (hyp 1, hyp 2) |- ( ( ph ∧ ch ) ↔ ( ps ∧ th ) ) ;;
	step 2 : wff = ancom () |- ( ( ps ∧ th ) ↔ ( th ∧ ps ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ph ∧ ch ) ↔ ( th ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 4-Mar-1995.) */

theorem sylan9bb (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ps ↔ ta ) ) ;;
}

proof of sylan9bb {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ( ps ↔ ch ) ) ;;
	step 2 : wff = adantl (hyp 2) |- ( ( ph ∧ th ) → ( ch ↔ ta ) ) ;;
	step 3 : wff = bitrd (step 1, step 2) |- ( ( ph ∧ th ) → ( ps ↔ ta ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Nested syllogism inference conjoining dissimilar antecedents.
       (Contributed by NM, 4-Mar-1995.) */

theorem sylan9bbr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ch ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( th ∧ ph ) → ( ps ↔ ta ) ) ;;
}

proof of sylan9bbr {
	step 1 : wff = sylan9bb (hyp 1, hyp 2) |- ( ( ph ∧ th ) → ( ps ↔ ta ) ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( th ∧ ph ) → ( ps ↔ ta ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a left disjunct to both sides of a logical
       equivalence.  (Contributed by NM, 5-Aug-1993.) */

theorem orbi2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∨ ps ) ↔ ( th ∨ ch ) ) ) ;;
}

proof of orbi2d {
	step 1 : wff = imbi2d (hyp 1) |- ( ph → ( ( ¬ th → ps ) ↔ ( ¬ th → ch ) ) ) ;;
	step 2 : wff = df-or () |- ( ( th ∨ ps ) ↔ ( ¬ th → ps ) ) ;;
	step 3 : wff = df-or () |- ( ( th ∨ ch ) ↔ ( ¬ th → ch ) ) ;;
	step 4 : wff = 3bitr4g (step 1, step 2, step 3) |- ( ph → ( ( th ∨ ps ) ↔ ( th ∨ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduction adding a right disjunct to both sides of a logical
       equivalence.  (Contributed by NM, 5-Aug-1993.) */

theorem orbi1d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ) ↔ ( ch ∨ th ) ) ) ;;
}

proof of orbi1d {
	step 1 : wff = orbi2d (hyp 1) |- ( ph → ( ( th ∨ ps ) ↔ ( th ∨ ch ) ) ) ;;
	step 2 : wff = orcom () |- ( ( ps ∨ th ) ↔ ( th ∨ ps ) ) ;;
	step 3 : wff = orcom () |- ( ( ch ∨ th ) ↔ ( th ∨ ch ) ) ;;
	step 4 : wff = 3bitr4g (step 1, step 2, step 3) |- ( ph → ( ( ps ∨ th ) ↔ ( ch ∨ th ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduction adding a left conjunct to both sides of a logical
       equivalence.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2013.) */

theorem anbi2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∧ ps ) ↔ ( th ∧ ch ) ) ) ;;
}

proof of anbi2d {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( th → ( ps ↔ ch ) ) ) ;;
	step 2 : wff = pm5.32d (step 1) |- ( ph → ( ( th ∧ ps ) ↔ ( th ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a right conjunct to both sides of a logical
       equivalence.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2013.) */

theorem anbi1d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) ↔ ( ch ∧ th ) ) ) ;;
}

proof of anbi1d {
	step 1 : wff = a1d (hyp 1) |- ( ph → ( th → ( ps ↔ ch ) ) ) ;;
	step 2 : wff = pm5.32rd (step 1) |- ( ph → ( ( ps ∧ th ) ↔ ( ch ∧ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.37 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) */

theorem orbi1 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ps ) → ( ( ph ∨ ch ) ↔ ( ps ∨ ch ) ) ) ;;
}

proof of orbi1 {
	step 1 : wff = id () |- ( ( ph ↔ ps ) → ( ph ↔ ps ) ) ;;
	step 2 : wff = orbi1d (step 1) |- ( ( ph ↔ ps ) → ( ( ph ∨ ch ) ↔ ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce a right conjunct to both sides of a logical equivalence.
     Theorem *4.36 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) */

theorem anbi1 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ps ) → ( ( ph ∧ ch ) ↔ ( ps ∧ ch ) ) ) ;;
}

proof of anbi1 {
	step 1 : wff = id () |- ( ( ph ↔ ps ) → ( ph ↔ ps ) ) ;;
	step 2 : wff = anbi1d (step 1) |- ( ( ph ↔ ps ) → ( ( ph ∧ ch ) ↔ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Introduce a left conjunct to both sides of a logical equivalence.
     (Contributed by NM, 16-Nov-2013.) */

theorem anbi2 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ps ) → ( ( ch ∧ ph ) ↔ ( ch ∧ ps ) ) ) ;;
}

proof of anbi2 {
	step 1 : wff = id () |- ( ( ph ↔ ps ) → ( ph ↔ ps ) ) ;;
	step 2 : wff = anbi2d (step 1) |- ( ( ph ↔ ps ) → ( ( ch ∧ ph ) ↔ ( ch ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.22 of [WhiteheadRussell] p. 117.  (Contributed by NM,
     3-Jan-2005.) */

theorem bitr (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ↔ ps ) ∧ ( ps ↔ ch ) ) → ( ph ↔ ch ) ) ;;
}

proof of bitr {
	step 1 : wff = bibi1 () |- ( ( ph ↔ ps ) → ( ( ph ↔ ch ) ↔ ( ps ↔ ch ) ) ) ;;
	step 2 : wff = biimpar (step 1) |- ( ( ( ph ↔ ps ) ∧ ( ps ↔ ch ) ) → ( ph ↔ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction joining two equivalences to form equivalence of disjunctions.
       (Contributed by NM, 5-Aug-1993.) */

theorem orbi12d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ) ↔ ( ch ∨ ta ) ) ) ;;
}

proof of orbi12d {
	step 1 : wff = orbi1d (hyp 1) |- ( ph → ( ( ps ∨ th ) ↔ ( ch ∨ th ) ) ) ;;
	step 2 : wff = orbi2d (hyp 2) |- ( ph → ( ( ch ∨ th ) ↔ ( ch ∨ ta ) ) ) ;;
	step 3 : wff = bitrd (step 1, step 2) |- ( ph → ( ( ps ∨ th ) ↔ ( ch ∨ ta ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction joining two equivalences to form equivalence of conjunctions.
       (Contributed by NM, 5-Aug-1993.) */

theorem anbi12d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th ↔ ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∧ th ) ↔ ( ch ∧ ta ) ) ) ;;
}

proof of anbi12d {
	step 1 : wff = anbi1d (hyp 1) |- ( ph → ( ( ps ∧ th ) ↔ ( ch ∧ th ) ) ) ;;
	step 2 : wff = anbi2d (hyp 2) |- ( ph → ( ( ch ∧ th ) ↔ ( ch ∧ ta ) ) ) ;;
	step 3 : wff = bitrd (step 1, step 2) |- ( ph → ( ( ps ∧ th ) ↔ ( ch ∧ ta ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *5.3 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem pm5.3 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ) ;;
}

proof of pm5.3 {
	step 1 : wff = impexp () |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ph → ( ps → ch ) ) ) ;;
	step 2 : wff = imdistan () |- ( ( ph → ( ps → ch ) ) ↔ ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ) ;;
	step 3 : wff = bitri (step 1, step 2) |- ( ( ( ph ∧ ps ) → ch ) ↔ ( ( ph ∧ ps ) → ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *5.61 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 30-Jun-2013.) */

theorem pm5.61 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∧ ¬ ps ) ↔ ( ph ∧ ¬ ps ) ) ;;
}

proof of pm5.61 {
	step 1 : wff = biorf () |- ( ¬ ps → ( ph ↔ ( ps ∨ ph ) ) ) ;;
	step 2 : wff = orcom () |- ( ( ps ∨ ph ) ↔ ( ph ∨ ps ) ) ;;
	step 3 : wff = syl6rbb (step 1, step 2) |- ( ¬ ps → ( ( ph ∨ ps ) ↔ ph ) ) ;;
	step 4 : wff = pm5.32ri (step 3) |- ( ( ( ph ∨ ps ) ∧ ¬ ps ) ↔ ( ph ∧ ¬ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem adantll (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( th ∧ ph ) ∧ ps ) → ch ) ;;
}

proof of adantll {
	step 1 : wff = simpr () |- ( ( th ∧ ph ) → ph ) ;;
	step 2 : wff = sylan (step 1, hyp 1) |- ( ( ( th ∧ ph ) ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem adantlr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ th ) ∧ ps ) → ch ) ;;
}

proof of adantlr {
	step 1 : wff = simpl () |- ( ( ph ∧ th ) → ph ) ;;
	step 2 : wff = sylan (step 1, hyp 1) |- ( ( ( ph ∧ th ) ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem adantrl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( th ∧ ps ) ) → ch ) ;;
}

proof of adantrl {
	step 1 : wff = simpr () |- ( ( th ∧ ps ) → ps ) ;;
	step 2 : wff = sylan2 (step 1, hyp 1) |- ( ( ph ∧ ( th ∧ ps ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       4-May-1994.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem adantrr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ th ) ) → ch ) ;;
}

proof of adantrr {
	step 1 : wff = simpl () |- ( ( ps ∧ th ) → ps ) ;;
	step 2 : wff = sylan2 (step 1, hyp 1) |- ( ( ph ∧ ( ps ∧ th ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 2-Dec-2012.) */

theorem adantlll (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ta ∧ ph ) ∧ ps ) ∧ ch ) → th ) ;;
}

proof of adantlll {
	step 1 : wff = simpr () |- ( ( ta ∧ ph ) → ph ) ;;
	step 2 : wff = sylanl1 (step 1, hyp 1) |- ( ( ( ( ta ∧ ph ) ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantllr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ph ∧ ta ) ∧ ps ) ∧ ch ) → th ) ;;
}

proof of adantllr {
	step 1 : wff = simpl () |- ( ( ph ∧ ta ) → ph ) ;;
	step 2 : wff = sylanl1 (step 1, hyp 1) |- ( ( ( ( ph ∧ ta ) ∧ ps ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantlrl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ( ta ∧ ps ) ) ∧ ch ) → th ) ;;
}

proof of adantlrl {
	step 1 : wff = simpr () |- ( ( ta ∧ ps ) → ps ) ;;
	step 2 : wff = sylanl2 (step 1, hyp 1) |- ( ( ( ph ∧ ( ta ∧ ps ) ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantlrr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ta ) ) ∧ ch ) → th ) ;;
}

proof of adantlrr {
	step 1 : wff = simpl () |- ( ( ps ∧ ta ) → ps ) ;;
	step 2 : wff = sylanl2 (step 1, hyp 1) |- ( ( ( ph ∧ ( ps ∧ ta ) ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantrll (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ( ta ∧ ps ) ∧ ch ) ) → th ) ;;
}

proof of adantrll {
	step 1 : wff = simpr () |- ( ( ta ∧ ps ) → ps ) ;;
	step 2 : wff = sylanr1 (step 1, hyp 1) |- ( ( ph ∧ ( ( ta ∧ ps ) ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantrlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ( ps ∧ ta ) ∧ ch ) ) → th ) ;;
}

proof of adantrlr {
	step 1 : wff = simpl () |- ( ( ps ∧ ta ) → ps ) ;;
	step 2 : wff = sylanr1 (step 1, hyp 1) |- ( ( ph ∧ ( ( ps ∧ ta ) ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantrrl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ( ta ∧ ch ) ) ) → th ) ;;
}

proof of adantrrl {
	step 1 : wff = simpr () |- ( ( ta ∧ ch ) → ch ) ;;
	step 2 : wff = sylanr2 (step 1, hyp 1) |- ( ( ph ∧ ( ps ∧ ( ta ∧ ch ) ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding a conjunct to antecedent.  (Contributed by NM,
       26-Dec-2004.)  (Proof shortened by Wolf Lammen, 4-Dec-2012.) */

theorem adantrrr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ( ch ∧ ta ) ) ) → th ) ;;
}

proof of adantrrr {
	step 1 : wff = simpl () |- ( ( ch ∧ ta ) → ch ) ;;
	step 2 : wff = sylanr2 (step 1, hyp 1) |- ( ( ph ∧ ( ps ∧ ( ch ∧ ta ) ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.)  (Proof shortened by Wolf Lammen, 20-Nov-2012.) */

theorem ad2antrr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ th ) → ps ) ;;
}

proof of ad2antrr {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ps ) ;;
	step 2 : wff = adantlr (step 1) |- ( ( ( ph ∧ ch ) ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.)  (Proof shortened by Wolf Lammen, 20-Nov-2012.) */

theorem ad2antlr (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ch ∧ ph ) ∧ th ) → ps ) ;;
}

proof of ad2antlr {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ps ) ;;
	step 2 : wff = adantll (step 1) |- ( ( ( ch ∧ ph ) ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.) */

theorem ad2antrl (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ( ph ∧ th ) ) → ps ) ;;
}

proof of ad2antrl {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ch ∧ ( ph ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding conjuncts to antecedent.  (Contributed by NM,
       19-Oct-1999.) */

theorem ad2antll (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ( th ∧ ph ) ) → ps ) ;;
}

proof of ad2antll {
	step 1 : wff = adantl (hyp 1) |- ( ( th ∧ ph ) → ps ) ;;
	step 2 : wff = adantl (step 1) |- ( ( ch ∧ ( th ∧ ph ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding three conjuncts to antecedent.  (Contributed by NM,
       28-Jul-2012.) */

theorem ad3antrrr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
}

proof of ad3antrrr {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ ch ) → ps ) ;;
	step 2 : wff = ad2antrr (step 1) |- ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding three conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad3antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) → ps ) ;;
}

proof of ad3antlr {
	step 1 : wff = ad2antlr (hyp 1) |- ( ( ( ch ∧ ph ) ∧ th ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 4 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad4antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
}

proof of ad4antr {
	step 1 : wff = ad3antrrr (hyp 1) |- ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 4 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad4antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
}

proof of ad4antlr {
	step 1 : wff = ad3antlr (hyp 1) |- ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 5 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad5antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
}

proof of ad5antr {
	step 1 : wff = ad4antr (hyp 1) |- ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 5 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad5antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
}

proof of ad5antlr {
	step 1 : wff = ad4antlr (hyp 1) |- ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 6 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad6antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
}

proof of ad6antr {
	step 1 : wff = ad5antr (hyp 1) |- ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 6 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad6antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
}

proof of ad6antlr {
	step 1 : wff = ad5antlr (hyp 1) |- ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 7 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad7antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
}

proof of ad7antr {
	step 1 : wff = ad6antr (hyp 1) |- ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 7 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad7antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
}

proof of ad7antlr {
	step 1 : wff = ad6antlr (hyp 1) |- ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 8 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad8antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
}

proof of ad8antr {
	step 1 : wff = ad7antr (hyp 1) |- ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 8 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad8antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
}

proof of ad8antlr {
	step 1 : wff = ad7antlr (hyp 1) |- ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 9 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad9antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
}

proof of ad9antr {
	step 1 : wff = ad8antr (hyp 1) |- ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 9 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad9antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
}

proof of ad9antlr {
	step 1 : wff = ad8antlr (hyp 1) |- ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 10 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 4-Jan-2017.) */

theorem ad10antr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff, ka : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ps ) ;;
}

proof of ad10antr {
	step 1 : wff = ad9antr (hyp 1) |- ( ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding 10 conjuncts to antecedent.  (Contributed by Mario
       Carneiro, 5-Jan-2017.) */

theorem ad10antlr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff, ka : wff)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ps ) ;;
}

proof of ad10antlr {
	step 1 : wff = ad9antlr (hyp 1) |- ( ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ( ch ∧ ph ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem ad2ant2l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( th ∧ ph ) ∧ ( ta ∧ ps ) ) → ch ) ;;
}

proof of ad2ant2l {
	step 1 : wff = adantrl (hyp 1) |- ( ( ph ∧ ( ta ∧ ps ) ) → ch ) ;;
	step 2 : wff = adantll (step 1) |- ( ( ( th ∧ ph ) ∧ ( ta ∧ ps ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       8-Jan-2006.) */

theorem ad2ant2r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ) → ch ) ;;
}

proof of ad2ant2r {
	step 1 : wff = adantrr (hyp 1) |- ( ( ph ∧ ( ps ∧ ta ) ) → ch ) ;;
	step 2 : wff = adantlr (step 1) |- ( ( ( ph ∧ th ) ∧ ( ps ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       23-Nov-2007.) */

theorem ad2ant2lr (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( th ∧ ph ) ∧ ( ps ∧ ta ) ) → ch ) ;;
}

proof of ad2ant2lr {
	step 1 : wff = adantrr (hyp 1) |- ( ( ph ∧ ( ps ∧ ta ) ) → ch ) ;;
	step 2 : wff = adantll (step 1) |- ( ( ( th ∧ ph ) ∧ ( ps ∧ ta ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction adding two conjuncts to antecedent.  (Contributed by NM,
       24-Nov-2007.) */

theorem ad2ant2rl (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ th ) ∧ ( ta ∧ ps ) ) → ch ) ;;
}

proof of ad2ant2rl {
	step 1 : wff = adantrl (hyp 1) |- ( ( ph ∧ ( ta ∧ ps ) ) → ch ) ;;
	step 2 : wff = adantlr (step 1) |- ( ( ( ph ∧ th ) ∧ ( ta ∧ ps ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by NM, 18-Mar-2007.) */

theorem simpll (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → ph ) ;;
}

proof of simpll {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = ad2antrr (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by NM, 20-Mar-2007.) */

theorem simplr (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → ps ) ;;
}

proof of simplr {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = ad2antlr (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by NM, 21-Mar-2007.) */

theorem simprl (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → ps ) ;;
}

proof of simprl {
	step 1 : wff = id () |- ( ps → ps ) ;;
	step 2 : wff = ad2antrl (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by NM, 21-Mar-2007.) */

theorem simprr (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → ch ) ;;
}

proof of simprr {
	step 1 : wff = id () |- ( ch → ch ) ;;
	step 2 : wff = ad2antll (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simplll (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ph ) ;;
}

proof of simplll {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = ad2antrr (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simpllr (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ps ) ;;
}

proof of simpllr {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = ad2antrr (step 1) |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simplrl (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ps ) ;;
}

proof of simplrl {
	step 1 : wff = simpl () |- ( ( ps ∧ ch ) → ps ) ;;
	step 2 : wff = ad2antlr (step 1) |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simplrr (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ch ) ;;
}

proof of simplrr {
	step 1 : wff = simpr () |- ( ( ps ∧ ch ) → ch ) ;;
	step 2 : wff = ad2antlr (step 1) |- ( ( ( ph ∧ ( ps ∧ ch ) ) ∧ th ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simprll (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ps ) ;;
}

proof of simprll {
	step 1 : wff = simpl () |- ( ( ps ∧ ch ) → ps ) ;;
	step 2 : wff = ad2antrl (step 1) |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simprlr (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ch ) ;;
}

proof of simprlr {
	step 1 : wff = simpr () |- ( ( ps ∧ ch ) → ch ) ;;
	step 2 : wff = ad2antrl (step 1) |- ( ( ph ∧ ( ( ps ∧ ch ) ∧ th ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simprrl (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → ch ) ;;
}

proof of simprrl {
	step 1 : wff = simpl () |- ( ( ch ∧ th ) → ch ) ;;
	step 2 : wff = ad2antll (step 1) |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Jeff Hankins,
     28-Jul-2009.) */

theorem simprrr (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → th ) ;;
}

proof of simprrr {
	step 1 : wff = simpr () |- ( ( ch ∧ th ) → th ) ;;
	step 2 : wff = ad2antll (step 1) |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-4l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) → ph ) ;;
}

proof of simp-4l {
	step 1 : wff = simplll () |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-4r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
}

proof of simp-4r {
	step 1 : wff = simpllr () |- ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-5l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ph ) ;;
}

proof of simp-5l {
	step 1 : wff = simp-4l () |- ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-5r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
}

proof of simp-5r {
	step 1 : wff = simp-4r () |- ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-6l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ph ) ;;
}

proof of simp-6l {
	step 1 : wff = simp-5l () |- ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-6r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
}

proof of simp-6r {
	step 1 : wff = simp-5r () |- ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-7l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ph ) ;;
}

proof of simp-7l {
	step 1 : wff = simp-6l () |- ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-7r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
}

proof of simp-7r {
	step 1 : wff = simp-6r () |- ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-8l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ph ) ;;
}

proof of simp-8l {
	step 1 : wff = simp-7l () |- ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-8r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
}

proof of simp-8r {
	step 1 : wff = simp-7r () |- ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-9l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ph ) ;;
}

proof of simp-9l {
	step 1 : wff = simp-8l () |- ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-9r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
}

proof of simp-9r {
	step 1 : wff = simp-8r () |- ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-10l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ph ) ;;
}

proof of simp-10l {
	step 1 : wff = simp-9l () |- ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-10r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
}

proof of simp-10r {
	step 1 : wff = simp-9r () |- ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-11l (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff, ka : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ph ) ;;
}

proof of simp-11l {
	step 1 : wff = simp-10l () |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ph ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Simplification of a conjunction.  (Contributed by Mario Carneiro,
     4-Jan-2017.) */

theorem simp-11r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff, ze : wff, si : wff, rh : wff, mu : wff, la : wff, ka : wff)  {
	prop 1 : wff = |- ( ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ps ) ;;
}

proof of simp-11r {
	step 1 : wff = simp-10r () |- ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) → ps ) ;;
	step 2 : wff = adantr (step 1) |- ( ( ( ( ( ( ( ( ( ( ( ( ph ∧ ps ) ∧ ch ) ∧ th ) ∧ ta ) ∧ et ) ∧ ze ) ∧ si ) ∧ rh ) ∧ mu ) ∧ la ) ∧ ka ) → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Disjunction of antecedents.  Compare Theorem *4.77 of [WhiteheadRussell]
     p. 121.  (Contributed by NM, 30-May-1994.)  (Proof shortened by Wolf
     Lammen, 9-Dec-2012.) */

theorem jaob (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ch ) → ps ) ↔ ( ( ph → ps ) ∧ ( ch → ps ) ) ) ;;
}

proof of jaob {
	step 1 : wff = pm2.67-2 () |- ( ( ( ph ∨ ch ) → ps ) → ( ph → ps ) ) ;;
	step 2 : wff = olc () |- ( ch → ( ph ∨ ch ) ) ;;
	step 3 : wff = imim1i (step 2) |- ( ( ( ph ∨ ch ) → ps ) → ( ch → ps ) ) ;;
	step 4 : wff = jca (step 1, step 3) |- ( ( ( ph ∨ ch ) → ps ) → ( ( ph → ps ) ∧ ( ch → ps ) ) ) ;;
	step 5 : wff = pm3.44 () |- ( ( ( ph → ps ) ∧ ( ch → ps ) ) → ( ( ph ∨ ch ) → ps ) ) ;;
	step 6 : wff = impbii (step 4, step 5) |- ( ( ( ph ∨ ch ) → ps ) ↔ ( ( ph → ps ) ∧ ( ch → ps ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Inference disjoining the antecedents of two implications.  (Contributed
       by NM, 23-Oct-2005.) */

theorem jaoian (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( th ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∨ th ) ∧ ps ) → ch ) ;;
}

proof of jaoian {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( th → ( ps → ch ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ th ) → ( ps → ch ) ) ;;
	step 4 : wff = imp (step 3) |- ( ( ( ph ∨ th ) ∧ ps ) → ch ) ;;
	qed prop 1 = step 4 ;;
}

/* Deduction disjoining the antecedents of two implications.  (Contributed
       by NM, 14-Oct-2005.) */

theorem jaodan (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ th ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∨ th ) ) → ch ) ;;
}

proof of jaodan {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ph → ( th → ch ) ) ;;
	step 3 : wff = jaod (step 1, step 2) |- ( ph → ( ( ps ∨ th ) → ch ) ) ;;
	step 4 : wff = imp (step 3) |- ( ( ph ∧ ( ps ∨ th ) ) → ch ) ;;
	qed prop 1 = step 4 ;;
}

/* Eliminate a disjunction in a deduction.  A translation of natural
       deduction rule ` \/ ` E ( ` \/ ` elimination), see ~ natded .
       (Contributed by Mario Carneiro, 29-May-2016.) */

theorem mpjaodan (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ th ) → ch ) ;;
	hyp 3 : wff = |- ( ph → ( ps ∨ th ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of mpjaodan {
	step 1 : wff = jaodan (hyp 1, hyp 2) |- ( ( ph ∧ ( ps ∨ th ) ) → ch ) ;;
	step 2 : wff = mpdan (hyp 3, step 1) |- ( ph → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *4.77 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.77 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ps → ph ) ∧ ( ch → ph ) ) ↔ ( ( ps ∨ ch ) → ph ) ) ;;
}

proof of pm4.77 {
	step 1 : wff = jaob () |- ( ( ( ps ∨ ch ) → ph ) ↔ ( ( ps → ph ) ∧ ( ch → ph ) ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ( ps → ph ) ∧ ( ch → ph ) ) ↔ ( ( ps ∨ ch ) → ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.63 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.63 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ( ¬ ph ∨ ps ) → ps ) ) ;;
}

proof of pm2.63 {
	step 1 : wff = pm2.53 () |- ( ( ph ∨ ps ) → ( ¬ ph → ps ) ) ;;
	step 2 : wff = idd () |- ( ( ph ∨ ps ) → ( ps → ps ) ) ;;
	step 3 : wff = jaod (step 1, step 2) |- ( ( ph ∨ ps ) → ( ( ¬ ph ∨ ps ) → ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.64 of [WhiteheadRussell] p. 107.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.64 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ( ph ∨ ¬ ps ) → ph ) ) ;;
}

proof of pm2.64 {
	step 1 : wff = ax-1 () |- ( ph → ( ( ph ∨ ps ) → ph ) ) ;;
	step 2 : wff = orel2 () |- ( ¬ ps → ( ( ph ∨ ps ) → ph ) ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ ¬ ps ) → ( ( ph ∨ ps ) → ph ) ) ;;
	step 4 : wff = com12 (step 3) |- ( ( ph ∨ ps ) → ( ( ph ∨ ¬ ps ) → ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Elimination of an antecedent.  (Contributed by NM, 1-Jan-2005.) */

theorem pm2.61ian (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ¬ ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ps → ch ) ;;
}

proof of pm2.61ian {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ¬ ph → ( ps → ch ) ) ;;
	step 3 : wff = pm2.61i (step 1, step 2) |- ( ps → ch ) ;;
	qed prop 1 = step 3 ;;
}

/* Elimination of an antecedent.  (Contributed by NM, 1-Jan-2005.) */

theorem pm2.61dan (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ¬ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ch ) ;;
}

proof of pm2.61dan {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ph → ( ¬ ps → ch ) ) ;;
	step 3 : wff = pm2.61d (step 1, step 2) |- ( ph → ch ) ;;
	qed prop 1 = step 3 ;;
}

/* Elimination of two antecedents.  (Contributed by NM, 9-Jul-2013.) */

theorem pm2.61ddan (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → th ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ch ) → th ) ;;
	hyp 3 : wff = |- ( ( ph ∧ ( ¬ ps ∧ ¬ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of pm2.61ddan {
	step 1 : wff = adantlr (hyp 2) |- ( ( ( ph ∧ ¬ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = anassrs (hyp 3) |- ( ( ( ph ∧ ¬ ps ) ∧ ¬ ch ) → th ) ;;
	step 3 : wff = pm2.61dan (step 1, step 2) |- ( ( ph ∧ ¬ ps ) → th ) ;;
	step 4 : wff = pm2.61dan (hyp 1, step 3) |- ( ph → th ) ;;
	qed prop 1 = step 4 ;;
}

/* Elimination of two antecedents.  (Contributed by NM, 9-Jul-2013.) */

theorem pm2.61dda (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ¬ ps ) → th ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ¬ ch ) → th ) ;;
	hyp 3 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → th ) ;;
}

proof of pm2.61dda {
	step 1 : wff = anassrs (hyp 3) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = adantlr (hyp 2) |- ( ( ( ph ∧ ps ) ∧ ¬ ch ) → th ) ;;
	step 3 : wff = pm2.61dan (step 1, step 2) |- ( ( ph ∧ ps ) → th ) ;;
	step 4 : wff = pm2.61dan (step 3, hyp 1) |- ( ph → th ) ;;
	qed prop 1 = step 4 ;;
}

/* Proof by contradiction.  (Contributed by NM, 9-Feb-2006.)  (Proof
       shortened by Wolf Lammen, 19-Jun-2014.) */

theorem condan (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ¬ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ¬ ps ) → ¬ ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ps ) ;;
}

proof of condan {
	step 1 : wff = pm2.65da (hyp 1, hyp 2) |- ( ph → ¬ ¬ ps ) ;;
	step 2 : wff = notnot2 () |- ( ¬ ¬ ps → ps ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ph → ps ) ;;
	qed prop 1 = step 3 ;;
}

/* Introduce one conjunct as an antecedent to the other.  "abai" stands for
     "and, biconditional, and, implication".  (Contributed by NM,
     12-Aug-1993.)  (Proof shortened by Wolf Lammen, 7-Dec-2012.) */

theorem abai (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) ↔ ( ph ∧ ( ph → ps ) ) ) ;;
}

proof of abai {
	step 1 : wff = biimt () |- ( ph → ( ps ↔ ( ph → ps ) ) ) ;;
	step 2 : wff = pm5.32i (step 1) |- ( ( ph ∧ ps ) ↔ ( ph ∧ ( ph → ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *5.53 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.53 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ( ph ∨ ps ) ∨ ch ) → th ) ↔ ( ( ( ph → th ) ∧ ( ps → th ) ) ∧ ( ch → th ) ) ) ;;
}

proof of pm5.53 {
	step 1 : wff = jaob () |- ( ( ( ( ph ∨ ps ) ∨ ch ) → th ) ↔ ( ( ( ph ∨ ps ) → th ) ∧ ( ch → th ) ) ) ;;
	step 2 : wff = jaob () |- ( ( ( ph ∨ ps ) → th ) ↔ ( ( ph → th ) ∧ ( ps → th ) ) ) ;;
	step 3 : wff = anbi1i (step 2) |- ( ( ( ( ph ∨ ps ) → th ) ∧ ( ch → th ) ) ↔ ( ( ( ph → th ) ∧ ( ps → th ) ) ∧ ( ch → th ) ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ( ( ( ph ∨ ps ) ∨ ch ) → th ) ↔ ( ( ( ph → th ) ∧ ( ps → th ) ) ∧ ( ch → th ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Swap two conjuncts.  Note that the first digit (1) in the label refers to
     the outer conjunct position, and the next digit (2) to the inner conjunct
     position.  (Contributed by NM, 12-Mar-1995.) */

theorem an12 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
}

proof of an12 {
	step 1 : wff = ancom () |- ( ( ph ∧ ps ) ↔ ( ps ∧ ph ) ) ;;
	step 2 : wff = anbi1i (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ps ∧ ph ) ∧ ch ) ) ;;
	step 3 : wff = anass () |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 4 : wff = anass () |- ( ( ( ps ∧ ph ) ∧ ch ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	step 5 : wff = 3bitr3i (step 2, step 3, step 4) |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* A rearrangement of conjuncts.  (Contributed by NM, 12-Mar-1995.)  (Proof
     shortened by Wolf Lammen, 25-Dec-2012.) */

theorem an32 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ps ) ) ;;
}

proof of an32 {
	step 1 : wff = anass () |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 2 : wff = an12 () |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	step 3 : wff = ancom () |- ( ( ps ∧ ( ph ∧ ch ) ) ↔ ( ( ph ∧ ch ) ∧ ps ) ) ;;
	step 4 : wff = 3bitri (step 1, step 2, step 3) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* A rearrangement of conjuncts.  (Contributed by NM, 24-Jun-2012.)  (Proof
     shortened by Wolf Lammen, 31-Dec-2012.) */

theorem an13 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ch ∧ ( ps ∧ ph ) ) ) ;;
}

proof of an13 {
	step 1 : wff = an12 () |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	step 2 : wff = anass () |- ( ( ( ps ∧ ph ) ∧ ch ) ↔ ( ps ∧ ( ph ∧ ch ) ) ) ;;
	step 3 : wff = ancom () |- ( ( ( ps ∧ ph ) ∧ ch ) ↔ ( ch ∧ ( ps ∧ ph ) ) ) ;;
	step 4 : wff = 3bitr2i (step 1, step 2, step 3) |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ch ∧ ( ps ∧ ph ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* A rearrangement of conjuncts.  (Contributed by NM, 24-Jun-2012.)  (Proof
     shortened by Wolf Lammen, 31-Dec-2012.) */

theorem an31 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ch ∧ ps ) ∧ ph ) ) ;;
}

proof of an31 {
	step 1 : wff = an13 () |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ch ∧ ( ps ∧ ph ) ) ) ;;
	step 2 : wff = anass () |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 3 : wff = anass () |- ( ( ( ch ∧ ps ) ∧ ph ) ↔ ( ch ∧ ( ps ∧ ph ) ) ) ;;
	step 4 : wff = 3bitr4i (step 1, step 2, step 3) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ch ∧ ps ) ∧ ph ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Swap two conjuncts in antecedent.  The label suffix "s" means that
       ~ an12 is combined with ~ syl (or a variant).  (Contributed by NM,
       13-Mar-1996.) */

theorem an12s (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ps ∧ ( ph ∧ ch ) ) → th ) ;;
}

proof of an12s {
	step 1 : wff = an12 () |- ( ( ps ∧ ( ph ∧ ch ) ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 2 : wff = sylbi (step 1, hyp 1) |- ( ( ps ∧ ( ph ∧ ch ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference commuting a nested conjunction in antecedent.  (Contributed by
       NM, 24-May-2006.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem ancom2s (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ch ∧ ps ) ) → th ) ;;
}

proof of ancom2s {
	step 1 : wff = pm3.22 () |- ( ( ch ∧ ps ) → ( ps ∧ ch ) ) ;;
	step 2 : wff = sylan2 (step 1, hyp 1) |- ( ( ph ∧ ( ch ∧ ps ) ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Swap two conjuncts in antecedent.  (Contributed by NM, 31-May-2006.) */

theorem an13s (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ch ∧ ( ps ∧ ph ) ) → th ) ;;
}

proof of an13s {
	step 1 : wff = exp32 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = com13 (step 1) |- ( ch → ( ps → ( ph → th ) ) ) ;;
	step 3 : wff = imp32 (step 2) |- ( ( ch ∧ ( ps ∧ ph ) ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/* Swap two conjuncts in antecedent.  (Contributed by NM, 13-Mar-1996.) */

theorem an32s (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ ps ) → th ) ;;
}

proof of an32s {
	step 1 : wff = an32 () |- ( ( ( ph ∧ ch ) ∧ ps ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 2 : wff = sylbi (step 1, hyp 1) |- ( ( ( ph ∧ ch ) ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference commuting a nested conjunction in antecedent.  (Contributed by
       NM, 24-May-2006.)  (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem ancom1s (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ps ∧ ph ) ∧ ch ) → th ) ;;
}

proof of ancom1s {
	step 1 : wff = pm3.22 () |- ( ( ps ∧ ph ) → ( ph ∧ ps ) ) ;;
	step 2 : wff = sylan (step 1, hyp 1) |- ( ( ( ps ∧ ph ) ∧ ch ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Swap two conjuncts in antecedent.  (Contributed by NM, 31-May-2006.) */

theorem an31s (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ch ∧ ps ) ∧ ph ) → th ) ;;
}

proof of an31s {
	step 1 : wff = exp31 (hyp 1) |- ( ph → ( ps → ( ch → th ) ) ) ;;
	step 2 : wff = com13 (step 1) |- ( ch → ( ps → ( ph → th ) ) ) ;;
	step 3 : wff = imp31 (step 2) |- ( ( ( ch ∧ ps ) ∧ ph ) → th ) ;;
	qed prop 1 = step 3 ;;
}

/* Commutative-associative law for conjunction in an antecedent.
       (Contributed by Jeff Madsen, 19-Jun-2011.) */

theorem anass1rs (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → th ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ ps ) → th ) ;;
}

proof of anass1rs {
	step 1 : wff = anassrs (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → th ) ;;
	step 2 : wff = an32s (step 1) |- ( ( ( ph ∧ ch ) ∧ ps ) → th ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption into embedded conjunct.  (Contributed by NM, 4-Sep-1995.)
     (Proof shortened by Wolf Lammen, 16-Nov-2013.) */

theorem anabs1 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ph ) ↔ ( ph ∧ ps ) ) ;;
}

proof of anabs1 {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = pm4.71i (step 1) |- ( ( ph ∧ ps ) ↔ ( ( ph ∧ ps ) ∧ ph ) ) ;;
	step 3 : wff = bicomi (step 2) |- ( ( ( ph ∧ ps ) ∧ ph ) ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Absorption into embedded conjunct.  (Contributed by NM, 20-Jul-1996.)
     (Proof shortened by Wolf Lammen, 9-Dec-2012.) */

theorem anabs5 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ph ∧ ps ) ) ↔ ( ph ∧ ps ) ) ;;
}

proof of anabs5 {
	step 1 : wff = ibar () |- ( ph → ( ps ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = bicomd (step 1) |- ( ph → ( ( ph ∧ ps ) ↔ ps ) ) ;;
	step 3 : wff = pm5.32i (step 2) |- ( ( ph ∧ ( ph ∧ ps ) ) ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Absorption into embedded conjunct.  (Contributed by NM, 20-Jul-1996.)
     (Proof shortened by Wolf Lammen, 17-Nov-2013.) */

theorem anabs7 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ps ∧ ( ph ∧ ps ) ) ↔ ( ph ∧ ps ) ) ;;
}

proof of anabs7 {
	step 1 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 2 : wff = pm4.71ri (step 1) |- ( ( ph ∧ ps ) ↔ ( ps ∧ ( ph ∧ ps ) ) ) ;;
	step 3 : wff = bicomi (step 2) |- ( ( ps ∧ ( ph ∧ ps ) ) ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Absorption of antecedent with conjunction.  (Contributed by NM,
       24-Mar-1996.) */

theorem anabsan (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ph ) ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabsan {
	step 1 : wff = pm4.24 () |- ( ph ↔ ( ph ∧ ph ) ) ;;
	step 2 : wff = sylanb (step 1, hyp 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 31-Dec-2012.) */

theorem anabss1 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ph ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabss1 {
	step 1 : wff = an32s (hyp 1) |- ( ( ( ph ∧ ph ) ∧ ps ) → ch ) ;;
	step 2 : wff = anabsan (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.) */

theorem anabss4 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ( ps ∧ ph ) ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabss4 {
	step 1 : wff = anabss1 (hyp 1) |- ( ( ps ∧ ph ) → ch ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       10-May-1994.)  (Proof shortened by Wolf Lammen, 1-Jan-2013.) */

theorem anabss5 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ph ∧ ps ) ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabss5 {
	step 1 : wff = anassrs (hyp 1) |- ( ( ( ph ∧ ph ) ∧ ps ) → ch ) ;;
	step 2 : wff = anabsan (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       11-Jun-1995.)  (Proof shortened by Wolf Lammen, 18-Nov-2013.) */

theorem anabsi5 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ph ∧ ps ) → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabsi5 {
	step 1 : wff = imp (hyp 1) |- ( ( ph ∧ ( ph ∧ ps ) ) → ch ) ;;
	step 2 : wff = anabss5 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       14-Aug-2000.) */

theorem anabsi6 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ( ps ∧ ph ) → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabsi6 {
	step 1 : wff = ancomsd (hyp 1) |- ( ph → ( ( ph ∧ ps ) → ch ) ) ;;
	step 2 : wff = anabsi5 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 18-Nov-2013.) */

theorem anabsi7 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ps → ( ( ph ∧ ps ) → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabsi7 {
	step 1 : wff = anabsi6 (hyp 1) |- ( ( ps ∧ ph ) → ch ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       26-Sep-1999.) */

theorem anabsi8 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ps → ( ( ps ∧ ph ) → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabsi8 {
	step 1 : wff = anabsi5 (hyp 1) |- ( ( ps ∧ ph ) → ch ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 19-Nov-2013.) */

theorem anabss7 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ps ∧ ( ph ∧ ps ) ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabss7 {
	step 1 : wff = anassrs (hyp 1) |- ( ( ( ps ∧ ph ) ∧ ps ) → ch ) ;;
	step 2 : wff = anabss4 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent with conjunction.  (Contributed by NM,
       10-May-2004.) */

theorem anabsan2 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ( ps ∧ ps ) ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabsan2 {
	step 1 : wff = an12s (hyp 1) |- ( ( ps ∧ ( ph ∧ ps ) ) → ch ) ;;
	step 2 : wff = anabss7 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of antecedent into conjunction.  (Contributed by NM,
       20-Jul-1996.)  (Proof shortened by Wolf Lammen, 1-Jan-2013.) */

theorem anabss3 (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
}

proof of anabss3 {
	step 1 : wff = anasss (hyp 1) |- ( ( ph ∧ ( ps ∧ ps ) ) → ch ) ;;
	step 2 : wff = anabsan2 (step 1) |- ( ( ph ∧ ps ) → ch ) ;;
	qed prop 1 = step 2 ;;
}

/* Rearrangement of 4 conjuncts.  (Contributed by NM, 10-Jul-1994.) */

theorem an4 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ↔ ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) ) ;;
}

proof of an4 {
	step 1 : wff = an12 () |- ( ( ps ∧ ( ch ∧ th ) ) ↔ ( ch ∧ ( ps ∧ th ) ) ) ;;
	step 2 : wff = anbi2i (step 1) |- ( ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) ↔ ( ph ∧ ( ch ∧ ( ps ∧ th ) ) ) ) ;;
	step 3 : wff = anass () |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ↔ ( ph ∧ ( ps ∧ ( ch ∧ th ) ) ) ) ;;
	step 4 : wff = anass () |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) ↔ ( ph ∧ ( ch ∧ ( ps ∧ th ) ) ) ) ;;
	step 5 : wff = 3bitr4i (step 2, step 3, step 4) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ↔ ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Rearrangement of 4 conjuncts.  (Contributed by NM, 7-Feb-1996.) */

theorem an42 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ↔ ( ( ph ∧ ch ) ∧ ( th ∧ ps ) ) ) ;;
}

proof of an42 {
	step 1 : wff = an4 () |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ↔ ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) ) ;;
	step 2 : wff = ancom () |- ( ( ps ∧ th ) ↔ ( th ∧ ps ) ) ;;
	step 3 : wff = anbi2i (step 2) |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) ↔ ( ( ph ∧ ch ) ∧ ( th ∧ ps ) ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ↔ ( ( ph ∧ ch ) ∧ ( th ∧ ps ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Inference rearranging 4 conjuncts in antecedent.  (Contributed by NM,
       10-Aug-1995.) */

theorem an4s (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) → ta ) ;;
}

proof of an4s {
	step 1 : wff = an4 () |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) ↔ ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) ) ;;
	step 2 : wff = sylbi (step 1, hyp 1) |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference rearranging 4 conjuncts in antecedent.  (Contributed by NM,
       10-Aug-1995.) */

theorem an42s (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ th ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ch ) ∧ ( th ∧ ps ) ) → ta ) ;;
}

proof of an42s {
	step 1 : wff = an4s (hyp 1) |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ th ) ) → ta ) ;;
	step 2 : wff = ancom2s (step 1) |- ( ( ( ph ∧ ch ) ∧ ( th ∧ ps ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* Distribution of conjunction over conjunction.  (Contributed by NM,
     14-Aug-1995.) */

theorem anandi (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ( ph ∧ ps ) ∧ ( ph ∧ ch ) ) ) ;;
}

proof of anandi {
	step 1 : wff = anidm () |- ( ( ph ∧ ph ) ↔ ph ) ;;
	step 2 : wff = anbi1i (step 1) |- ( ( ( ph ∧ ph ) ∧ ( ps ∧ ch ) ) ↔ ( ph ∧ ( ps ∧ ch ) ) ) ;;
	step 3 : wff = an4 () |- ( ( ( ph ∧ ph ) ∧ ( ps ∧ ch ) ) ↔ ( ( ph ∧ ps ) ∧ ( ph ∧ ch ) ) ) ;;
	step 4 : wff = bitr3i (step 2, step 3) |- ( ( ph ∧ ( ps ∧ ch ) ) ↔ ( ( ph ∧ ps ) ∧ ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Distribution of conjunction over conjunction.  (Contributed by NM,
     24-Aug-1995.) */

theorem anandir (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ( ps ∧ ch ) ) ) ;;
}

proof of anandir {
	step 1 : wff = anidm () |- ( ( ch ∧ ch ) ↔ ch ) ;;
	step 2 : wff = anbi2i (step 1) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ ch ) ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 3 : wff = an4 () |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ ch ) ) ↔ ( ( ph ∧ ch ) ∧ ( ps ∧ ch ) ) ) ;;
	step 4 : wff = bitr3i (step 2, step 3) |- ( ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∧ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Inference that undistributes conjunction in the antecedent.
       (Contributed by NM, 7-Jun-2004.) */

theorem anandis (ph : wff, ps : wff, ch : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ( ph ∧ ch ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ ch ) ) → ta ) ;;
}

proof of anandis {
	step 1 : wff = an4s (hyp 1) |- ( ( ( ph ∧ ph ) ∧ ( ps ∧ ch ) ) → ta ) ;;
	step 2 : wff = anabsan (step 1) |- ( ( ph ∧ ( ps ∧ ch ) ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference that undistributes conjunction in the antecedent.
       (Contributed by NM, 7-Jun-2004.) */

theorem anandirs (ph : wff, ps : wff, ch : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ( ph ∧ ch ) ∧ ( ps ∧ ch ) ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∧ ch ) → ta ) ;;
}

proof of anandirs {
	step 1 : wff = an4s (hyp 1) |- ( ( ( ph ∧ ps ) ∧ ( ch ∧ ch ) ) → ta ) ;;
	step 2 : wff = anabsan2 (step 1) |- ( ( ( ph ∧ ps ) ∧ ch ) → ta ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduce an equivalence from two implications.  (Contributed by NM,
       17-Feb-2007.) */

theorem impbida (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ ch ) → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
}

proof of impbida {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ph → ( ch → ps ) ) ;;
	step 3 : wff = impbid (step 1, step 2) |- ( ph → ( ps ↔ ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *3.48 of [WhiteheadRussell] p. 114.  (Contributed by NM,
     28-Jan-1997.) */

theorem pm3.48 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∧ ( ch → th ) ) → ( ( ph ∨ ch ) → ( ps ∨ th ) ) ) ;;
}

proof of pm3.48 {
	step 1 : wff = orc () |- ( ps → ( ps ∨ th ) ) ;;
	step 2 : wff = imim2i (step 1) |- ( ( ph → ps ) → ( ph → ( ps ∨ th ) ) ) ;;
	step 3 : wff = olc () |- ( th → ( ps ∨ th ) ) ;;
	step 4 : wff = imim2i (step 3) |- ( ( ch → th ) → ( ch → ( ps ∨ th ) ) ) ;;
	step 5 : wff = jaao (step 2, step 4) |- ( ( ( ph → ps ) ∧ ( ch → th ) ) → ( ( ph ∨ ch ) → ( ps ∨ th ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem *3.45 (Fact) of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.45 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ph ∧ ch ) → ( ps ∧ ch ) ) ) ;;
}

proof of pm3.45 {
	step 1 : wff = id () |- ( ( ph → ps ) → ( ph → ps ) ) ;;
	step 2 : wff = anim1d (step 1) |- ( ( ph → ps ) → ( ( ph ∧ ch ) → ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction joining nested implications to form implication of
       conjunctions.  (Contributed by NM, 29-Feb-1996.) */

theorem im2anan9 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta → et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ( ps ∧ ta ) → ( ch ∧ et ) ) ) ;;
}

proof of im2anan9 {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ( ps → ch ) ) ;;
	step 2 : wff = adantl (hyp 2) |- ( ( ph ∧ th ) → ( ta → et ) ) ;;
	step 3 : wff = anim12d (step 1, step 2) |- ( ( ph ∧ th ) → ( ( ps ∧ ta ) → ( ch ∧ et ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction joining nested implications to form implication of
       conjunctions.  (Contributed by NM, 29-Feb-1996.) */

theorem im2anan9r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta → et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( th ∧ ph ) → ( ( ps ∧ ta ) → ( ch ∧ et ) ) ) ;;
}

proof of im2anan9r {
	step 1 : wff = im2anan9 (hyp 1, hyp 2) |- ( ( ph ∧ th ) → ( ( ps ∧ ta ) → ( ch ∧ et ) ) ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( th ∧ ph ) → ( ( ps ∧ ta ) → ( ch ∧ et ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Conjoin antecedents and consequents in a deduction.  (Contributed by
       Mario Carneiro, 12-May-2014.) */

theorem anim12dan (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	hyp 2 : wff = |- ( ( ph ∧ th ) → ta ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ ( ps ∧ th ) ) → ( ch ∧ ta ) ) ;;
}

proof of anim12dan {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = ex (hyp 2) |- ( ph → ( th → ta ) ) ;;
	step 3 : wff = anim12d (step 1, step 2) |- ( ph → ( ( ps ∧ th ) → ( ch ∧ ta ) ) ) ;;
	step 4 : wff = imp (step 3) |- ( ( ph ∧ ( ps ∧ th ) ) → ( ch ∧ ta ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Disjoin antecedents and consequents in a deduction.  (Contributed by NM,
       10-May-1994.) */

theorem orim12d (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	hyp 2 : wff = |- ( ph → ( th → ta ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ) → ( ch ∨ ta ) ) ) ;;
}

proof of orim12d {
	step 1 : wff = pm3.48 () |- ( ( ( ps → ch ) ∧ ( th → ta ) ) → ( ( ps ∨ th ) → ( ch ∨ ta ) ) ) ;;
	step 2 : wff = syl2anc (hyp 1, hyp 2, step 1) |- ( ph → ( ( ps ∨ th ) → ( ch ∨ ta ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Disjoin antecedents and consequents in a deduction.  (Contributed by NM,
       23-Apr-1995.) */

theorem orim1d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( ps ∨ th ) → ( ch ∨ th ) ) ) ;;
}

proof of orim1d {
	step 1 : wff = idd () |- ( ph → ( th → th ) ) ;;
	step 2 : wff = orim12d (hyp 1, step 1) |- ( ph → ( ( ps ∨ th ) → ( ch ∨ th ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Disjoin antecedents and consequents in a deduction.  (Contributed by NM,
       23-Apr-1995.) */

theorem orim2d (ph : wff, ps : wff, ch : wff, th : wff)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ( th ∨ ps ) → ( th ∨ ch ) ) ) ;;
}

proof of orim2d {
	step 1 : wff = idd () |- ( ph → ( th → th ) ) ;;
	step 2 : wff = orim12d (step 1, hyp 1) |- ( ph → ( ( th ∨ ps ) → ( th ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Axiom *1.6 (Sum) of [WhiteheadRussell] p. 97.  (Contributed by NM,
     3-Jan-2005.) */

theorem orim2 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ps → ch ) → ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
}

proof of orim2 {
	step 1 : wff = id () |- ( ( ps → ch ) → ( ps → ch ) ) ;;
	step 2 : wff = orim2d (step 1) |- ( ( ps → ch ) → ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.38 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     6-Mar-2008.) */

theorem pm2.38 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ps → ch ) → ( ( ps ∨ ph ) → ( ch ∨ ph ) ) ) ;;
}

proof of pm2.38 {
	step 1 : wff = id () |- ( ( ps → ch ) → ( ps → ch ) ) ;;
	step 2 : wff = orim1d (step 1) |- ( ( ps → ch ) → ( ( ps ∨ ph ) → ( ch ∨ ph ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.36 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     6-Mar-2008.) */

theorem pm2.36 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ps → ch ) → ( ( ph ∨ ps ) → ( ch ∨ ph ) ) ) ;;
}

proof of pm2.36 {
	step 1 : wff = pm1.4 () |- ( ( ph ∨ ps ) → ( ps ∨ ph ) ) ;;
	step 2 : wff = pm2.38 () |- ( ( ps → ch ) → ( ( ps ∨ ph ) → ( ch ∨ ph ) ) ) ;;
	step 3 : wff = syl5 (step 1, step 2) |- ( ( ps → ch ) → ( ( ph ∨ ps ) → ( ch ∨ ph ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.37 of [WhiteheadRussell] p. 105.  (Contributed by NM,
     6-Mar-2008.) */

theorem pm2.37 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ps → ch ) → ( ( ps ∨ ph ) → ( ph ∨ ch ) ) ) ;;
}

proof of pm2.37 {
	step 1 : wff = pm2.38 () |- ( ( ps → ch ) → ( ( ps ∨ ph ) → ( ch ∨ ph ) ) ) ;;
	step 2 : wff = pm1.4 () |- ( ( ch ∨ ph ) → ( ph ∨ ch ) ) ;;
	step 3 : wff = syl6 (step 1, step 2) |- ( ( ps → ch ) → ( ( ps ∨ ph ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.73 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.73 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) → ( ( ( ph ∨ ps ) ∨ ch ) → ( ps ∨ ch ) ) ) ;;
}

proof of pm2.73 {
	step 1 : wff = pm2.621 () |- ( ( ph → ps ) → ( ( ph ∨ ps ) → ps ) ) ;;
	step 2 : wff = orim1d (step 1) |- ( ( ph → ps ) → ( ( ( ph ∨ ps ) ∨ ch ) → ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.74 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Andrew Salmon, 7-May-2011.) */

theorem pm2.74 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ps → ph ) → ( ( ( ph ∨ ps ) ∨ ch ) → ( ph ∨ ch ) ) ) ;;
}

proof of pm2.74 {
	step 1 : wff = orel2 () |- ( ¬ ps → ( ( ph ∨ ps ) → ph ) ) ;;
	step 2 : wff = ax-1 () |- ( ph → ( ( ph ∨ ps ) → ph ) ) ;;
	step 3 : wff = ja (step 1, step 2) |- ( ( ps → ph ) → ( ( ph ∨ ps ) → ph ) ) ;;
	step 4 : wff = orim1d (step 3) |- ( ( ps → ph ) → ( ( ( ph ∨ ps ) ∨ ch ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Disjunction distributes over implication.  (Contributed by Wolf Lammen,
     5-Jan-2013.) */

theorem orimdi (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps → ch ) ) ↔ ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
}

proof of orimdi {
	step 1 : wff = imdi () |- ( ( ¬ ph → ( ps → ch ) ) ↔ ( ( ¬ ph → ps ) → ( ¬ ph → ch ) ) ) ;;
	step 2 : wff = df-or () |- ( ( ph ∨ ( ps → ch ) ) ↔ ( ¬ ph → ( ps → ch ) ) ) ;;
	step 3 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 4 : wff = df-or () |- ( ( ph ∨ ch ) ↔ ( ¬ ph → ch ) ) ;;
	step 5 : wff = imbi12i (step 3, step 4) |- ( ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ↔ ( ( ¬ ph → ps ) → ( ¬ ph → ch ) ) ) ;;
	step 6 : wff = 3bitr4i (step 1, step 2, step 5) |- ( ( ph ∨ ( ps → ch ) ) ↔ ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Theorem *2.76 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.76 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps → ch ) ) → ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
}

proof of pm2.76 {
	step 1 : wff = orimdi () |- ( ( ph ∨ ( ps → ch ) ) ↔ ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph ∨ ( ps → ch ) ) → ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.75 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 4-Jan-2013.) */

theorem pm2.75 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ( ph ∨ ( ps → ch ) ) → ( ph ∨ ch ) ) ) ;;
}

proof of pm2.75 {
	step 1 : wff = pm2.76 () |- ( ( ph ∨ ( ps → ch ) ) → ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
	step 2 : wff = com12 (step 1) |- ( ( ph ∨ ps ) → ( ( ph ∨ ( ps → ch ) ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *2.8 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Jan-2013.) */

theorem pm2.8 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ps ) → ( ( ¬ ps ∨ ch ) → ( ph ∨ ch ) ) ) ;;
}

proof of pm2.8 {
	step 1 : wff = pm2.53 () |- ( ( ph ∨ ps ) → ( ¬ ph → ps ) ) ;;
	step 2 : wff = con1d (step 1) |- ( ( ph ∨ ps ) → ( ¬ ps → ph ) ) ;;
	step 3 : wff = orim1d (step 2) |- ( ( ph ∨ ps ) → ( ( ¬ ps ∨ ch ) → ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.81 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.81 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ps → ( ch → th ) ) → ( ( ph ∨ ps ) → ( ( ph ∨ ch ) → ( ph ∨ th ) ) ) ) ;;
}

proof of pm2.81 {
	step 1 : wff = orim2 () |- ( ( ps → ( ch → th ) ) → ( ( ph ∨ ps ) → ( ph ∨ ( ch → th ) ) ) ) ;;
	step 2 : wff = pm2.76 () |- ( ( ph ∨ ( ch → th ) ) → ( ( ph ∨ ch ) → ( ph ∨ th ) ) ) ;;
	step 3 : wff = syl6 (step 1, step 2) |- ( ( ps → ( ch → th ) ) → ( ( ph ∨ ps ) → ( ( ph ∨ ch ) → ( ph ∨ th ) ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.82 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm2.82 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∨ ch ) → ( ( ( ph ∨ ¬ ch ) ∨ th ) → ( ( ph ∨ ps ) ∨ th ) ) ) ;;
}

proof of pm2.82 {
	step 1 : wff = ax-1 () |- ( ( ph ∨ ps ) → ( ( ph ∨ ¬ ch ) → ( ph ∨ ps ) ) ) ;;
	step 2 : wff = pm2.24 () |- ( ch → ( ¬ ch → ps ) ) ;;
	step 3 : wff = orim2d (step 2) |- ( ch → ( ( ph ∨ ¬ ch ) → ( ph ∨ ps ) ) ) ;;
	step 4 : wff = jaoi (step 1, step 3) |- ( ( ( ph ∨ ps ) ∨ ch ) → ( ( ph ∨ ¬ ch ) → ( ph ∨ ps ) ) ) ;;
	step 5 : wff = orim1d (step 4) |- ( ( ( ph ∨ ps ) ∨ ch ) → ( ( ( ph ∨ ¬ ch ) ∨ th ) → ( ( ph ∨ ps ) ∨ th ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem *2.85 of [WhiteheadRussell] p. 108.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 5-Jan-2013.) */

theorem pm2.85 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) → ( ph ∨ ch ) ) → ( ph ∨ ( ps → ch ) ) ) ;;
}

proof of pm2.85 {
	step 1 : wff = orimdi () |- ( ( ph ∨ ( ps → ch ) ) ↔ ( ( ph ∨ ps ) → ( ph ∨ ch ) ) ) ;;
	step 2 : wff = biimpri (step 1) |- ( ( ( ph ∨ ps ) → ( ph ∨ ch ) ) → ( ph ∨ ( ps → ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Infer negated disjunction of negated premises.  (Contributed by NM,
       4-Apr-1995.) */

theorem pm3.2ni (ph : wff, ps : wff)  {
	hyp 1 : wff = |- ¬ ph ;;
	hyp 2 : wff = |- ¬ ps ;;
	-----------------------
	prop 1 : wff = |- ¬ ( ph ∨ ps ) ;;
}

proof of pm3.2ni {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = pm2.21i (hyp 2) |- ( ps → ph ) ;;
	step 3 : wff = jaoi (step 1, step 2) |- ( ( ph ∨ ps ) → ph ) ;;
	step 4 : wff = mto (hyp 1, step 3) |- ¬ ( ph ∨ ps ) ;;
	qed prop 1 = step 4 ;;
}

/* Absorption of redundant internal disjunct.  Compare Theorem *4.45 of
     [WhiteheadRussell] p. 119.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 28-Feb-2014.) */

theorem orabs (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph ↔ ( ( ph ∨ ps ) ∧ ph ) ) ;;
}

proof of orabs {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = pm4.71ri (step 1) |- ( ph ↔ ( ( ph ∨ ps ) ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorb a disjunct into a conjunct.  (Contributed by Roy F. Longton,
     23-Jun-2005.)  (Proof shortened by Wolf Lammen, 10-Nov-2013.) */

theorem oranabs (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ¬ ps ) ∧ ps ) ↔ ( ph ∧ ps ) ) ;;
}

proof of oranabs {
	step 1 : wff = biortn () |- ( ps → ( ph ↔ ( ¬ ps ∨ ph ) ) ) ;;
	step 2 : wff = orcom () |- ( ( ¬ ps ∨ ph ) ↔ ( ph ∨ ¬ ps ) ) ;;
	step 3 : wff = syl6rbb (step 1, step 2) |- ( ps → ( ( ph ∨ ¬ ps ) ↔ ph ) ) ;;
	step 4 : wff = pm5.32ri (step 3) |- ( ( ( ph ∨ ¬ ps ) ∧ ps ) ↔ ( ph ∧ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Two propositions are equivalent if they are both true.  Theorem *5.1 of
     [WhiteheadRussell] p. 123.  (Contributed by NM, 21-May-1994.) */

theorem pm5.1 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ps ) → ( ph ↔ ps ) ) ;;
}

proof of pm5.1 {
	step 1 : wff = pm5.501 () |- ( ph → ( ps ↔ ( ph ↔ ps ) ) ) ;;
	step 2 : wff = biimpa (step 1) |- ( ( ph ∧ ps ) → ( ph ↔ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Two propositions are equivalent if they are both false.  Theorem *5.21 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 21-May-1994.) */

theorem pm5.21 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ¬ ph ∧ ¬ ps ) → ( ph ↔ ps ) ) ;;
}

proof of pm5.21 {
	step 1 : wff = pm5.21im () |- ( ¬ ph → ( ¬ ps → ( ph ↔ ps ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ¬ ph ∧ ¬ ps ) → ( ph ↔ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *3.43 (Comp) of [WhiteheadRussell] p. 113.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm3.43 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∧ ( ph → ch ) ) → ( ph → ( ps ∧ ch ) ) ) ;;
}

proof of pm3.43 {
	step 1 : wff = pm3.43i () |- ( ( ph → ps ) → ( ( ph → ch ) → ( ph → ( ps ∧ ch ) ) ) ) ;;
	step 2 : wff = imp (step 1) |- ( ( ( ph → ps ) ∧ ( ph → ch ) ) → ( ph → ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distributive law for implication over conjunction.  Compare Theorem *4.76
     of [WhiteheadRussell] p. 121.  (Contributed by NM, 3-Apr-1994.)  (Proof
     shortened by Wolf Lammen, 27-Nov-2013.) */

theorem jcab (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ( ps ∧ ch ) ) ↔ ( ( ph → ps ) ∧ ( ph → ch ) ) ) ;;
}

proof of jcab {
	step 1 : wff = simpl () |- ( ( ps ∧ ch ) → ps ) ;;
	step 2 : wff = imim2i (step 1) |- ( ( ph → ( ps ∧ ch ) ) → ( ph → ps ) ) ;;
	step 3 : wff = simpr () |- ( ( ps ∧ ch ) → ch ) ;;
	step 4 : wff = imim2i (step 3) |- ( ( ph → ( ps ∧ ch ) ) → ( ph → ch ) ) ;;
	step 5 : wff = jca (step 2, step 4) |- ( ( ph → ( ps ∧ ch ) ) → ( ( ph → ps ) ∧ ( ph → ch ) ) ) ;;
	step 6 : wff = pm3.43 () |- ( ( ( ph → ps ) ∧ ( ph → ch ) ) → ( ph → ( ps ∧ ch ) ) ) ;;
	step 7 : wff = impbii (step 5, step 6) |- ( ( ph → ( ps ∧ ch ) ) ↔ ( ( ph → ps ) ∧ ( ph → ch ) ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Distributive law for disjunction.  Theorem *4.41 of [WhiteheadRussell]
     p. 119.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew
     Salmon, 7-May-2011.)  (Proof shortened by Wolf Lammen, 28-Nov-2013.) */

theorem ordi (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∨ ( ps ∧ ch ) ) ↔ ( ( ph ∨ ps ) ∧ ( ph ∨ ch ) ) ) ;;
}

proof of ordi {
	step 1 : wff = jcab () |- ( ( ¬ ph → ( ps ∧ ch ) ) ↔ ( ( ¬ ph → ps ) ∧ ( ¬ ph → ch ) ) ) ;;
	step 2 : wff = df-or () |- ( ( ph ∨ ( ps ∧ ch ) ) ↔ ( ¬ ph → ( ps ∧ ch ) ) ) ;;
	step 3 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 4 : wff = df-or () |- ( ( ph ∨ ch ) ↔ ( ¬ ph → ch ) ) ;;
	step 5 : wff = anbi12i (step 3, step 4) |- ( ( ( ph ∨ ps ) ∧ ( ph ∨ ch ) ) ↔ ( ( ¬ ph → ps ) ∧ ( ¬ ph → ch ) ) ) ;;
	step 6 : wff = 3bitr4i (step 1, step 2, step 5) |- ( ( ph ∨ ( ps ∧ ch ) ) ↔ ( ( ph ∨ ps ) ∧ ( ph ∨ ch ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Distributive law for disjunction.  (Contributed by NM, 12-Aug-1994.) */

theorem ordir (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∨ ch ) ↔ ( ( ph ∨ ch ) ∧ ( ps ∨ ch ) ) ) ;;
}

proof of ordir {
	step 1 : wff = ordi () |- ( ( ch ∨ ( ph ∧ ps ) ) ↔ ( ( ch ∨ ph ) ∧ ( ch ∨ ps ) ) ) ;;
	step 2 : wff = orcom () |- ( ( ( ph ∧ ps ) ∨ ch ) ↔ ( ch ∨ ( ph ∧ ps ) ) ) ;;
	step 3 : wff = orcom () |- ( ( ph ∨ ch ) ↔ ( ch ∨ ph ) ) ;;
	step 4 : wff = orcom () |- ( ( ps ∨ ch ) ↔ ( ch ∨ ps ) ) ;;
	step 5 : wff = anbi12i (step 3, step 4) |- ( ( ( ph ∨ ch ) ∧ ( ps ∨ ch ) ) ↔ ( ( ch ∨ ph ) ∧ ( ch ∨ ps ) ) ) ;;
	step 6 : wff = 3bitr4i (step 1, step 2, step 5) |- ( ( ( ph ∧ ps ) ∨ ch ) ↔ ( ( ph ∨ ch ) ∧ ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Theorem *4.76 of [WhiteheadRussell] p. 121.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.76 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph → ps ) ∧ ( ph → ch ) ) ↔ ( ph → ( ps ∧ ch ) ) ) ;;
}

proof of pm4.76 {
	step 1 : wff = jcab () |- ( ( ph → ( ps ∧ ch ) ) ↔ ( ( ph → ps ) ∧ ( ph → ch ) ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ( ph → ps ) ∧ ( ph → ch ) ) ↔ ( ph → ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Distributive law for conjunction.  Theorem *4.4 of [WhiteheadRussell]
     p. 118.  (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Wolf
     Lammen, 5-Jan-2013.) */

theorem andi (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps ∨ ch ) ) ↔ ( ( ph ∧ ps ) ∨ ( ph ∧ ch ) ) ) ;;
}

proof of andi {
	step 1 : wff = orc () |- ( ( ph ∧ ps ) → ( ( ph ∧ ps ) ∨ ( ph ∧ ch ) ) ) ;;
	step 2 : wff = olc () |- ( ( ph ∧ ch ) → ( ( ph ∧ ps ) ∨ ( ph ∧ ch ) ) ) ;;
	step 3 : wff = jaodan (step 1, step 2) |- ( ( ph ∧ ( ps ∨ ch ) ) → ( ( ph ∧ ps ) ∨ ( ph ∧ ch ) ) ) ;;
	step 4 : wff = orc () |- ( ps → ( ps ∨ ch ) ) ;;
	step 5 : wff = anim2i (step 4) |- ( ( ph ∧ ps ) → ( ph ∧ ( ps ∨ ch ) ) ) ;;
	step 6 : wff = olc () |- ( ch → ( ps ∨ ch ) ) ;;
	step 7 : wff = anim2i (step 6) |- ( ( ph ∧ ch ) → ( ph ∧ ( ps ∨ ch ) ) ) ;;
	step 8 : wff = jaoi (step 5, step 7) |- ( ( ( ph ∧ ps ) ∨ ( ph ∧ ch ) ) → ( ph ∧ ( ps ∨ ch ) ) ) ;;
	step 9 : wff = impbii (step 3, step 8) |- ( ( ph ∧ ( ps ∨ ch ) ) ↔ ( ( ph ∧ ps ) ∨ ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 9 ;;
}

/* Distributive law for conjunction.  (Contributed by NM, 12-Aug-1994.) */

theorem andir (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∨ ( ps ∧ ch ) ) ) ;;
}

proof of andir {
	step 1 : wff = andi () |- ( ( ch ∧ ( ph ∨ ps ) ) ↔ ( ( ch ∧ ph ) ∨ ( ch ∧ ps ) ) ) ;;
	step 2 : wff = ancom () |- ( ( ( ph ∨ ps ) ∧ ch ) ↔ ( ch ∧ ( ph ∨ ps ) ) ) ;;
	step 3 : wff = ancom () |- ( ( ph ∧ ch ) ↔ ( ch ∧ ph ) ) ;;
	step 4 : wff = ancom () |- ( ( ps ∧ ch ) ↔ ( ch ∧ ps ) ) ;;
	step 5 : wff = orbi12i (step 3, step 4) |- ( ( ( ph ∧ ch ) ∨ ( ps ∧ ch ) ) ↔ ( ( ch ∧ ph ) ∨ ( ch ∧ ps ) ) ) ;;
	step 6 : wff = 3bitr4i (step 1, step 2, step 5) |- ( ( ( ph ∨ ps ) ∧ ch ) ↔ ( ( ph ∧ ch ) ∨ ( ps ∧ ch ) ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Double distributive law for disjunction.  (Contributed by NM,
     12-Aug-1994.) */

theorem orddi (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∧ ps ) ∨ ( ch ∧ th ) ) ↔ ( ( ( ph ∨ ch ) ∧ ( ph ∨ th ) ) ∧ ( ( ps ∨ ch ) ∧ ( ps ∨ th ) ) ) ) ;;
}

proof of orddi {
	step 1 : wff = ordir () |- ( ( ( ph ∧ ps ) ∨ ( ch ∧ th ) ) ↔ ( ( ph ∨ ( ch ∧ th ) ) ∧ ( ps ∨ ( ch ∧ th ) ) ) ) ;;
	step 2 : wff = ordi () |- ( ( ph ∨ ( ch ∧ th ) ) ↔ ( ( ph ∨ ch ) ∧ ( ph ∨ th ) ) ) ;;
	step 3 : wff = ordi () |- ( ( ps ∨ ( ch ∧ th ) ) ↔ ( ( ps ∨ ch ) ∧ ( ps ∨ th ) ) ) ;;
	step 4 : wff = anbi12i (step 2, step 3) |- ( ( ( ph ∨ ( ch ∧ th ) ) ∧ ( ps ∨ ( ch ∧ th ) ) ) ↔ ( ( ( ph ∨ ch ) ∧ ( ph ∨ th ) ) ∧ ( ( ps ∨ ch ) ∧ ( ps ∨ th ) ) ) ) ;;
	step 5 : wff = bitri (step 1, step 4) |- ( ( ( ph ∧ ps ) ∨ ( ch ∧ th ) ) ↔ ( ( ( ph ∨ ch ) ∧ ( ph ∨ th ) ) ∧ ( ( ps ∨ ch ) ∧ ( ps ∨ th ) ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Double distributive law for conjunction.  (Contributed by NM,
     12-Aug-1994.) */

theorem anddi (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∧ ( ch ∨ th ) ) ↔ ( ( ( ph ∧ ch ) ∨ ( ph ∧ th ) ) ∨ ( ( ps ∧ ch ) ∨ ( ps ∧ th ) ) ) ) ;;
}

proof of anddi {
	step 1 : wff = andir () |- ( ( ( ph ∨ ps ) ∧ ( ch ∨ th ) ) ↔ ( ( ph ∧ ( ch ∨ th ) ) ∨ ( ps ∧ ( ch ∨ th ) ) ) ) ;;
	step 2 : wff = andi () |- ( ( ph ∧ ( ch ∨ th ) ) ↔ ( ( ph ∧ ch ) ∨ ( ph ∧ th ) ) ) ;;
	step 3 : wff = andi () |- ( ( ps ∧ ( ch ∨ th ) ) ↔ ( ( ps ∧ ch ) ∨ ( ps ∧ th ) ) ) ;;
	step 4 : wff = orbi12i (step 2, step 3) |- ( ( ( ph ∧ ( ch ∨ th ) ) ∨ ( ps ∧ ( ch ∨ th ) ) ) ↔ ( ( ( ph ∧ ch ) ∨ ( ph ∧ th ) ) ∨ ( ( ps ∧ ch ) ∨ ( ps ∧ th ) ) ) ) ;;
	step 5 : wff = bitri (step 1, step 4) |- ( ( ( ph ∨ ps ) ∧ ( ch ∨ th ) ) ↔ ( ( ( ph ∧ ch ) ∨ ( ph ∧ th ) ) ∨ ( ( ps ∧ ch ) ∨ ( ps ∧ th ) ) ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Prove formula-building rules for the biconditional connective. */

/* Theorem *4.39 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.39 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ( ph ∨ ps ) ↔ ( ch ∨ th ) ) ) ;;
}

proof of pm4.39 {
	step 1 : wff = simpl () |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ph ↔ ch ) ) ;;
	step 2 : wff = simpr () |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ps ↔ th ) ) ;;
	step 3 : wff = orbi12d (step 1, step 2) |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ( ph ∨ ps ) ↔ ( ch ∨ th ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *4.38 of [WhiteheadRussell] p. 118.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm4.38 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ( ph ∧ ps ) ↔ ( ch ∧ th ) ) ) ;;
}

proof of pm4.38 {
	step 1 : wff = simpl () |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ph ↔ ch ) ) ;;
	step 2 : wff = simpr () |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ps ↔ th ) ) ;;
	step 3 : wff = anbi12d (step 1, step 2) |- ( ( ( ph ↔ ch ) ∧ ( ps ↔ th ) ) → ( ( ph ∧ ps ) ↔ ( ch ∧ th ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction joining two equivalences to form equivalence of conjunctions.
       (Contributed by NM, 31-Jul-1995.) */

theorem bi2anan9 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta ↔ et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ( ps ∧ ta ) ↔ ( ch ∧ et ) ) ) ;;
}

proof of bi2anan9 {
	step 1 : wff = anbi1d (hyp 1) |- ( ph → ( ( ps ∧ ta ) ↔ ( ch ∧ ta ) ) ) ;;
	step 2 : wff = anbi2d (hyp 2) |- ( th → ( ( ch ∧ ta ) ↔ ( ch ∧ et ) ) ) ;;
	step 3 : wff = sylan9bb (step 1, step 2) |- ( ( ph ∧ th ) → ( ( ps ∧ ta ) ↔ ( ch ∧ et ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction joining two equivalences to form equivalence of conjunctions.
       (Contributed by NM, 19-Feb-1996.) */

theorem bi2anan9r (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta ↔ et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( th ∧ ph ) → ( ( ps ∧ ta ) ↔ ( ch ∧ et ) ) ) ;;
}

proof of bi2anan9r {
	step 1 : wff = bi2anan9 (hyp 1, hyp 2) |- ( ( ph ∧ th ) → ( ( ps ∧ ta ) ↔ ( ch ∧ et ) ) ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( th ∧ ph ) → ( ( ps ∧ ta ) ↔ ( ch ∧ et ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction joining two biconditionals with different antecedents.
       (Contributed by NM, 12-May-2004.) */

theorem bi2bian9 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff, et : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	hyp 2 : wff = |- ( th → ( ta ↔ et ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ph ∧ th ) → ( ( ps ↔ ta ) ↔ ( ch ↔ et ) ) ) ;;
}

proof of bi2bian9 {
	step 1 : wff = adantr (hyp 1) |- ( ( ph ∧ th ) → ( ps ↔ ch ) ) ;;
	step 2 : wff = adantl (hyp 2) |- ( ( ph ∧ th ) → ( ta ↔ et ) ) ;;
	step 3 : wff = bibi12d (step 1, step 2) |- ( ( ph ∧ th ) → ( ( ps ↔ ta ) ↔ ( ch ↔ et ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Implication in terms of biconditional and disjunction.  Theorem *4.72 of
     [WhiteheadRussell] p. 121.  (Contributed by NM, 30-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 30-Jan-2013.) */

theorem pm4.72 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ↔ ( ps ↔ ( ph ∨ ps ) ) ) ;;
}

proof of pm4.72 {
	step 1 : wff = olc () |- ( ps → ( ph ∨ ps ) ) ;;
	step 2 : wff = pm2.621 () |- ( ( ph → ps ) → ( ( ph ∨ ps ) → ps ) ) ;;
	step 3 : wff = impbid2 (step 1, step 2) |- ( ( ph → ps ) → ( ps ↔ ( ph ∨ ps ) ) ) ;;
	step 4 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 5 : wff = bi2 () |- ( ( ps ↔ ( ph ∨ ps ) ) → ( ( ph ∨ ps ) → ps ) ) ;;
	step 6 : wff = syl5 (step 4, step 5) |- ( ( ps ↔ ( ph ∨ ps ) ) → ( ph → ps ) ) ;;
	step 7 : wff = impbii (step 3, step 6) |- ( ( ph → ps ) ↔ ( ps ↔ ( ph ∨ ps ) ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Simplify an implication between implications.  (Contributed by Paul
     Chapman, 17-Nov-2012.)  (Proof shortened by Wolf Lammen, 3-Apr-2013.) */

theorem imimorb (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ( ps → ch ) → ( ph → ch ) ) ↔ ( ph → ( ps ∨ ch ) ) ) ;;
}

proof of imimorb {
	step 1 : wff = bi2.04 () |- ( ( ( ps → ch ) → ( ph → ch ) ) ↔ ( ph → ( ( ps → ch ) → ch ) ) ) ;;
	step 2 : wff = dfor2 () |- ( ( ps ∨ ch ) ↔ ( ( ps → ch ) → ch ) ) ;;
	step 3 : wff = imbi2i (step 2) |- ( ( ph → ( ps ∨ ch ) ) ↔ ( ph → ( ( ps → ch ) → ch ) ) ) ;;
	step 4 : wff = bitr4i (step 1, step 3) |- ( ( ( ps → ch ) → ( ph → ch ) ) ↔ ( ph → ( ps ∨ ch ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem *5.33 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.33 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ps → ch ) ) ↔ ( ph ∧ ( ( ph ∧ ps ) → ch ) ) ) ;;
}

proof of pm5.33 {
	step 1 : wff = ibar () |- ( ph → ( ps ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = imbi1d (step 1) |- ( ph → ( ( ps → ch ) ↔ ( ( ph ∧ ps ) → ch ) ) ) ;;
	step 3 : wff = pm5.32i (step 2) |- ( ( ph ∧ ( ps → ch ) ) ↔ ( ph ∧ ( ( ph ∧ ps ) → ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *5.36 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.36 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ( ph ↔ ps ) ) ↔ ( ps ∧ ( ph ↔ ps ) ) ) ;;
}

proof of pm5.36 {
	step 1 : wff = id () |- ( ( ph ↔ ps ) → ( ph ↔ ps ) ) ;;
	step 2 : wff = pm5.32ri (step 1) |- ( ( ph ∧ ( ph ↔ ps ) ) ↔ ( ps ∧ ( ph ↔ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorb a hypothesis into the second member of a biconditional.
       (Contributed by FL, 15-Feb-2007.) */

theorem bianabs (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ( ph → ( ps ↔ ( ph ∧ ch ) ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
}

proof of bianabs {
	step 1 : wff = ibar () |- ( ph → ( ch ↔ ( ph ∧ ch ) ) ) ;;
	step 2 : wff = bitr4d (hyp 1, step 1) |- ( ph → ( ps ↔ ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Absorption of disjunction into equivalence.  (Contributed by NM,
     6-Aug-1995.)  (Proof shortened by Wolf Lammen, 3-Nov-2013.) */

theorem oibabs (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) → ( ph ↔ ps ) ) ↔ ( ph ↔ ps ) ) ;;
}

proof of oibabs {
	step 1 : wff = ioran () |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = pm5.21 () |- ( ( ¬ ph ∧ ¬ ps ) → ( ph ↔ ps ) ) ;;
	step 3 : wff = sylbi (step 1, step 2) |- ( ¬ ( ph ∨ ps ) → ( ph ↔ ps ) ) ;;
	step 4 : wff = id () |- ( ( ph ↔ ps ) → ( ph ↔ ps ) ) ;;
	step 5 : wff = ja (step 3, step 4) |- ( ( ( ph ∨ ps ) → ( ph ↔ ps ) ) → ( ph ↔ ps ) ) ;;
	step 6 : wff = ax-1 () |- ( ( ph ↔ ps ) → ( ( ph ∨ ps ) → ( ph ↔ ps ) ) ) ;;
	step 7 : wff = impbii (step 5, step 6) |- ( ( ( ph ∨ ps ) → ( ph ↔ ps ) ) ↔ ( ph ↔ ps ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Law of noncontradiction.  Theorem *3.24 of [WhiteheadRussell] p. 111 (who
     call it the "law of contradiction").  (Contributed by NM, 16-Sep-1993.)
     (Proof shortened by Wolf Lammen, 24-Nov-2012.) */

theorem pm3.24 (ph : wff)  {
	prop 1 : wff = |- ¬ ( ph ∧ ¬ ph ) ;;
}

proof of pm3.24 {
	step 1 : wff = id () |- ( ph → ph ) ;;
	step 2 : wff = iman () |- ( ( ph → ph ) ↔ ¬ ( ph ∧ ¬ ph ) ) ;;
	step 3 : wff = mpbi (step 1, step 2) |- ¬ ( ph ∧ ¬ ph ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *2.26 of [WhiteheadRussell] p. 104.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 23-Nov-2012.) */

theorem pm2.26 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ph ∨ ( ( ph → ps ) → ps ) ) ;;
}

proof of pm2.26 {
	step 1 : wff = pm2.27 () |- ( ph → ( ( ph → ps ) → ps ) ) ;;
	step 2 : wff = imori (step 1) |- ( ¬ ph ∨ ( ( ph → ps ) → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *5.11 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.11 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ∨ ( ¬ ph → ps ) ) ;;
}

proof of pm5.11 {
	step 1 : wff = pm2.5 () |- ( ¬ ( ph → ps ) → ( ¬ ph → ps ) ) ;;
	step 2 : wff = orri (step 1) |- ( ( ph → ps ) ∨ ( ¬ ph → ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *5.12 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.12 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ∨ ( ph → ¬ ps ) ) ;;
}

proof of pm5.12 {
	step 1 : wff = pm2.51 () |- ( ¬ ( ph → ps ) → ( ph → ¬ ps ) ) ;;
	step 2 : wff = orri (step 1) |- ( ( ph → ps ) ∨ ( ph → ¬ ps ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *5.14 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.14 (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ∨ ( ps → ch ) ) ;;
}

proof of pm5.14 {
	step 1 : wff = ax-1 () |- ( ps → ( ph → ps ) ) ;;
	step 2 : wff = con3i (step 1) |- ( ¬ ( ph → ps ) → ¬ ps ) ;;
	step 3 : wff = pm2.21d (step 2) |- ( ¬ ( ph → ps ) → ( ps → ch ) ) ;;
	step 4 : wff = orri (step 3) |- ( ( ph → ps ) ∨ ( ps → ch ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem *5.13 of [WhiteheadRussell] p. 123.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 14-Nov-2012.) */

theorem pm5.13 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph → ps ) ∨ ( ps → ph ) ) ;;
}

proof of pm5.13 {
	step 1 : wff = pm5.14 () |- ( ( ph → ps ) ∨ ( ps → ph ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Theorem *5.17 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 3-Jan-2013.) */

theorem pm5.17 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ∧ ¬ ( ph ∧ ps ) ) ↔ ( ph ↔ ¬ ps ) ) ;;
}

proof of pm5.17 {
	step 1 : wff = bicom () |- ( ( ph ↔ ¬ ps ) ↔ ( ¬ ps ↔ ph ) ) ;;
	step 2 : wff = dfbi2 () |- ( ( ¬ ps ↔ ph ) ↔ ( ( ¬ ps → ph ) ∧ ( ph → ¬ ps ) ) ) ;;
	step 3 : wff = orcom () |- ( ( ph ∨ ps ) ↔ ( ps ∨ ph ) ) ;;
	step 4 : wff = df-or () |- ( ( ps ∨ ph ) ↔ ( ¬ ps → ph ) ) ;;
	step 5 : wff = bitr2i (step 3, step 4) |- ( ( ¬ ps → ph ) ↔ ( ph ∨ ps ) ) ;;
	step 6 : wff = imnan () |- ( ( ph → ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
	step 7 : wff = anbi12i (step 5, step 6) |- ( ( ( ¬ ps → ph ) ∧ ( ph → ¬ ps ) ) ↔ ( ( ph ∨ ps ) ∧ ¬ ( ph ∧ ps ) ) ) ;;
	step 8 : wff = 3bitrri (step 1, step 2, step 7) |- ( ( ( ph ∨ ps ) ∧ ¬ ( ph ∧ ps ) ) ↔ ( ph ↔ ¬ ps ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Theorem *5.15 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 15-Oct-2013.) */

theorem pm5.15 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ps ) ∨ ( ph ↔ ¬ ps ) ) ;;
}

proof of pm5.15 {
	step 1 : wff = xor3 () |- ( ¬ ( ph ↔ ps ) ↔ ( ph ↔ ¬ ps ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ¬ ( ph ↔ ps ) → ( ph ↔ ¬ ps ) ) ;;
	step 3 : wff = orri (step 2) |- ( ( ph ↔ ps ) ∨ ( ph ↔ ¬ ps ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *5.16 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 17-Oct-2013.) */

theorem pm5.16 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ¬ ( ( ph ↔ ps ) ∧ ( ph ↔ ¬ ps ) ) ;;
}

proof of pm5.16 {
	step 1 : wff = pm5.18 () |- ( ( ph ↔ ps ) ↔ ¬ ( ph ↔ ¬ ps ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph ↔ ps ) → ¬ ( ph ↔ ¬ ps ) ) ;;
	step 3 : wff = imnan () |- ( ( ( ph ↔ ps ) → ¬ ( ph ↔ ¬ ps ) ) ↔ ¬ ( ( ph ↔ ps ) ∧ ( ph ↔ ¬ ps ) ) ) ;;
	step 4 : wff = mpbi (step 2, step 3) |- ¬ ( ( ph ↔ ps ) ∧ ( ph ↔ ¬ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Two ways to express "exclusive or."  Theorem *5.22 of [WhiteheadRussell]
     p. 124.  (Contributed by NM, 3-Jan-2005.)  (Proof shortened by Wolf
     Lammen, 22-Jan-2013.) */

theorem xor (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ↔ ps ) ↔ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ) ;;
}

proof of xor {
	step 1 : wff = iman () |- ( ( ph → ps ) ↔ ¬ ( ph ∧ ¬ ps ) ) ;;
	step 2 : wff = iman () |- ( ( ps → ph ) ↔ ¬ ( ps ∧ ¬ ph ) ) ;;
	step 3 : wff = anbi12i (step 1, step 2) |- ( ( ( ph → ps ) ∧ ( ps → ph ) ) ↔ ( ¬ ( ph ∧ ¬ ps ) ∧ ¬ ( ps ∧ ¬ ph ) ) ) ;;
	step 4 : wff = dfbi2 () |- ( ( ph ↔ ps ) ↔ ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	step 5 : wff = ioran () |- ( ¬ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ↔ ( ¬ ( ph ∧ ¬ ps ) ∧ ¬ ( ps ∧ ¬ ph ) ) ) ;;
	step 6 : wff = 3bitr4ri (step 3, step 4, step 5) |- ( ¬ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ↔ ( ph ↔ ps ) ) ;;
	step 7 : wff = con1bii (step 6) |- ( ¬ ( ph ↔ ps ) ↔ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Two ways to express "exclusive or."  (Contributed by NM, 3-Jan-2005.)
     (Proof shortened by Wolf Lammen, 24-Jan-2013.) */

theorem nbi2 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ph ↔ ps ) ↔ ( ( ph ∨ ps ) ∧ ¬ ( ph ∧ ps ) ) ) ;;
}

proof of nbi2 {
	step 1 : wff = xor3 () |- ( ¬ ( ph ↔ ps ) ↔ ( ph ↔ ¬ ps ) ) ;;
	step 2 : wff = pm5.17 () |- ( ( ( ph ∨ ps ) ∧ ¬ ( ph ∧ ps ) ) ↔ ( ph ↔ ¬ ps ) ) ;;
	step 3 : wff = bitr4i (step 1, step 2) |- ( ¬ ( ph ↔ ps ) ↔ ( ( ph ∨ ps ) ∧ ¬ ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* An alternate definition of the biconditional.  Theorem *5.23 of
     [WhiteheadRussell] p. 124.  (Contributed by NM, 27-Jun-2002.)  (Proof
     shortened by Wolf Lammen, 3-Nov-2013.) */

theorem dfbi3 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ph ↔ ps ) ↔ ( ( ph ∧ ps ) ∨ ( ¬ ph ∧ ¬ ps ) ) ) ;;
}

proof of dfbi3 {
	step 1 : wff = xor () |- ( ¬ ( ph ↔ ¬ ps ) ↔ ( ( ph ∧ ¬ ¬ ps ) ∨ ( ¬ ps ∧ ¬ ph ) ) ) ;;
	step 2 : wff = pm5.18 () |- ( ( ph ↔ ps ) ↔ ¬ ( ph ↔ ¬ ps ) ) ;;
	step 3 : wff = notnot () |- ( ps ↔ ¬ ¬ ps ) ;;
	step 4 : wff = anbi2i (step 3) |- ( ( ph ∧ ps ) ↔ ( ph ∧ ¬ ¬ ps ) ) ;;
	step 5 : wff = ancom () |- ( ( ¬ ph ∧ ¬ ps ) ↔ ( ¬ ps ∧ ¬ ph ) ) ;;
	step 6 : wff = orbi12i (step 4, step 5) |- ( ( ( ph ∧ ps ) ∨ ( ¬ ph ∧ ¬ ps ) ) ↔ ( ( ph ∧ ¬ ¬ ps ) ∨ ( ¬ ps ∧ ¬ ph ) ) ) ;;
	step 7 : wff = 3bitr4i (step 1, step 2, step 6) |- ( ( ph ↔ ps ) ↔ ( ( ph ∧ ps ) ∨ ( ¬ ph ∧ ¬ ps ) ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Theorem *5.24 of [WhiteheadRussell] p. 124.  (Contributed by NM,
     3-Jan-2005.) */

theorem pm5.24 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ¬ ( ( ph ∧ ps ) ∨ ( ¬ ph ∧ ¬ ps ) ) ↔ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ) ;;
}

proof of pm5.24 {
	step 1 : wff = xor () |- ( ¬ ( ph ↔ ps ) ↔ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ) ;;
	step 2 : wff = dfbi3 () |- ( ( ph ↔ ps ) ↔ ( ( ph ∧ ps ) ∨ ( ¬ ph ∧ ¬ ps ) ) ) ;;
	step 3 : wff = xchnxbi (step 1, step 2) |- ( ¬ ( ( ph ∧ ps ) ∨ ( ¬ ph ∧ ¬ ps ) ) ↔ ( ( ph ∧ ¬ ps ) ∨ ( ps ∧ ¬ ph ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Conjunction distributes over exclusive-or, using ` -. ( ph <-> ps ) ` to
     express exclusive-or.  This is one way to interpret the distributive law
     of multiplication over addition in modulo 2 arithmetic.  (Contributed by
     NM, 3-Oct-2008.) */

theorem xordi (ph : wff, ps : wff, ch : wff)  {
	prop 1 : wff = |- ( ( ph ∧ ¬ ( ps ↔ ch ) ) ↔ ¬ ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ) ;;
}

proof of xordi {
	step 1 : wff = annim () |- ( ( ph ∧ ¬ ( ps ↔ ch ) ) ↔ ¬ ( ph → ( ps ↔ ch ) ) ) ;;
	step 2 : wff = pm5.32 () |- ( ( ph → ( ps ↔ ch ) ) ↔ ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ) ;;
	step 3 : wff = xchbinx (step 1, step 2) |- ( ( ph ∧ ¬ ( ps ↔ ch ) ) ↔ ¬ ( ( ph ∧ ps ) ↔ ( ph ∧ ch ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* A wff disjoined with truth is true.  (Contributed by NM, 23-May-1999.) */

theorem biort (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ph → ( ph ↔ ( ph ∨ ps ) ) ) ;;
}

proof of biort {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = ax-1 () |- ( ph → ( ( ph ∨ ps ) → ph ) ) ;;
	step 3 : wff = impbid2 (step 1, step 2) |- ( ph → ( ph ↔ ( ph ∨ ps ) ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Theorem *5.55 of [WhiteheadRussell] p. 125.  (Contributed by NM,
     3-Jan-2005.)  (Proof shortened by Wolf Lammen, 20-Jan-2013.) */

theorem pm5.55 (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ∨ ps ) ↔ ph ) ∨ ( ( ph ∨ ps ) ↔ ps ) ) ;;
}

proof of pm5.55 {
	step 1 : wff = biort () |- ( ph → ( ph ↔ ( ph ∨ ps ) ) ) ;;
	step 2 : wff = bicomd (step 1) |- ( ph → ( ( ph ∨ ps ) ↔ ph ) ) ;;
	step 3 : wff = biorf () |- ( ¬ ph → ( ps ↔ ( ph ∨ ps ) ) ) ;;
	step 4 : wff = bicomd (step 3) |- ( ¬ ph → ( ( ph ∨ ps ) ↔ ps ) ) ;;
	step 5 : wff = nsyl4 (step 2, step 4) |- ( ¬ ( ( ph ∨ ps ) ↔ ps ) → ( ( ph ∨ ps ) ↔ ph ) ) ;;
	step 6 : wff = con1i (step 5) |- ( ¬ ( ( ph ∨ ps ) ↔ ph ) → ( ( ph ∨ ps ) ↔ ps ) ) ;;
	step 7 : wff = orri (step 6) |- ( ( ( ph ∨ ps ) ↔ ph ) ∨ ( ( ph ∨ ps ) ↔ ps ) ) ;;
	qed prop 1 = step 7 ;;
}


