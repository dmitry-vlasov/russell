import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Other_axiomatizations_of_classical_propositional_calculus/Derive_the_Lukasiewicz_axioms_from_Nicod_s_axiom.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Derive Nicod's Axiom from Lukasiewicz's First Sheffer Stroke Axiom

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/*This alternative axiom for propositional calculus using the Sheffer Stroke
     was offered by Lukasiewicz in his Selected Works.  It improves on Nicod's
     axiom by reducing its number of variables by one.

     This axiom also uses ~ nic-mp for its constructions.

     Here, the axiom is proved as a substitution instance of ~ nic-ax .
     (Contributed by Anthony Hart, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem lukshef-ax1 (ph : wff, ps : wff, ch : wff, th : wff)  {
	prop 1 : wff = |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
}

proof of lukshef-ax1 {
	step 1 : wff = nic-ax () |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	qed prop 1 = step 1 ;;
}

/*Lemma for ~ renicax .  (Contributed by NM, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem lukshefth1 (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ;;
}

proof of lukshefth1 {
	step 1 : wff = lukshef-ax1 () |- ( ( ph ⊼ ( ps ⊼ ch ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ;;
	step 2 : wff = lukshef-ax1 () |- ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ta ) ⊼ ( ( ta ⊼ th ) ⊼ ( ta ⊼ th ) ) ) ) ) ;;
	step 3 : wff = lukshef-ax1 () |- ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ta ) ⊼ ( ( ta ⊼ th ) ⊼ ( ta ⊼ th ) ) ) ) ) ⊼ ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ⊼ ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ) ) ) ;;
	step 4 : wff = nic-mp (step 2, step 3) |- ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ) ;;
	step 5 : wff = lukshef-ax1 () |- ( ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ) ⊼ ( ( ( ph ⊼ ( ps ⊼ ch ) ) ⊼ ( ( ph ⊼ ( ps ⊼ ch ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ) ⊼ ( ( ( ph ⊼ ( ps ⊼ ch ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ⊼ ( ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ⊼ ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ) ) ) ) ;;
	step 6 : wff = nic-mp (step 4, step 5) |- ( ( ( ph ⊼ ( ps ⊼ ch ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ) ) ⊼ ( ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ⊼ ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ) ) ;;
	step 7 : wff = nic-mp (step 1, step 6) |- ( ( ( ( ta ⊼ ps ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ps ⊼ ch ) ) ) ;;
	qed prop 1 = step 7 ;;
}

/*Lemma for ~ renicax .  (Contributed by NM, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem lukshefth2 (th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ta ⊼ th ) ⊼ ( ( th ⊼ ta ) ⊼ ( th ⊼ ta ) ) ) ;;
}

proof of lukshefth2 {
	var ph : wff, ps : wff, ch : wff;;
	step 1 : wff = lukshef-ax1 () |- ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ps ⊼ th ) ⊼ ( ps ⊼ th ) ) ) ) ) ;;
	step 2 : wff = lukshef-ax1 () |- ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ps ⊼ th ) ⊼ ( ps ⊼ th ) ) ) ) ) ⊼ ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ) ) ;;
	step 3 : wff = nic-mp (step 1, step 2) |- ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ;;
	step 4 : wff = lukshefth1 () |- ( ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ph ⊼ ph ) ) ) ;;
	step 5 : wff = lukshef-ax1 () |- ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ph ⊼ ( ph ⊼ ph ) ) ⊼ ( ( ph ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ⊼ ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ph ) ⊼ ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ph ) ) ) ) ) ;;
	step 6 : wff = lukshef-ax1 () |- ( ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ph ⊼ ( ph ⊼ ph ) ) ⊼ ( ( ph ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ⊼ ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ph ) ⊼ ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ph ) ) ) ) ) ⊼ ( ( ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ) ) ⊼ ( ( ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ph ⊼ ph ) ) ) ⊼ ( ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ) ⊼ ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ) ) ) ) ) ;;
	step 7 : wff = nic-mp (step 5, step 6) |- ( ( ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ph ⊼ ( ph ⊼ ph ) ) ) ⊼ ( ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ) ⊼ ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ) ) ) ;;
	step 8 : wff = nic-mp (step 4, step 7) |- ( ( ( th ⊼ ( th ⊼ ( th ⊼ th ) ) ) ⊼ ( ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ⊼ ( ( ps ⊼ ( ch ⊼ ph ) ) ⊼ th ) ) ) ⊼ ( ( ( ta ⊼ ph ) ⊼ ( ( ph ⊼ ta ) ⊼ ( ph ⊼ ta ) ) ) ⊼ ( th ⊼ ( th ⊼ th ) ) ) ) ;;
	step 9 : wff = nic-mp (step 3, step 8) |- ( th ⊼ ( th ⊼ th ) ) ;;
	step 10 : wff = lukshef-ax1 () |- ( ( th ⊼ ( th ⊼ th ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( ta ⊼ th ) ⊼ ( ( th ⊼ ta ) ⊼ ( th ⊼ ta ) ) ) ) ) ;;
	step 11 : wff = nic-mp (step 9, step 10) |- ( ( ta ⊼ th ) ⊼ ( ( th ⊼ ta ) ⊼ ( th ⊼ ta ) ) ) ;;
	qed prop 1 = step 11 ;;
}

/*A rederivation of ~ nic-ax from ~ lukshef-ax1 , proving that ~ lukshef-ax1
     with ~ nic-mp can be used as a complete axiomatization of propositional
     calculus.  (Contributed by Anthony Hart, 31-Jul-2011.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem renicax (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
}

proof of renicax {
	step 1 : wff = lukshefth1 () |- ( ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ;;
	step 2 : wff = lukshefth2 () |- ( ( ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ⊼ ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ⊼ ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ) ) ;;
	step 3 : wff = nic-mp (step 1, step 2) |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ;;
	step 4 : wff = lukshefth2 () |- ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ) ;;
	step 5 : wff = lukshef-ax1 () |- ( ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ) ⊼ ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ) ⊼ ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ⊼ ( ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ⊼ ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ) ) ) ) ;;
	step 6 : wff = nic-mp (step 4, step 5) |- ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ⊼ ( ta ⊼ ( ta ⊼ ta ) ) ) ) ⊼ ( ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ⊼ ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ) ) ;;
	step 7 : wff = nic-mp (step 3, step 6) |- ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ;;
	step 8 : wff = lukshefth2 () |- ( ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ⊼ ( ph ⊼ ( ch ⊼ ps ) ) ) ⊼ ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ⊼ ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ) ) ;;
	step 9 : wff = nic-mp (step 7, step 8) |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	qed prop 1 = step 9 ;;
}


