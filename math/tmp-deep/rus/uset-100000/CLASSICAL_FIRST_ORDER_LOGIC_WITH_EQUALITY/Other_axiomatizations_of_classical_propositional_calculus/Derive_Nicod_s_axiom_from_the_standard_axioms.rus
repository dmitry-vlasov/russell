import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Other_axiomatizations_of_classical_propositional_calculus/Derive_the_standard_axioms_from_the_Lukasiewicz_axioms.rus;;

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
           Derive Nicod's axiom from the standard axioms

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Prove Nicod's axiom and implication and negation definitions.

*/

/*Define implication in terms of 'nand'.  Analogous to
     ` ( ( ph -/\ ( ps -/\ ps ) ) <-> ( ph -> ps ) ) ` .  In a pure
     (standalone) treatment of Nicod's axiom, this theorem would be changed to
     a definition ($a statement).  (Contributed by NM, 11-Dec-2008.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem nic-dfim (ph : wff, ps : wff)  {
	prop 1 : wff = |- ( ( ( ph ⊼ ( ps ⊼ ps ) ) ⊼ ( ph → ps ) ) ⊼ ( ( ( ph ⊼ ( ps ⊼ ps ) ) ⊼ ( ph ⊼ ( ps ⊼ ps ) ) ) ⊼ ( ( ph → ps ) ⊼ ( ph → ps ) ) ) ) ;;
}

proof of nic-dfim {
	step 1 : wff = nanim () |- ( ( ph → ps ) ↔ ( ph ⊼ ( ps ⊼ ps ) ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ph ⊼ ( ps ⊼ ps ) ) ↔ ( ph → ps ) ) ;;
	step 3 : wff = nanbi () |- ( ( ( ph ⊼ ( ps ⊼ ps ) ) ↔ ( ph → ps ) ) ↔ ( ( ( ph ⊼ ( ps ⊼ ps ) ) ⊼ ( ph → ps ) ) ⊼ ( ( ( ph ⊼ ( ps ⊼ ps ) ) ⊼ ( ph ⊼ ( ps ⊼ ps ) ) ) ⊼ ( ( ph → ps ) ⊼ ( ph → ps ) ) ) ) ) ;;
	step 4 : wff = mpbi (step 2, step 3) |- ( ( ( ph ⊼ ( ps ⊼ ps ) ) ⊼ ( ph → ps ) ) ⊼ ( ( ( ph ⊼ ( ps ⊼ ps ) ) ⊼ ( ph ⊼ ( ps ⊼ ps ) ) ) ⊼ ( ( ph → ps ) ⊼ ( ph → ps ) ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Define negation in terms of 'nand'.  Analogous to
     ` ( ( ph -/\ ph ) <-> -. ph ) ` .  In a pure (standalone) treatment of
     Nicod's axiom, this theorem would be changed to a definition ($a
     statement).  (Contributed by NM, 11-Dec-2008.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem nic-dfneg (ph : wff)  {
	prop 1 : wff = |- ( ( ( ph ⊼ ph ) ⊼ ¬ ph ) ⊼ ( ( ( ph ⊼ ph ) ⊼ ( ph ⊼ ph ) ) ⊼ ( ¬ ph ⊼ ¬ ph ) ) ) ;;
}

proof of nic-dfneg {
	step 1 : wff = nannot () |- ( ¬ ph ↔ ( ph ⊼ ph ) ) ;;
	step 2 : wff = bicomi (step 1) |- ( ( ph ⊼ ph ) ↔ ¬ ph ) ;;
	step 3 : wff = nanbi () |- ( ( ( ph ⊼ ph ) ↔ ¬ ph ) ↔ ( ( ( ph ⊼ ph ) ⊼ ¬ ph ) ⊼ ( ( ( ph ⊼ ph ) ⊼ ( ph ⊼ ph ) ) ⊼ ( ¬ ph ⊼ ¬ ph ) ) ) ) ;;
	step 4 : wff = mpbi (step 2, step 3) |- ( ( ( ph ⊼ ph ) ⊼ ¬ ph ) ⊼ ( ( ( ph ⊼ ph ) ⊼ ( ph ⊼ ph ) ) ⊼ ( ¬ ph ⊼ ¬ ph ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/*Minor premise. */

/*Major premise. */

/*Derive Nicod's rule of modus ponens using 'nand', from the standard
       one.  Although the major and minor premise together also imply ` ch ` ,
       this form is necessary for useful derivations from ~ nic-ax .  In a pure
       (standalone) treatment of Nicod's axiom, this theorem would be changed
       to an axiom ($a statement).  (Contributed by Jeff Hoffman,
       19-Nov-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) */

theorem nic-mp (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ph ⊼ ( ch ⊼ ps ) ) ;;
	-----------------------
	prop 1 : wff = |- ps ;;
}

proof of nic-mp {
	step 1 : wff = nannan () |- ( ( ph ⊼ ( ch ⊼ ps ) ) ↔ ( ph → ( ch ∧ ps ) ) ) ;;
	step 2 : wff = mpbi (hyp 2, step 1) |- ( ph → ( ch ∧ ps ) ) ;;
	step 3 : wff = simprd (step 2) |- ( ph → ps ) ;;
	step 4 : wff = ax-mp (hyp 1, step 3) |- ps ;;
	qed prop 1 = step 4 ;;
}

/*A direct proof of ~ nic-mp .  (Contributed by NM, 30-Dec-2008.)
       (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem nic-mpALT (ph : wff, ps : wff, ch : wff)  {
	hyp 1 : wff = |- ph ;;
	hyp 2 : wff = |- ( ph ⊼ ( ch ⊼ ps ) ) ;;
	-----------------------
	prop 1 : wff = |- ps ;;
}

proof of nic-mpALT {
	step 1 : wff = df-nan () |- ( ( ph ⊼ ( ch ⊼ ps ) ) ↔ ¬ ( ph ∧ ( ch ⊼ ps ) ) ) ;;
	step 2 : wff = df-nan () |- ( ( ch ⊼ ps ) ↔ ¬ ( ch ∧ ps ) ) ;;
	step 3 : wff = anbi2i (step 2) |- ( ( ph ∧ ( ch ⊼ ps ) ) ↔ ( ph ∧ ¬ ( ch ∧ ps ) ) ) ;;
	step 4 : wff = xchbinx (step 1, step 3) |- ( ( ph ⊼ ( ch ⊼ ps ) ) ↔ ¬ ( ph ∧ ¬ ( ch ∧ ps ) ) ) ;;
	step 5 : wff = mpbi (hyp 2, step 4) |- ¬ ( ph ∧ ¬ ( ch ∧ ps ) ) ;;
	step 6 : wff = iman () |- ( ( ph → ( ch ∧ ps ) ) ↔ ¬ ( ph ∧ ¬ ( ch ∧ ps ) ) ) ;;
	step 7 : wff = mpbir (step 5, step 6) |- ( ph → ( ch ∧ ps ) ) ;;
	step 8 : wff = simprd (step 7) |- ( ph → ps ) ;;
	step 9 : wff = ax-mp (hyp 1, step 8) |- ps ;;
	qed prop 1 = step 9 ;;
}

/*Nicod's axiom derived from the standard ones.  See _Intro. to Math.
     Phil._ by B. Russell, p. 152.  Like ~ meredith , the usual axioms can be
     derived from this and vice versa.  Unlike ~ meredith , Nicod uses a
     different connective ('nand'), so another form of modus ponens must be
     used in proofs, e.g. ` { ` ~ nic-ax , ~ nic-mp ` } ` is equivalent to
     ` { ` ~ luk-1 , ~ luk-2 , ~ luk-3 , ~ ax-mp ` } ` .  In a pure
     (standalone) treatment of Nicod's axiom, this theorem would be changed to
     an axiom ($a statement).  (Contributed by Jeff Hoffman, 19-Nov-2007.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem nic-ax (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
}

proof of nic-ax {
	step 1 : wff = nannan () |- ( ( ph ⊼ ( ch ⊼ ps ) ) ↔ ( ph → ( ch ∧ ps ) ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ( ph ⊼ ( ch ⊼ ps ) ) → ( ph → ( ch ∧ ps ) ) ) ;;
	step 3 : wff = simpl () |- ( ( ch ∧ ps ) → ch ) ;;
	step 4 : wff = imim2i (step 3) |- ( ( ph → ( ch ∧ ps ) ) → ( ph → ch ) ) ;;
	step 5 : wff = imnan () |- ( ( th → ¬ ch ) ↔ ¬ ( th ∧ ch ) ) ;;
	step 6 : wff = df-nan () |- ( ( th ⊼ ch ) ↔ ¬ ( th ∧ ch ) ) ;;
	step 7 : wff = bitr4i (step 5, step 6) |- ( ( th → ¬ ch ) ↔ ( th ⊼ ch ) ) ;;
	step 8 : wff = con3 () |- ( ( ph → ch ) → ( ¬ ch → ¬ ph ) ) ;;
	step 9 : wff = imim2d (step 8) |- ( ( ph → ch ) → ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ;;
	step 10 : wff = imnan () |- ( ( ph → ¬ th ) ↔ ¬ ( ph ∧ th ) ) ;;
	step 11 : wff = con2b () |- ( ( th → ¬ ph ) ↔ ( ph → ¬ th ) ) ;;
	step 12 : wff = df-nan () |- ( ( ph ⊼ th ) ↔ ¬ ( ph ∧ th ) ) ;;
	step 13 : wff = 3bitr4ri (step 10, step 11, step 12) |- ( ( ph ⊼ th ) ↔ ( th → ¬ ph ) ) ;;
	step 14 : wff = syl6ibr (step 9, step 13) |- ( ( ph → ch ) → ( ( th → ¬ ch ) → ( ph ⊼ th ) ) ) ;;
	step 15 : wff = syl5bir (step 7, step 14) |- ( ( ph → ch ) → ( ( th ⊼ ch ) → ( ph ⊼ th ) ) ) ;;
	step 16 : wff = nanim () |- ( ( ( th ⊼ ch ) → ( ph ⊼ th ) ) ↔ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ;;
	step 17 : wff = sylib (step 15, step 16) |- ( ( ph → ch ) → ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ;;
	step 18 : wff = 3syl (step 2, step 4, step 17) |- ( ( ph ⊼ ( ch ⊼ ps ) ) → ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ;;
	step 19 : wff = pm4.24 () |- ( ta ↔ ( ta ∧ ta ) ) ;;
	step 20 : wff = biimpi (step 19) |- ( ta → ( ta ∧ ta ) ) ;;
	step 21 : wff = nannan () |- ( ( ta ⊼ ( ta ⊼ ta ) ) ↔ ( ta → ( ta ∧ ta ) ) ) ;;
	step 22 : wff = mpbir (step 20, step 21) |- ( ta ⊼ ( ta ⊼ ta ) ) ;;
	step 23 : wff = jctil (step 18, step 22) |- ( ( ph ⊼ ( ch ⊼ ps ) ) → ( ( ta ⊼ ( ta ⊼ ta ) ) ∧ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	step 24 : wff = nannan () |- ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ↔ ( ( ph ⊼ ( ch ⊼ ps ) ) → ( ( ta ⊼ ( ta ⊼ ta ) ) ∧ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ) ;;
	step 25 : wff = mpbir (step 23, step 24) |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	qed prop 1 = step 25 ;;
}

/*A direct proof of ~ nic-ax .  (Contributed by NM, 11-Dec-2008.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem nic-axALT (ph : wff, ps : wff, ch : wff, th : wff, ta : wff)  {
	prop 1 : wff = |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
}

proof of nic-axALT {
	step 1 : wff = simpl () |- ( ( ch ∧ ps ) → ch ) ;;
	step 2 : wff = imim2i (step 1) |- ( ( ph → ( ch ∧ ps ) ) → ( ph → ch ) ) ;;
	step 3 : wff = con3 () |- ( ( ph → ch ) → ( ¬ ch → ¬ ph ) ) ;;
	step 4 : wff = imim2d (step 3) |- ( ( ph → ch ) → ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ;;
	step 5 : wff = syl (step 2, step 4) |- ( ( ph → ( ch ∧ ps ) ) → ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ;;
	step 6 : wff = anidm () |- ( ( ta ∧ ta ) ↔ ta ) ;;
	step 7 : wff = biimpri (step 6) |- ( ta → ( ta ∧ ta ) ) ;;
	step 8 : wff = jctil (step 5, step 7) |- ( ( ph → ( ch ∧ ps ) ) → ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ;;
	step 9 : wff = df-nan () |- ( ( ch ⊼ ps ) ↔ ¬ ( ch ∧ ps ) ) ;;
	step 10 : wff = anbi2i (step 9) |- ( ( ph ∧ ( ch ⊼ ps ) ) ↔ ( ph ∧ ¬ ( ch ∧ ps ) ) ) ;;
	step 11 : wff = notbii (step 10) |- ( ¬ ( ph ∧ ( ch ⊼ ps ) ) ↔ ¬ ( ph ∧ ¬ ( ch ∧ ps ) ) ) ;;
	step 12 : wff = df-nan () |- ( ( ph ⊼ ( ch ⊼ ps ) ) ↔ ¬ ( ph ∧ ( ch ⊼ ps ) ) ) ;;
	step 13 : wff = iman () |- ( ( ph → ( ch ∧ ps ) ) ↔ ¬ ( ph ∧ ¬ ( ch ∧ ps ) ) ) ;;
	step 14 : wff = 3bitr4i (step 11, step 12, step 13) |- ( ( ph ⊼ ( ch ⊼ ps ) ) ↔ ( ph → ( ch ∧ ps ) ) ) ;;
	step 15 : wff = df-nan () |- ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ↔ ¬ ( ( ta ⊼ ( ta ⊼ ta ) ) ∧ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	step 16 : wff = df-nan () |- ( ( ta ⊼ ta ) ↔ ¬ ( ta ∧ ta ) ) ;;
	step 17 : wff = anbi2i (step 16) |- ( ( ta ∧ ( ta ⊼ ta ) ) ↔ ( ta ∧ ¬ ( ta ∧ ta ) ) ) ;;
	step 18 : wff = notbii (step 17) |- ( ¬ ( ta ∧ ( ta ⊼ ta ) ) ↔ ¬ ( ta ∧ ¬ ( ta ∧ ta ) ) ) ;;
	step 19 : wff = df-nan () |- ( ( ta ⊼ ( ta ⊼ ta ) ) ↔ ¬ ( ta ∧ ( ta ⊼ ta ) ) ) ;;
	step 20 : wff = iman () |- ( ( ta → ( ta ∧ ta ) ) ↔ ¬ ( ta ∧ ¬ ( ta ∧ ta ) ) ) ;;
	step 21 : wff = 3bitr4i (step 18, step 19, step 20) |- ( ( ta ⊼ ( ta ⊼ ta ) ) ↔ ( ta → ( ta ∧ ta ) ) ) ;;
	step 22 : wff = df-nan () |- ( ( th ⊼ ch ) ↔ ¬ ( th ∧ ch ) ) ;;
	step 23 : wff = imnan () |- ( ( th → ¬ ch ) ↔ ¬ ( th ∧ ch ) ) ;;
	step 24 : wff = bitr4i (step 22, step 23) |- ( ( th ⊼ ch ) ↔ ( th → ¬ ch ) ) ;;
	step 25 : wff = df-nan () |- ( ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ↔ ¬ ( ( ph ⊼ th ) ∧ ( ph ⊼ th ) ) ) ;;
	step 26 : wff = anidm () |- ( ( ( ph ⊼ th ) ∧ ( ph ⊼ th ) ) ↔ ( ph ⊼ th ) ) ;;
	step 27 : wff = df-nan () |- ( ( ph ⊼ th ) ↔ ¬ ( ph ∧ th ) ) ;;
	step 28 : wff = imnan () |- ( ( ph → ¬ th ) ↔ ¬ ( ph ∧ th ) ) ;;
	step 29 : wff = con2b () |- ( ( ph → ¬ th ) ↔ ( th → ¬ ph ) ) ;;
	step 30 : wff = bitr3i (step 28, step 29) |- ( ¬ ( ph ∧ th ) ↔ ( th → ¬ ph ) ) ;;
	step 31 : wff = 3bitri (step 26, step 27, step 30) |- ( ( ( ph ⊼ th ) ∧ ( ph ⊼ th ) ) ↔ ( th → ¬ ph ) ) ;;
	step 32 : wff = xchbinx (step 25, step 31) |- ( ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ↔ ¬ ( th → ¬ ph ) ) ;;
	step 33 : wff = anbi12i (step 24, step 32) |- ( ( ( th ⊼ ch ) ∧ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ↔ ( ( th → ¬ ch ) ∧ ¬ ( th → ¬ ph ) ) ) ;;
	step 34 : wff = notbii (step 33) |- ( ¬ ( ( th ⊼ ch ) ∧ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ↔ ¬ ( ( th → ¬ ch ) ∧ ¬ ( th → ¬ ph ) ) ) ;;
	step 35 : wff = df-nan () |- ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ↔ ¬ ( ( th ⊼ ch ) ∧ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ;;
	step 36 : wff = iman () |- ( ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ↔ ¬ ( ( th → ¬ ch ) ∧ ¬ ( th → ¬ ph ) ) ) ;;
	step 37 : wff = 3bitr4i (step 34, step 35, step 36) |- ( ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ↔ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ;;
	step 38 : wff = anbi12i (step 21, step 37) |- ( ( ( ta ⊼ ( ta ⊼ ta ) ) ∧ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ↔ ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ;;
	step 39 : wff = xchbinx (step 15, step 38) |- ( ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ↔ ¬ ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ;;
	step 40 : wff = anbi12i (step 14, step 39) |- ( ( ( ph ⊼ ( ch ⊼ ps ) ) ∧ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ↔ ( ( ph → ( ch ∧ ps ) ) ∧ ¬ ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ) ;;
	step 41 : wff = notbii (step 40) |- ( ¬ ( ( ph ⊼ ( ch ⊼ ps ) ) ∧ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ↔ ¬ ( ( ph → ( ch ∧ ps ) ) ∧ ¬ ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ) ;;
	step 42 : wff = iman () |- ( ( ( ph → ( ch ∧ ps ) ) → ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ↔ ¬ ( ( ph → ( ch ∧ ps ) ) ∧ ¬ ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ) ;;
	step 43 : wff = bitr4i (step 41, step 42) |- ( ¬ ( ( ph ⊼ ( ch ⊼ ps ) ) ∧ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ↔ ( ( ph → ( ch ∧ ps ) ) → ( ( ta → ( ta ∧ ta ) ) ∧ ( ( th → ¬ ch ) → ( th → ¬ ph ) ) ) ) ) ;;
	step 44 : wff = mpbir (step 8, step 43) |- ¬ ( ( ph ⊼ ( ch ⊼ ps ) ) ∧ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	step 45 : wff = df-nan () |- ( ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ↔ ¬ ( ( ph ⊼ ( ch ⊼ ps ) ) ∧ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ) ;;
	step 46 : wff = mpbir (step 44, step 45) |- ( ( ph ⊼ ( ch ⊼ ps ) ) ⊼ ( ( ta ⊼ ( ta ⊼ ta ) ) ⊼ ( ( th ⊼ ch ) ⊼ ( ( ph ⊼ th ) ⊼ ( ph ⊼ th ) ) ) ) ) ;;
	qed prop 1 = step 46 ;;
}


