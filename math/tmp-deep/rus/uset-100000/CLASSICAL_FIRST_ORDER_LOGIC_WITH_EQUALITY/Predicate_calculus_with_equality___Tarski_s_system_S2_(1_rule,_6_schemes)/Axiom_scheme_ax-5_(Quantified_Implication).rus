import uset-100000/CLASSICAL_FIRST_ORDER_LOGIC_WITH_EQUALITY/Predicate_calculus_with_equality___Tarski_s_system_S2_(1_rule,_6_schemes)/Rule_scheme_ax-gen_(Generalization).rus;;

/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
         Axiom scheme ax-5 (Quantified Implication)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*/

/* Axiom of Quantified Implication.  Axiom C4 of [Monk2] p. 105.
     (Contributed by NM, 5-Aug-1993.) */

axiom ax-5 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph → ps ) → ( ∀ x ph → ∀ x ps ) ) ;;
}

/* Theorem 19.20 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by O'Cat, 30-Mar-2008.) */

theorem alim (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph → ps ) → ( ∀ x ph → ∀ x ps ) ) ;;
}

proof of alim {
	step 1 : wff = ax-5 () |- ( ∀ x ( ph → ps ) → ( ∀ x ph → ∀ x ps ) ) ;;
	qed prop 1 = step 1 ;;
}

/* Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 5-Aug-1993.) */

theorem alimi (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ph → ∀ x ps ) ;;
}

proof of alimi {
	step 1 : wff = ax-5 () |- ( ∀ x ( ph → ps ) → ( ∀ x ph → ∀ x ps ) ) ;;
	step 2 : wff = mpg (step 1, hyp 1) |- ( ∀ x ph → ∀ x ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference doubly quantifying both antecedent and consequent.
       (Contributed by NM, 3-Feb-2005.) */

theorem 2alimi (ph : wff, ps : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ∀ y ph → ∀ x ∀ y ps ) ;;
}

proof of 2alimi {
	step 1 : wff = alimi (hyp 1) |- ( ∀ y ph → ∀ y ps ) ;;
	step 2 : wff = alimi (step 1) |- ( ∀ x ∀ y ph → ∀ x ∀ y ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference quantifying antecedent, nested antecedent, and consequent.
       (Contributed by NM, 5-Aug-1993.) */

theorem al2imi (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ph → ( ∀ x ps → ∀ x ch ) ) ;;
}

proof of al2imi {
	step 1 : wff = alimi (hyp 1) |- ( ∀ x ph → ∀ x ( ps → ch ) ) ;;
	step 2 : wff = alim () |- ( ∀ x ( ps → ch ) → ( ∀ x ps → ∀ x ch ) ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ∀ x ph → ( ∀ x ps → ∀ x ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Variant of ~ al2imi with conjunctive antecedent.  (Contributed by Andrew
       Salmon, 8-Jun-2011.) */

theorem alanimi (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ( ph ∧ ps ) → ch ) ;;
	-----------------------
	prop 1 : wff = |- ( ( ∀ x ph ∧ ∀ x ps ) → ∀ x ch ) ;;
}

proof of alanimi {
	step 1 : wff = ex (hyp 1) |- ( ph → ( ps → ch ) ) ;;
	step 2 : wff = al2imi (step 1) |- ( ∀ x ph → ( ∀ x ps → ∀ x ch ) ) ;;
	step 3 : wff = imp (step 2) |- ( ( ∀ x ph ∧ ∀ x ps ) → ∀ x ch ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction from Theorem 19.20 of [Margaris] p. 90.  (Contributed by NM,
       4-Jan-2002.) */

theorem alimdh (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ∀ x ps → ∀ x ch ) ) ;;
}

proof of alimdh {
	step 1 : wff = al2imi (hyp 2) |- ( ∀ x ph → ( ∀ x ps → ∀ x ch ) ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ( ∀ x ps → ∀ x ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem 19.15 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.) */

theorem albi (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph ↔ ps ) → ( ∀ x ph ↔ ∀ x ps ) ) ;;
}

proof of albi {
	step 1 : wff = bi1 () |- ( ( ph ↔ ps ) → ( ph → ps ) ) ;;
	step 2 : wff = al2imi (step 1) |- ( ∀ x ( ph ↔ ps ) → ( ∀ x ph → ∀ x ps ) ) ;;
	step 3 : wff = bi2 () |- ( ( ph ↔ ps ) → ( ps → ph ) ) ;;
	step 4 : wff = al2imi (step 3) |- ( ∀ x ( ph ↔ ps ) → ( ∀ x ps → ∀ x ph ) ) ;;
	step 5 : wff = impbid (step 2, step 4) |- ( ∀ x ( ph ↔ ps ) → ( ∀ x ph ↔ ∀ x ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Inference from Theorem 19.21 of [Margaris] p. 90.  (Contributed by NM,
       5-Aug-1993.) */

theorem alrimih (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ∀ x ps ) ;;
}

proof of alrimih {
	step 1 : wff = alimi (hyp 2) |- ( ∀ x ph → ∀ x ps ) ;;
	step 2 : wff = syl (hyp 1, step 1) |- ( ph → ∀ x ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding universal quantifier to both sides of an equivalence.
       (Contributed by NM, 7-Aug-1994.) */

theorem albii (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ph ↔ ∀ x ps ) ;;
}

proof of albii {
	step 1 : wff = albi () |- ( ∀ x ( ph ↔ ps ) → ( ∀ x ph ↔ ∀ x ps ) ) ;;
	step 2 : wff = mpg (step 1, hyp 1) |- ( ∀ x ph ↔ ∀ x ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem albii is the congruence law for universal quantification. */

/* $j congruence 'albii'; */

/* Inference adding two universal quantifiers to both sides of an
       equivalence.  (Contributed by NM, 9-Mar-1997.) */

theorem 2albii (ph : wff, ps : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ∀ y ph ↔ ∀ x ∀ y ps ) ;;
}

proof of 2albii {
	step 1 : wff = albii (hyp 1) |- ( ∀ y ph ↔ ∀ y ps ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ∀ y ph ↔ ∀ x ∀ y ps ) ;;
	qed prop 1 = step 2 ;;
}

/* A utility lemma to transfer a bound-variable hypothesis builder into a
       definition.  See ~ hbxfreq for equality version.  (Contributed by
       Jonathan Ben-Naim, 3-Jun-2011.) */

theorem hbxfrbi (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ps → ∀ x ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ∀ x ph ) ;;
}

proof of hbxfrbi {
	step 1 : wff = albii (hyp 1) |- ( ∀ x ph ↔ ∀ x ps ) ;;
	step 2 : wff = 3imtr4i (hyp 2, hyp 1, step 1) |- ( ph → ∀ x ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Equality theorem for not-free.  (Contributed by Mario Carneiro,
       11-Aug-2016.) */

theorem nfbii (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( F/ x ph ↔ F/ x ps ) ;;
}

proof of nfbii {
	step 1 : wff = albii (hyp 1) |- ( ∀ x ph ↔ ∀ x ps ) ;;
	step 2 : wff = imbi12i (hyp 1, step 1) |- ( ( ph → ∀ x ph ) ↔ ( ps → ∀ x ps ) ) ;;
	step 3 : wff = albii (step 2) |- ( ∀ x ( ph → ∀ x ph ) ↔ ∀ x ( ps → ∀ x ps ) ) ;;
	step 4 : wff = df-nf () |- ( F/ x ph ↔ ∀ x ( ph → ∀ x ph ) ) ;;
	step 5 : wff = df-nf () |- ( F/ x ps ↔ ∀ x ( ps → ∀ x ps ) ) ;;
	step 6 : wff = 3bitr4i (step 3, step 4, step 5) |- ( F/ x ph ↔ F/ x ps ) ;;
	qed prop 1 = step 6 ;;
}

/* A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 11-Aug-2016.) */

theorem nfxfr (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- F/ x ps ;;
	-----------------------
	prop 1 : wff = |- F/ x ph ;;
}

proof of nfxfr {
	step 1 : wff = nfbii (hyp 1) |- ( F/ x ph ↔ F/ x ps ) ;;
	step 2 : wff = mpbir (hyp 2, step 1) |- F/ x ph ;;
	qed prop 1 = step 2 ;;
}

/* A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 24-Sep-2016.) */

theorem nfxfrd (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	hyp 2 : wff = |- ( ch → F/ x ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ch → F/ x ph ) ;;
}

proof of nfxfrd {
	step 1 : wff = nfbii (hyp 1) |- ( F/ x ph ↔ F/ x ps ) ;;
	step 2 : wff = sylibr (hyp 2, step 1) |- ( ch → F/ x ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem 19.6 of [Margaris] p. 89.  (Contributed by NM, 5-Aug-1993.) */

theorem alex (ph : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ph ↔ ¬ ∃ x ¬ ph ) ;;
}

proof of alex {
	step 1 : wff = notnot () |- ( ph ↔ ¬ ¬ ph ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ph ↔ ∀ x ¬ ¬ ph ) ;;
	step 3 : wff = alnex () |- ( ∀ x ¬ ¬ ph ↔ ¬ ∃ x ¬ ph ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ph ↔ ¬ ∃ x ¬ ph ) ;;
	qed prop 1 = step 4 ;;
}

/* Part of theorem *11.5 in [WhiteheadRussell] p. 164.  (Contributed by
     Andrew Salmon, 24-May-2011.) */

theorem 2nalexn (ph : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ¬ ∀ x ∀ y ph ↔ ∃ x ∃ y ¬ ph ) ;;
}

proof of 2nalexn {
	step 1 : wff = df-ex () |- ( ∃ x ∃ y ¬ ph ↔ ¬ ∀ x ¬ ∃ y ¬ ph ) ;;
	step 2 : wff = alex () |- ( ∀ y ph ↔ ¬ ∃ y ¬ ph ) ;;
	step 3 : wff = albii (step 2) |- ( ∀ x ∀ y ph ↔ ∀ x ¬ ∃ y ¬ ph ) ;;
	step 4 : wff = xchbinxr (step 1, step 3) |- ( ∃ x ∃ y ¬ ph ↔ ¬ ∀ x ∀ y ph ) ;;
	step 5 : wff = bicomi (step 4) |- ( ¬ ∀ x ∀ y ph ↔ ∃ x ∃ y ¬ ph ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem 19.14 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.) */

theorem exnal (ph : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ¬ ph ↔ ¬ ∀ x ph ) ;;
}

proof of exnal {
	step 1 : wff = alex () |- ( ∀ x ph ↔ ¬ ∃ x ¬ ph ) ;;
	step 2 : wff = con2bii (step 1) |- ( ∃ x ¬ ph ↔ ¬ ∀ x ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem 19.22 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Wolf Lammen, 4-Jul-2014.) */

theorem exim (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph → ps ) → ( ∃ x ph → ∃ x ps ) ) ;;
}

proof of exim {
	step 1 : wff = con3 () |- ( ( ph → ps ) → ( ¬ ps → ¬ ph ) ) ;;
	step 2 : wff = al2imi (step 1) |- ( ∀ x ( ph → ps ) → ( ∀ x ¬ ps → ∀ x ¬ ph ) ) ;;
	step 3 : wff = alnex () |- ( ∀ x ¬ ps ↔ ¬ ∃ x ps ) ;;
	step 4 : wff = alnex () |- ( ∀ x ¬ ph ↔ ¬ ∃ x ph ) ;;
	step 5 : wff = 3imtr3g (step 2, step 3, step 4) |- ( ∀ x ( ph → ps ) → ( ¬ ∃ x ps → ¬ ∃ x ph ) ) ;;
	step 6 : wff = con4d (step 5) |- ( ∀ x ( ph → ps ) → ( ∃ x ph → ∃ x ps ) ) ;;
	qed prop 1 = step 6 ;;
}

/* Inference adding existential quantifier to antecedent and consequent.
       (Contributed by NM, 5-Aug-1993.) */

theorem eximi (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∃ x ph → ∃ x ps ) ;;
}

proof of eximi {
	step 1 : wff = exim () |- ( ∀ x ( ph → ps ) → ( ∃ x ph → ∃ x ps ) ) ;;
	step 2 : wff = mpg (step 1, hyp 1) |- ( ∃ x ph → ∃ x ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding two existential quantifiers to antecedent and
       consequent.  (Contributed by NM, 3-Feb-2005.) */

theorem 2eximi (ph : wff, ps : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∃ x ∃ y ph → ∃ x ∃ y ps ) ;;
}

proof of 2eximi {
	step 1 : wff = eximi (hyp 1) |- ( ∃ y ph → ∃ y ps ) ;;
	step 2 : wff = eximi (step 1) |- ( ∃ x ∃ y ph → ∃ x ∃ y ps ) ;;
	qed prop 1 = step 2 ;;
}

/* A transformation of quantifiers and logical connectives.  (Contributed by
     NM, 19-Aug-1993.) */

theorem alinexa (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph → ¬ ps ) ↔ ¬ ∃ x ( ph ∧ ps ) ) ;;
}

proof of alinexa {
	step 1 : wff = imnan () |- ( ( ph → ¬ ps ) ↔ ¬ ( ph ∧ ps ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ( ph → ¬ ps ) ↔ ∀ x ¬ ( ph ∧ ps ) ) ;;
	step 3 : wff = alnex () |- ( ∀ x ¬ ( ph ∧ ps ) ↔ ¬ ∃ x ( ph ∧ ps ) ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ( ph → ¬ ps ) ↔ ¬ ∃ x ( ph ∧ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* A relationship between two quantifiers and negation.  (Contributed by NM,
     18-Aug-1993.) */

theorem alexn (ph : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∀ x ∃ y ¬ ph ↔ ¬ ∃ x ∀ y ph ) ;;
}

proof of alexn {
	step 1 : wff = exnal () |- ( ∃ y ¬ ph ↔ ¬ ∀ y ph ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ∃ y ¬ ph ↔ ∀ x ¬ ∀ y ph ) ;;
	step 3 : wff = alnex () |- ( ∀ x ¬ ∀ y ph ↔ ¬ ∃ x ∀ y ph ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ∃ y ¬ ph ↔ ¬ ∃ x ∀ y ph ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem *11.51 in [WhiteheadRussell] p. 164.  (Contributed by Andrew
     Salmon, 24-May-2011.)  (Proof shortened by Wolf Lammen, 25-Sep-2014.) */

theorem 2exnexn (ph : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∃ x ∀ y ph ↔ ¬ ∀ x ∃ y ¬ ph ) ;;
}

proof of 2exnexn {
	step 1 : wff = alexn () |- ( ∀ x ∃ y ¬ ph ↔ ¬ ∃ x ∀ y ph ) ;;
	step 2 : wff = con2bii (step 1) |- ( ∃ x ∀ y ph ↔ ¬ ∀ x ∃ y ¬ ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem 19.18 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.) */

theorem exbi (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph ↔ ps ) → ( ∃ x ph ↔ ∃ x ps ) ) ;;
}

proof of exbi {
	step 1 : wff = bi1 () |- ( ( ph ↔ ps ) → ( ph → ps ) ) ;;
	step 2 : wff = alimi (step 1) |- ( ∀ x ( ph ↔ ps ) → ∀ x ( ph → ps ) ) ;;
	step 3 : wff = exim () |- ( ∀ x ( ph → ps ) → ( ∃ x ph → ∃ x ps ) ) ;;
	step 4 : wff = syl (step 2, step 3) |- ( ∀ x ( ph ↔ ps ) → ( ∃ x ph → ∃ x ps ) ) ;;
	step 5 : wff = bi2 () |- ( ( ph ↔ ps ) → ( ps → ph ) ) ;;
	step 6 : wff = alimi (step 5) |- ( ∀ x ( ph ↔ ps ) → ∀ x ( ps → ph ) ) ;;
	step 7 : wff = exim () |- ( ∀ x ( ps → ph ) → ( ∃ x ps → ∃ x ph ) ) ;;
	step 8 : wff = syl (step 6, step 7) |- ( ∀ x ( ph ↔ ps ) → ( ∃ x ps → ∃ x ph ) ) ;;
	step 9 : wff = impbid (step 4, step 8) |- ( ∀ x ( ph ↔ ps ) → ( ∃ x ph ↔ ∃ x ps ) ) ;;
	qed prop 1 = step 9 ;;
}

/* Inference adding existential quantifier to both sides of an
       equivalence.  (Contributed by NM, 24-May-1994.) */

theorem exbii (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∃ x ph ↔ ∃ x ps ) ;;
}

proof of exbii {
	step 1 : wff = exbi () |- ( ∀ x ( ph ↔ ps ) → ( ∃ x ph ↔ ∃ x ps ) ) ;;
	step 2 : wff = mpg (step 1, hyp 1) |- ( ∃ x ph ↔ ∃ x ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding two existential quantifiers to both sides of an
       equivalence.  (Contributed by NM, 16-Mar-1995.) */

theorem 2exbii (ph : wff, ps : wff, x : set, y : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∃ x ∃ y ph ↔ ∃ x ∃ y ps ) ;;
}

proof of 2exbii {
	step 1 : wff = exbii (hyp 1) |- ( ∃ y ph ↔ ∃ y ps ) ;;
	step 2 : wff = exbii (step 1) |- ( ∃ x ∃ y ph ↔ ∃ x ∃ y ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference adding 3 existential quantifiers to both sides of an
       equivalence.  (Contributed by NM, 2-May-1995.) */

theorem 3exbii (ph : wff, ps : wff, x : set, y : set, z : set)  {
	hyp 1 : wff = |- ( ph ↔ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∃ x ∃ y ∃ z ph ↔ ∃ x ∃ y ∃ z ps ) ;;
}

proof of 3exbii {
	step 1 : wff = exbii (hyp 1) |- ( ∃ z ph ↔ ∃ z ps ) ;;
	step 2 : wff = 2exbii (step 1) |- ( ∃ x ∃ y ∃ z ph ↔ ∃ x ∃ y ∃ z ps ) ;;
	qed prop 1 = step 2 ;;
}

/* A transformation of quantifiers and logical connectives.  (Contributed by
     NM, 25-Mar-1996.)  (Proof shortened by Wolf Lammen, 4-Sep-2014.) */

theorem exanali (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph ∧ ¬ ps ) ↔ ¬ ∀ x ( ph → ps ) ) ;;
}

proof of exanali {
	step 1 : wff = annim () |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ph → ps ) ) ;;
	step 2 : wff = exbii (step 1) |- ( ∃ x ( ph ∧ ¬ ps ) ↔ ∃ x ¬ ( ph → ps ) ) ;;
	step 3 : wff = exnal () |- ( ∃ x ¬ ( ph → ps ) ↔ ¬ ∀ x ( ph → ps ) ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∃ x ( ph ∧ ¬ ps ) ↔ ¬ ∀ x ( ph → ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Commutation of conjunction inside an existential quantifier.  (Contributed
     by NM, 18-Aug-1993.) */

theorem exancom (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph ∧ ps ) ↔ ∃ x ( ps ∧ ph ) ) ;;
}

proof of exancom {
	step 1 : wff = ancom () |- ( ( ph ∧ ps ) ↔ ( ps ∧ ph ) ) ;;
	step 2 : wff = exbii (step 1) |- ( ∃ x ( ph ∧ ps ) ↔ ∃ x ( ps ∧ ph ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction from Theorem 19.21 of [Margaris] p. 90.  (Contributed by NM,
       10-Feb-1997.)  (Proof shortened by Andrew Salmon, 13-May-2011.) */

theorem alrimdh (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ps → ∀ x ps ) ;;
	hyp 3 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ps → ∀ x ch ) ) ;;
}

proof of alrimdh {
	step 1 : wff = alimdh (hyp 1, hyp 3) |- ( ph → ( ∀ x ps → ∀ x ch ) ) ;;
	step 2 : wff = syl5 (hyp 2, step 1) |- ( ph → ( ps → ∀ x ch ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Deduction from Theorem 19.22 of [Margaris] p. 90.  (Contributed by NM,
       20-May-1996.) */

theorem eximdh (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ph → ( ps → ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ∃ x ps → ∃ x ch ) ) ;;
}

proof of eximdh {
	step 1 : wff = alrimih (hyp 1, hyp 2) |- ( ph → ∀ x ( ps → ch ) ) ;;
	step 2 : wff = exim () |- ( ∀ x ( ps → ch ) → ( ∃ x ps → ∃ x ch ) ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ph → ( ∃ x ps → ∃ x ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Deduction for generalization rule for negated wff.  (Contributed by NM,
       2-Jan-2002.) */

theorem nexdh (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ph → ¬ ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ¬ ∃ x ps ) ;;
}

proof of nexdh {
	step 1 : wff = alrimih (hyp 1, hyp 2) |- ( ph → ∀ x ¬ ps ) ;;
	step 2 : wff = alnex () |- ( ∀ x ¬ ps ↔ ¬ ∃ x ps ) ;;
	step 3 : wff = sylib (step 1, step 2) |- ( ph → ¬ ∃ x ps ) ;;
	qed prop 1 = step 3 ;;
}

/* Formula-building rule for universal quantifier (deduction rule).
       (Contributed by NM, 5-Aug-1993.) */

theorem albidh (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ∀ x ps ↔ ∀ x ch ) ) ;;
}

proof of albidh {
	step 1 : wff = alrimih (hyp 1, hyp 2) |- ( ph → ∀ x ( ps ↔ ch ) ) ;;
	step 2 : wff = albi () |- ( ∀ x ( ps ↔ ch ) → ( ∀ x ps ↔ ∀ x ch ) ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ph → ( ∀ x ps ↔ ∀ x ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Formula-building rule for existential quantifier (deduction rule).
       (Contributed by NM, 5-Aug-1993.) */

theorem exbidh (ph : wff, ps : wff, ch : wff, x : set)  {
	hyp 1 : wff = |- ( ph → ∀ x ph ) ;;
	hyp 2 : wff = |- ( ph → ( ps ↔ ch ) ) ;;
	-----------------------
	prop 1 : wff = |- ( ph → ( ∃ x ps ↔ ∃ x ch ) ) ;;
}

proof of exbidh {
	step 1 : wff = alrimih (hyp 1, hyp 2) |- ( ph → ∀ x ( ps ↔ ch ) ) ;;
	step 2 : wff = exbi () |- ( ∀ x ( ps ↔ ch ) → ( ∃ x ps ↔ ∃ x ch ) ) ;;
	step 3 : wff = syl (step 1, step 2) |- ( ph → ( ∃ x ps ↔ ∃ x ch ) ) ;;
	qed prop 1 = step 3 ;;
}

/* Simplification of an existentially quantified conjunction.  (Contributed
     by Rodolfo Medina, 25-Sep-2010.)  (Proof shortened by Andrew Salmon,
     29-Jun-2011.) */

theorem exsimpl (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph ∧ ps ) → ∃ x ph ) ;;
}

proof of exsimpl {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = eximi (step 1) |- ( ∃ x ( ph ∧ ps ) → ∃ x ph ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem 19.26 of [Margaris] p. 90.  Also Theorem *10.22 of
     [WhiteheadRussell] p. 147.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 4-Jul-2014.) */

theorem 19.26 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph ∧ ps ) ↔ ( ∀ x ph ∧ ∀ x ps ) ) ;;
}

proof of 19.26 {
	step 1 : wff = simpl () |- ( ( ph ∧ ps ) → ph ) ;;
	step 2 : wff = alimi (step 1) |- ( ∀ x ( ph ∧ ps ) → ∀ x ph ) ;;
	step 3 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 4 : wff = alimi (step 3) |- ( ∀ x ( ph ∧ ps ) → ∀ x ps ) ;;
	step 5 : wff = jca (step 2, step 4) |- ( ∀ x ( ph ∧ ps ) → ( ∀ x ph ∧ ∀ x ps ) ) ;;
	step 6 : wff = id () |- ( ( ph ∧ ps ) → ( ph ∧ ps ) ) ;;
	step 7 : wff = alanimi (step 6) |- ( ( ∀ x ph ∧ ∀ x ps ) → ∀ x ( ph ∧ ps ) ) ;;
	step 8 : wff = impbii (step 5, step 7) |- ( ∀ x ( ph ∧ ps ) ↔ ( ∀ x ph ∧ ∀ x ps ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Theorem 19.26 of [Margaris] p. 90 with two quantifiers.  (Contributed by
     NM, 3-Feb-2005.) */

theorem 19.26-2 (ph : wff, ps : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∀ x ∀ y ( ph ∧ ps ) ↔ ( ∀ x ∀ y ph ∧ ∀ x ∀ y ps ) ) ;;
}

proof of 19.26-2 {
	step 1 : wff = 19.26 () |- ( ∀ y ( ph ∧ ps ) ↔ ( ∀ y ph ∧ ∀ y ps ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ∀ y ( ph ∧ ps ) ↔ ∀ x ( ∀ y ph ∧ ∀ y ps ) ) ;;
	step 3 : wff = 19.26 () |- ( ∀ x ( ∀ y ph ∧ ∀ y ps ) ↔ ( ∀ x ∀ y ph ∧ ∀ x ∀ y ps ) ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ∀ y ( ph ∧ ps ) ↔ ( ∀ x ∀ y ph ∧ ∀ x ∀ y ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem 19.26 of [Margaris] p. 90 with triple conjunction.  (Contributed
     by NM, 13-Sep-2011.) */

theorem 19.26-3an (ph : wff, ps : wff, ch : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph ∧ ps ∧ ch ) ↔ ( ∀ x ph ∧ ∀ x ps ∧ ∀ x ch ) ) ;;
}

proof of 19.26-3an {
	step 1 : wff = 19.26 () |- ( ∀ x ( ( ph ∧ ps ) ∧ ch ) ↔ ( ∀ x ( ph ∧ ps ) ∧ ∀ x ch ) ) ;;
	step 2 : wff = 19.26 () |- ( ∀ x ( ph ∧ ps ) ↔ ( ∀ x ph ∧ ∀ x ps ) ) ;;
	step 3 : wff = anbi1i (step 2) |- ( ( ∀ x ( ph ∧ ps ) ∧ ∀ x ch ) ↔ ( ( ∀ x ph ∧ ∀ x ps ) ∧ ∀ x ch ) ) ;;
	step 4 : wff = bitri (step 1, step 3) |- ( ∀ x ( ( ph ∧ ps ) ∧ ch ) ↔ ( ( ∀ x ph ∧ ∀ x ps ) ∧ ∀ x ch ) ) ;;
	step 5 : wff = df-3an () |- ( ( ph ∧ ps ∧ ch ) ↔ ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 6 : wff = albii (step 5) |- ( ∀ x ( ph ∧ ps ∧ ch ) ↔ ∀ x ( ( ph ∧ ps ) ∧ ch ) ) ;;
	step 7 : wff = df-3an () |- ( ( ∀ x ph ∧ ∀ x ps ∧ ∀ x ch ) ↔ ( ( ∀ x ph ∧ ∀ x ps ) ∧ ∀ x ch ) ) ;;
	step 8 : wff = 3bitr4i (step 4, step 6, step 7) |- ( ∀ x ( ph ∧ ps ∧ ch ) ↔ ( ∀ x ph ∧ ∀ x ps ∧ ∀ x ch ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Theorem 19.29 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Andrew Salmon, 13-May-2011.) */

theorem 19.29 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ( ∀ x ph ∧ ∃ x ps ) → ∃ x ( ph ∧ ps ) ) ;;
}

proof of 19.29 {
	step 1 : wff = pm3.2 () |- ( ph → ( ps → ( ph ∧ ps ) ) ) ;;
	step 2 : wff = alimi (step 1) |- ( ∀ x ph → ∀ x ( ps → ( ph ∧ ps ) ) ) ;;
	step 3 : wff = exim () |- ( ∀ x ( ps → ( ph ∧ ps ) ) → ( ∃ x ps → ∃ x ( ph ∧ ps ) ) ) ;;
	step 4 : wff = syl (step 2, step 3) |- ( ∀ x ph → ( ∃ x ps → ∃ x ( ph ∧ ps ) ) ) ;;
	step 5 : wff = imp (step 4) |- ( ( ∀ x ph ∧ ∃ x ps ) → ∃ x ( ph ∧ ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Variation of Theorem 19.29 of [Margaris] p. 90.  (Contributed by NM,
     18-Aug-1993.) */

theorem 19.29r (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ( ∃ x ph ∧ ∀ x ps ) → ∃ x ( ph ∧ ps ) ) ;;
}

proof of 19.29r {
	step 1 : wff = 19.29 () |- ( ( ∀ x ps ∧ ∃ x ph ) → ∃ x ( ps ∧ ph ) ) ;;
	step 2 : wff = ancoms (step 1) |- ( ( ∃ x ph ∧ ∀ x ps ) → ∃ x ( ps ∧ ph ) ) ;;
	step 3 : wff = exancom () |- ( ∃ x ( ph ∧ ps ) ↔ ∃ x ( ps ∧ ph ) ) ;;
	step 4 : wff = sylibr (step 2, step 3) |- ( ( ∃ x ph ∧ ∀ x ps ) → ∃ x ( ph ∧ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Variation of Theorem 19.29 of [Margaris] p. 90 with double
     quantification.  (Contributed by NM, 3-Feb-2005.) */

theorem 19.29r2 (ph : wff, ps : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ( ∃ x ∃ y ph ∧ ∀ x ∀ y ps ) → ∃ x ∃ y ( ph ∧ ps ) ) ;;
}

proof of 19.29r2 {
	step 1 : wff = 19.29r () |- ( ( ∃ x ∃ y ph ∧ ∀ x ∀ y ps ) → ∃ x ( ∃ y ph ∧ ∀ y ps ) ) ;;
	step 2 : wff = 19.29r () |- ( ( ∃ y ph ∧ ∀ y ps ) → ∃ y ( ph ∧ ps ) ) ;;
	step 3 : wff = eximi (step 2) |- ( ∃ x ( ∃ y ph ∧ ∀ y ps ) → ∃ x ∃ y ( ph ∧ ps ) ) ;;
	step 4 : wff = syl (step 1, step 3) |- ( ( ∃ x ∃ y ph ∧ ∀ x ∀ y ps ) → ∃ x ∃ y ( ph ∧ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Variation of Theorem 19.29 of [Margaris] p. 90 with mixed quantification.
     (Contributed by NM, 11-Feb-2005.) */

theorem 19.29x (ph : wff, ps : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ( ∃ x ∀ y ph ∧ ∀ x ∃ y ps ) → ∃ x ∃ y ( ph ∧ ps ) ) ;;
}

proof of 19.29x {
	step 1 : wff = 19.29r () |- ( ( ∃ x ∀ y ph ∧ ∀ x ∃ y ps ) → ∃ x ( ∀ y ph ∧ ∃ y ps ) ) ;;
	step 2 : wff = 19.29 () |- ( ( ∀ y ph ∧ ∃ y ps ) → ∃ y ( ph ∧ ps ) ) ;;
	step 3 : wff = eximi (step 2) |- ( ∃ x ( ∀ y ph ∧ ∃ y ps ) → ∃ x ∃ y ( ph ∧ ps ) ) ;;
	step 4 : wff = syl (step 1, step 3) |- ( ( ∃ x ∀ y ph ∧ ∀ x ∃ y ps ) → ∃ x ∃ y ( ph ∧ ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem 19.35 of [Margaris] p. 90.  This theorem is useful for moving an
     implication (in the form of the right-hand side) into the scope of a
     single existential quantifier.  (Contributed by NM, 5-Aug-1993.)  (Proof
     shortened by Wolf Lammen, 27-Jun-2014.) */

theorem 19.35 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph → ps ) ↔ ( ∀ x ph → ∃ x ps ) ) ;;
}

proof of 19.35 {
	step 1 : wff = 19.26 () |- ( ∀ x ( ph ∧ ¬ ps ) ↔ ( ∀ x ph ∧ ∀ x ¬ ps ) ) ;;
	step 2 : wff = annim () |- ( ( ph ∧ ¬ ps ) ↔ ¬ ( ph → ps ) ) ;;
	step 3 : wff = albii (step 2) |- ( ∀ x ( ph ∧ ¬ ps ) ↔ ∀ x ¬ ( ph → ps ) ) ;;
	step 4 : wff = alnex () |- ( ∀ x ¬ ps ↔ ¬ ∃ x ps ) ;;
	step 5 : wff = anbi2i (step 4) |- ( ( ∀ x ph ∧ ∀ x ¬ ps ) ↔ ( ∀ x ph ∧ ¬ ∃ x ps ) ) ;;
	step 6 : wff = 3bitr3i (step 1, step 3, step 5) |- ( ∀ x ¬ ( ph → ps ) ↔ ( ∀ x ph ∧ ¬ ∃ x ps ) ) ;;
	step 7 : wff = alnex () |- ( ∀ x ¬ ( ph → ps ) ↔ ¬ ∃ x ( ph → ps ) ) ;;
	step 8 : wff = annim () |- ( ( ∀ x ph ∧ ¬ ∃ x ps ) ↔ ¬ ( ∀ x ph → ∃ x ps ) ) ;;
	step 9 : wff = 3bitr3i (step 6, step 7, step 8) |- ( ¬ ∃ x ( ph → ps ) ↔ ¬ ( ∀ x ph → ∃ x ps ) ) ;;
	step 10 : wff = con4bii (step 9) |- ( ∃ x ( ph → ps ) ↔ ( ∀ x ph → ∃ x ps ) ) ;;
	qed prop 1 = step 10 ;;
}

/* Inference from Theorem 19.35 of [Margaris] p. 90.  (Contributed by NM,
       5-Aug-1993.) */

theorem 19.35i (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ∃ x ( ph → ps ) ;;
	-----------------------
	prop 1 : wff = |- ( ∀ x ph → ∃ x ps ) ;;
}

proof of 19.35i {
	step 1 : wff = 19.35 () |- ( ∃ x ( ph → ps ) ↔ ( ∀ x ph → ∃ x ps ) ) ;;
	step 2 : wff = mpbi (hyp 1, step 1) |- ( ∀ x ph → ∃ x ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Inference from Theorem 19.35 of [Margaris] p. 90.  (Contributed by NM,
       5-Aug-1993.) */

theorem 19.35ri (ph : wff, ps : wff, x : set)  {
	hyp 1 : wff = |- ( ∀ x ph → ∃ x ps ) ;;
	-----------------------
	prop 1 : wff = |- ∃ x ( ph → ps ) ;;
}

proof of 19.35ri {
	step 1 : wff = 19.35 () |- ( ∃ x ( ph → ps ) ↔ ( ∀ x ph → ∃ x ps ) ) ;;
	step 2 : wff = mpbir (hyp 1, step 1) |- ∃ x ( ph → ps ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem 19.25 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.) */

theorem 19.25 (ph : wff, ps : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∀ y ∃ x ( ph → ps ) → ( ∃ y ∀ x ph → ∃ y ∃ x ps ) ) ;;
}

proof of 19.25 {
	step 1 : wff = 19.35 () |- ( ∃ x ( ph → ps ) ↔ ( ∀ x ph → ∃ x ps ) ) ;;
	step 2 : wff = biimpi (step 1) |- ( ∃ x ( ph → ps ) → ( ∀ x ph → ∃ x ps ) ) ;;
	step 3 : wff = alimi (step 2) |- ( ∀ y ∃ x ( ph → ps ) → ∀ y ( ∀ x ph → ∃ x ps ) ) ;;
	step 4 : wff = exim () |- ( ∀ y ( ∀ x ph → ∃ x ps ) → ( ∃ y ∀ x ph → ∃ y ∃ x ps ) ) ;;
	step 5 : wff = syl (step 3, step 4) |- ( ∀ y ∃ x ( ph → ps ) → ( ∃ y ∀ x ph → ∃ y ∃ x ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/* Theorem 19.30 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Andrew Salmon, 25-May-2011.) */

theorem 19.30 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∃ x ps ) ) ;;
}

proof of 19.30 {
	step 1 : wff = exnal () |- ( ∃ x ¬ ph ↔ ¬ ∀ x ph ) ;;
	step 2 : wff = exim () |- ( ∀ x ( ¬ ph → ps ) → ( ∃ x ¬ ph → ∃ x ps ) ) ;;
	step 3 : wff = syl5bir (step 1, step 2) |- ( ∀ x ( ¬ ph → ps ) → ( ¬ ∀ x ph → ∃ x ps ) ) ;;
	step 4 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 5 : wff = albii (step 4) |- ( ∀ x ( ph ∨ ps ) ↔ ∀ x ( ¬ ph → ps ) ) ;;
	step 6 : wff = df-or () |- ( ( ∀ x ph ∨ ∃ x ps ) ↔ ( ¬ ∀ x ph → ∃ x ps ) ) ;;
	step 7 : wff = 3imtr4i (step 3, step 5, step 6) |- ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∃ x ps ) ) ;;
	qed prop 1 = step 7 ;;
}

/* Theorem 19.43 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.)
     (Proof shortened by Wolf Lammen, 27-Jun-2014.) */

theorem 19.43 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph ∨ ps ) ↔ ( ∃ x ph ∨ ∃ x ps ) ) ;;
}

proof of 19.43 {
	step 1 : wff = df-or () |- ( ( ph ∨ ps ) ↔ ( ¬ ph → ps ) ) ;;
	step 2 : wff = exbii (step 1) |- ( ∃ x ( ph ∨ ps ) ↔ ∃ x ( ¬ ph → ps ) ) ;;
	step 3 : wff = 19.35 () |- ( ∃ x ( ¬ ph → ps ) ↔ ( ∀ x ¬ ph → ∃ x ps ) ) ;;
	step 4 : wff = alnex () |- ( ∀ x ¬ ph ↔ ¬ ∃ x ph ) ;;
	step 5 : wff = imbi1i (step 4) |- ( ( ∀ x ¬ ph → ∃ x ps ) ↔ ( ¬ ∃ x ph → ∃ x ps ) ) ;;
	step 6 : wff = 3bitri (step 2, step 3, step 5) |- ( ∃ x ( ph ∨ ps ) ↔ ( ¬ ∃ x ph → ∃ x ps ) ) ;;
	step 7 : wff = df-or () |- ( ( ∃ x ph ∨ ∃ x ps ) ↔ ( ¬ ∃ x ph → ∃ x ps ) ) ;;
	step 8 : wff = bitr4i (step 6, step 7) |- ( ∃ x ( ph ∨ ps ) ↔ ( ∃ x ph ∨ ∃ x ps ) ) ;;
	qed prop 1 = step 8 ;;
}

/* Obsolete proof of ~ 19.43 as of 3-May-2016.  Leave this in for the example
     on the mmrecent.html page.  (Contributed by NM, 5-Aug-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) */

theorem 19.43OLD (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph ∨ ps ) ↔ ( ∃ x ph ∨ ∃ x ps ) ) ;;
}

proof of 19.43OLD {
	step 1 : wff = ioran () |- ( ¬ ( ph ∨ ps ) ↔ ( ¬ ph ∧ ¬ ps ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ¬ ( ph ∨ ps ) ↔ ∀ x ( ¬ ph ∧ ¬ ps ) ) ;;
	step 3 : wff = 19.26 () |- ( ∀ x ( ¬ ph ∧ ¬ ps ) ↔ ( ∀ x ¬ ph ∧ ∀ x ¬ ps ) ) ;;
	step 4 : wff = alnex () |- ( ∀ x ¬ ph ↔ ¬ ∃ x ph ) ;;
	step 5 : wff = alnex () |- ( ∀ x ¬ ps ↔ ¬ ∃ x ps ) ;;
	step 6 : wff = anbi12i (step 4, step 5) |- ( ( ∀ x ¬ ph ∧ ∀ x ¬ ps ) ↔ ( ¬ ∃ x ph ∧ ¬ ∃ x ps ) ) ;;
	step 7 : wff = 3bitri (step 2, step 3, step 6) |- ( ∀ x ¬ ( ph ∨ ps ) ↔ ( ¬ ∃ x ph ∧ ¬ ∃ x ps ) ) ;;
	step 8 : wff = notbii (step 7) |- ( ¬ ∀ x ¬ ( ph ∨ ps ) ↔ ¬ ( ¬ ∃ x ph ∧ ¬ ∃ x ps ) ) ;;
	step 9 : wff = df-ex () |- ( ∃ x ( ph ∨ ps ) ↔ ¬ ∀ x ¬ ( ph ∨ ps ) ) ;;
	step 10 : wff = oran () |- ( ( ∃ x ph ∨ ∃ x ps ) ↔ ¬ ( ¬ ∃ x ph ∧ ¬ ∃ x ps ) ) ;;
	step 11 : wff = 3bitr4i (step 8, step 9, step 10) |- ( ∃ x ( ph ∨ ps ) ↔ ( ∃ x ph ∨ ∃ x ps ) ) ;;
	qed prop 1 = step 11 ;;
}

/* Theorem 19.33 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.) */

theorem 19.33 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ( ∀ x ph ∨ ∀ x ps ) → ∀ x ( ph ∨ ps ) ) ;;
}

proof of 19.33 {
	step 1 : wff = orc () |- ( ph → ( ph ∨ ps ) ) ;;
	step 2 : wff = alimi (step 1) |- ( ∀ x ph → ∀ x ( ph ∨ ps ) ) ;;
	step 3 : wff = olc () |- ( ps → ( ph ∨ ps ) ) ;;
	step 4 : wff = alimi (step 3) |- ( ∀ x ps → ∀ x ( ph ∨ ps ) ) ;;
	step 5 : wff = jaoi (step 2, step 4) |- ( ( ∀ x ph ∨ ∀ x ps ) → ∀ x ( ph ∨ ps ) ) ;;
	qed prop 1 = step 5 ;;
}

/* The antecedent provides a condition implying the converse of ~ 19.33 .
     Compare Theorem 19.33 of [Margaris] p. 90.  (Contributed by NM,
     27-Mar-2004.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
     shortened by Wolf Lammen, 5-Jul-2014.) */

theorem 19.33b (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ¬ ( ∃ x ph ∧ ∃ x ps ) → ( ∀ x ( ph ∨ ps ) ↔ ( ∀ x ph ∨ ∀ x ps ) ) ) ;;
}

proof of 19.33b {
	step 1 : wff = ianor () |- ( ¬ ( ∃ x ph ∧ ∃ x ps ) ↔ ( ¬ ∃ x ph ∨ ¬ ∃ x ps ) ) ;;
	step 2 : wff = alnex () |- ( ∀ x ¬ ph ↔ ¬ ∃ x ph ) ;;
	step 3 : wff = pm2.53 () |- ( ( ph ∨ ps ) → ( ¬ ph → ps ) ) ;;
	step 4 : wff = al2imi (step 3) |- ( ∀ x ( ph ∨ ps ) → ( ∀ x ¬ ph → ∀ x ps ) ) ;;
	step 5 : wff = syl5bir (step 2, step 4) |- ( ∀ x ( ph ∨ ps ) → ( ¬ ∃ x ph → ∀ x ps ) ) ;;
	step 6 : wff = olc () |- ( ∀ x ps → ( ∀ x ph ∨ ∀ x ps ) ) ;;
	step 7 : wff = syl6com (step 5, step 6) |- ( ¬ ∃ x ph → ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∀ x ps ) ) ) ;;
	step 8 : wff = 19.30 () |- ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∃ x ps ) ) ;;
	step 9 : wff = orcomd (step 8) |- ( ∀ x ( ph ∨ ps ) → ( ∃ x ps ∨ ∀ x ph ) ) ;;
	step 10 : wff = ord (step 9) |- ( ∀ x ( ph ∨ ps ) → ( ¬ ∃ x ps → ∀ x ph ) ) ;;
	step 11 : wff = orc () |- ( ∀ x ph → ( ∀ x ph ∨ ∀ x ps ) ) ;;
	step 12 : wff = syl6com (step 10, step 11) |- ( ¬ ∃ x ps → ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∀ x ps ) ) ) ;;
	step 13 : wff = jaoi (step 7, step 12) |- ( ( ¬ ∃ x ph ∨ ¬ ∃ x ps ) → ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∀ x ps ) ) ) ;;
	step 14 : wff = sylbi (step 1, step 13) |- ( ¬ ( ∃ x ph ∧ ∃ x ps ) → ( ∀ x ( ph ∨ ps ) → ( ∀ x ph ∨ ∀ x ps ) ) ) ;;
	step 15 : wff = 19.33 () |- ( ( ∀ x ph ∨ ∀ x ps ) → ∀ x ( ph ∨ ps ) ) ;;
	step 16 : wff = impbid1 (step 14, step 15) |- ( ¬ ( ∃ x ph ∧ ∃ x ps ) → ( ∀ x ( ph ∨ ps ) ↔ ( ∀ x ph ∨ ∀ x ps ) ) ) ;;
	qed prop 1 = step 16 ;;
}

/* Theorem 19.40 of [Margaris] p. 90.  (Contributed by NM, 5-Aug-1993.) */

theorem 19.40 (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∃ x ( ph ∧ ps ) → ( ∃ x ph ∧ ∃ x ps ) ) ;;
}

proof of 19.40 {
	step 1 : wff = exsimpl () |- ( ∃ x ( ph ∧ ps ) → ∃ x ph ) ;;
	step 2 : wff = simpr () |- ( ( ph ∧ ps ) → ps ) ;;
	step 3 : wff = eximi (step 2) |- ( ∃ x ( ph ∧ ps ) → ∃ x ps ) ;;
	step 4 : wff = jca (step 1, step 3) |- ( ∃ x ( ph ∧ ps ) → ( ∃ x ph ∧ ∃ x ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Theorem *11.42 in [WhiteheadRussell] p. 163.  Theorem 19.40 of [Margaris]
     p. 90 with 2 quantifiers.  (Contributed by Andrew Salmon, 24-May-2011.) */

theorem 19.40-2 (ph : wff, ps : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∃ x ∃ y ( ph ∧ ps ) → ( ∃ x ∃ y ph ∧ ∃ x ∃ y ps ) ) ;;
}

proof of 19.40-2 {
	step 1 : wff = 19.40 () |- ( ∃ y ( ph ∧ ps ) → ( ∃ y ph ∧ ∃ y ps ) ) ;;
	step 2 : wff = eximi (step 1) |- ( ∃ x ∃ y ( ph ∧ ps ) → ∃ x ( ∃ y ph ∧ ∃ y ps ) ) ;;
	step 3 : wff = 19.40 () |- ( ∃ x ( ∃ y ph ∧ ∃ y ps ) → ( ∃ x ∃ y ph ∧ ∃ x ∃ y ps ) ) ;;
	step 4 : wff = syl (step 2, step 3) |- ( ∃ x ∃ y ( ph ∧ ps ) → ( ∃ x ∃ y ph ∧ ∃ x ∃ y ps ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Split a biconditional and distribute quantifier.  (Contributed by NM,
     18-Aug-1993.) */

theorem albiim (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph ↔ ps ) ↔ ( ∀ x ( ph → ps ) ∧ ∀ x ( ps → ph ) ) ) ;;
}

proof of albiim {
	step 1 : wff = dfbi2 () |- ( ( ph ↔ ps ) ↔ ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ( ph ↔ ps ) ↔ ∀ x ( ( ph → ps ) ∧ ( ps → ph ) ) ) ;;
	step 3 : wff = 19.26 () |- ( ∀ x ( ( ph → ps ) ∧ ( ps → ph ) ) ↔ ( ∀ x ( ph → ps ) ∧ ∀ x ( ps → ph ) ) ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ( ph ↔ ps ) ↔ ( ∀ x ( ph → ps ) ∧ ∀ x ( ps → ph ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Split a biconditional and distribute 2 quantifiers.  (Contributed by NM,
     3-Feb-2005.) */

theorem 2albiim (ph : wff, ps : wff, x : set, y : set)  {
	prop 1 : wff = |- ( ∀ x ∀ y ( ph ↔ ps ) ↔ ( ∀ x ∀ y ( ph → ps ) ∧ ∀ x ∀ y ( ps → ph ) ) ) ;;
}

proof of 2albiim {
	step 1 : wff = albiim () |- ( ∀ y ( ph ↔ ps ) ↔ ( ∀ y ( ph → ps ) ∧ ∀ y ( ps → ph ) ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ∀ y ( ph ↔ ps ) ↔ ∀ x ( ∀ y ( ph → ps ) ∧ ∀ y ( ps → ph ) ) ) ;;
	step 3 : wff = 19.26 () |- ( ∀ x ( ∀ y ( ph → ps ) ∧ ∀ y ( ps → ph ) ) ↔ ( ∀ x ∀ y ( ph → ps ) ∧ ∀ x ∀ y ( ps → ph ) ) ) ;;
	step 4 : wff = bitri (step 2, step 3) |- ( ∀ x ∀ y ( ph ↔ ps ) ↔ ( ∀ x ∀ y ( ph → ps ) ∧ ∀ x ∀ y ( ps → ph ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Add/remove a conjunct in the scope of an existential quantifier.
     (Contributed by Raph Levien, 3-Jul-2006.) */

theorem exintrbi (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph → ps ) → ( ∃ x ph ↔ ∃ x ( ph ∧ ps ) ) ) ;;
}

proof of exintrbi {
	step 1 : wff = pm4.71 () |- ( ( ph → ps ) ↔ ( ph ↔ ( ph ∧ ps ) ) ) ;;
	step 2 : wff = albii (step 1) |- ( ∀ x ( ph → ps ) ↔ ∀ x ( ph ↔ ( ph ∧ ps ) ) ) ;;
	step 3 : wff = exbi () |- ( ∀ x ( ph ↔ ( ph ∧ ps ) ) → ( ∃ x ph ↔ ∃ x ( ph ∧ ps ) ) ) ;;
	step 4 : wff = sylbi (step 2, step 3) |- ( ∀ x ( ph → ps ) → ( ∃ x ph ↔ ∃ x ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 4 ;;
}

/* Introduce a conjunct in the scope of an existential quantifier.
     (Contributed by NM, 11-Aug-1993.) */

theorem exintr (ph : wff, ps : wff, x : set)  {
	prop 1 : wff = |- ( ∀ x ( ph → ps ) → ( ∃ x ph → ∃ x ( ph ∧ ps ) ) ) ;;
}

proof of exintr {
	step 1 : wff = exintrbi () |- ( ∀ x ( ph → ps ) → ( ∃ x ph ↔ ∃ x ( ph ∧ ps ) ) ) ;;
	step 2 : wff = biimpd (step 1) |- ( ∀ x ( ph → ps ) → ( ∃ x ph → ∃ x ( ph ∧ ps ) ) ) ;;
	qed prop 1 = step 2 ;;
}

/* Theorem *10.3 in [WhiteheadRussell] p. 150.  (Contributed by Andrew
     Salmon, 8-Jun-2011.) */

theorem alsyl (ph : wff, ps : wff, ch : wff, x : set)  {
	prop 1 : wff = |- ( ( ∀ x ( ph → ps ) ∧ ∀ x ( ps → ch ) ) → ∀ x ( ph → ch ) ) ;;
}

proof of alsyl {
	step 1 : wff = pm3.33 () |- ( ( ( ph → ps ) ∧ ( ps → ch ) ) → ( ph → ch ) ) ;;
	step 2 : wff = alanimi (step 1) |- ( ( ∀ x ( ph → ps ) ∧ ∀ x ( ps → ch ) ) → ∀ x ( ph → ch ) ) ;;
	qed prop 1 = step 2 ;;
}


